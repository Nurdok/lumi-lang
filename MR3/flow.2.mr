# MR3 compiler - flow control

class St-if(St-node)
  owner Mexp condition
  
  func dynamic parse()
    parse-new-exp(user ""):(owner self.condition)
    base.parse()
    
  func dynamic analyze-first()
    base.analyze-first()
  
  func dynamic analyze()
    self.condition.analyze-type(user glob.type-bool)
    base.analyze()
  
  func dynamic write()
    self.condition.write-intro()
    write(user "if (")
    self.condition.write-final()
    write(user ")")
    base.write()


class St-else(St-node)
  func dynamic parse()
    self.is-else := true
    base.parse()
    
  func dynamic analyze-first()
    base.analyze-first()
  
  func dynamic analyze()
    base.analyze()
  
  func dynamic write()
    write(user "else")
    base.write()


class St-else-if(St-else)
  func dynamic parse()
    self.is-else := true
    new St-if st-if
    st-if.init(user self)
    st-if.parse()
  
  func dynamic analyze-first()
    base.analyze-first()
  
  func dynamic analyze()
    do
      while ? self.next-brother and self.next-brother.is-else
      self.last-son.next-brother := self.next-brother
      self.last-son := self.next-brother
      self.last-son.father := self
      self.next-brother := self.last-son.next-brother
      self.last-son.next-brother := _
    base.analyze()
  
  func dynamic write()
    base.write()


class St-do(St-node)
  func dynamic parse()
    base.parse()
  
  func dynamic analyze-first()
    base.analyze-first()
  
  func dynamic analyze()
    base.analyze()
  
  func dynamic write()
    write(user "while (true)")
    base.write()


class St-while(St)
  owner Mexp condition
  
  func dynamic parse()
    parse-new-exp(user ""):(owner self.condition)
  
  func dynamic analyze-first()
    # nothing
  
  func dynamic analyze()
    self.condition.analyze-type(user glob.type-bool)
  
  func dynamic write()
    self.condition.write-intro()
    write(user "if (!(")
    self.condition.write-final()
    write(user ")) break;")


class St-for(St-node)
  owner String index-name
  owner Mexp start
  owner Mexp end
  
  func dynamic parse()
    read-new(user " "):(owner self.index-name)
    read-ignore(copy 3)
    self.start := _
    if parse-new-exp(user ":"):(owner self.end) = ':'
      self.start := self.end
      parse-new-exp(user ""):(owner self.end)
    owner Mvar mvar
    init-new-var(user glob.type-int):(owner mvar)
    f-new-copy(user self.index-name):(owner mvar.name)
    f-copy-new-var-map(user self.var-map):(owner self.sons-var-map)
    add-var(user self.sons-var-map, owner mvar)
    base.parse()
  
  func dynamic analyze-first()
    base.analyze-first()
  
  func dynamic analyze()
    if ? self.start
      self.start.analyze-type(user glob.type-int)
    self.end.analyze-type(user glob.type-int)
    base.analyze()
  
  func dynamic write()
    # {int index; for (index = (start); index < (end); ++index)
    if ? self.start
      self.start.write-intro()
    self.end.write-intro()
    write(user "{int ")
    write-cstyle(user self.index-name)
    write(user "; for (")
    write-cstyle(user self.index-name)
    write(user " = (")
    if ? self.start
      self.start.write-final()
    else
      write(user "0")
    write(user "); ")
    write-cstyle(user self.index-name)
    write(user " < (")
    self.end.write-final()
    write(user "); ++")
    write-cstyle(user self.index-name)
    write(user ")")
    base.write()
    write(user "}")


class St-return(St)
  func dynamic parse()
    # do nothing
  
  func dynamic analyze-first()
    # do nothing
  
  func dynamic analyze()
    do
      owner St next(self.next-brother)
      while ? next
      self.next-brother := next.next-brother
      delete next
    self.father.last-son := self
  
  func dynamic write()
    write(user "return OK;")


class St-raise(St-return)
  func dynamic parse()
    self.line-num := self.line-num - 1
  
  func dynamic analyze-first()
    # do nothing
  
  func dynamic analyze()
    base.analyze()
  
  func dynamic write()
    write-tb-raise()

# MR3 compiler - function

func f-get-access(user String access-text):(copy Int access)
  if access-text.equal(user "copy")
    access := ACCESS-COPY
  else-if access-text.equal(user "user")
    access := ACCESS-USER
  else-if access-text.equal(user "owner")
    access := ACCESS-OWNER
  else-if access-text.equal(user "var")
    access := ACCESS-VAR
  else
    f-syntax-error(user "unknown access", user access-text)


native class Dec-arg

class Arg-node(Object)
  owner Arg-node next
  
  func dynamic parse(copy Bool is-out, copy Int access):(copy Char end)
    # nothing
  func dynamic analyze()
    # nothing
  func dynamic write-intro()
    # nothing
  func dynamic write-final(copy Bool is-out)
    # nothing
  func dynamic get-dec():(user Dec-arg arg)
    # nothing
  func dynamic get-call-value():(user Mexp exp)
    # nothing

class Dec-arg(Arg-node)
  user Mvar mvar
  
  func inst init(copy Int access, user Mtype mtype, user String name)
    init-new-var(user mtype):(owner self.mvar)
    self.mvar.access := access
    f-new-copy(user name):(owner self.mvar.name)
  
  func dynamic parse(copy Bool is-out, copy Int access):(copy Char end)
    init-new-var(user _):(owner self.mvar)
    self.mvar.is-ref := is-out
    self.mvar.access := access
    if read-new(user " {"):(owner self.mvar.typename, copy end) = '{'
      read-new(user "}"):(owner self.mvar.sub-typename, copy end)
      read-c():(copy end)
    read-new(user ",)"):(owner self.mvar.name, copy end)
  
  func dynamic analyze()
    self.mvar.analyze()
  
  func dynamic write-intro()
    # nothing
  
  func dynamic write-final(copy Bool is-out)
    write-cstyle(user self.mvar.typename)
    if is-out
      write(user "*")
    if self.mvar.access = ACCESS-USER or self.mvar.access = ACCESS-OWNER
      write(user "*")
    write(user " ")
    write-cstyle(user self.mvar.name)
  
  func dynamic get-dec():(user Dec-arg arg)
    arg := self
  
  func dynamic get-call-value():(user Mexp exp)
    raise

class Call-arg(Arg-node)
  var Int access
  owner Mexp value
  
  func dynamic parse(copy Bool is-out, copy Int access):(copy Char end)
    self.access := access
    parse-new-exp(user ",)"):(owner self.value, copy end)
  
  func dynamic analyze()
    self.value.analyze()
  
  func dynamic write-intro()
    self.value.write-intro()
  
  func dynamic write-final(copy Bool is-out)
    if is-out
      write(user "&(")
    self.value.write-final()
    if is-out
      write(user ")")
  
  func dynamic get-dec():(user Dec-arg arg)
    raise
  
  func dynamic get-call-value():(user Mexp exp)
    exp := self.value

static Arg-list(Object)
  owner Arg-node first-param
  owner Arg-node first-out
  var Bool is-dec
  
  func inst init(copy Bool is-dec)
    self.first-param := _
    self.first-out := _
    self.is-dec := is-dec
  
  func inst parse-args(copy Bool is-out)
    user Arg-node prev(_)
    var Char end
    do
      var String{128} access-text
      read(user " )", user access-text):(copy end)
      while end = ' '
      var Int access
      f-get-access(user access-text):(copy access)
      var Type{Arg-node} arg-type
      if self.is-dec
        arg-type := Dec-arg
      else
        arg-type := Call-arg
      new As{arg-type} arg
      arg.parse(copy is-out, copy access):(copy end)
      arg.next := _
      if ? prev
        prev.next := arg
      else-if is-out
        self.first-out := arg
      else
        self.first-param := arg
      prev := arg
      while end = ','
      read-c():(copy end)
  
  func inst parse(copy Bool is-dec):(copy Char end)
    self.is-dec := is-dec
    self.parse-args(copy false)
    if read-c():(copy end) = ':'
      if read-c() != '('
        f-syntax-error-c(user "expeted '(', got", copy end)
      self.parse-args(copy true)
      read-c():(copy end)
    else
      self.first-out := _
  
  func inst analyze-args(user Arg-node first)
    user Arg-node node(first)
    do
      while ? node
      node.analyze()
      node := node.next
  
  func inst analyze()
    self.analyze-args(user self.first-param)
    self.analyze-args(user self.first-out)
  
  func inst write-args-intro(user Arg-node first)
    user Arg-node node(first)
    do
      while ? node
      node.write-intro()
      node := node.next
  
  func inst write-args-final(copy Bool is-out, user Arg-node first)
    user Arg-node node(first)
    var Bool has-more(not is-out and ? self.first-out)
    do
      while ? node
      node.write-final(copy is-out)
      node := node.next
      if has-more or ? node
        write(user ", ")
  
  func inst write-intro()
    self.write-args-intro(user self.first-param)
    self.write-args-intro(user self.first-out)
  
  func inst write-final()
    write(user "(")
    self.write-args-final(copy false, user self.first-param)
    self.write-args-final(copy true, user self.first-out)
    write(user ")")
  
  func inst add-arg(copy Int access, user Mtype mtype, user String name):(owner Arg-node first)
    new Dec-arg arg
    arg.init(copy access, user mtype, user name)
    arg.next := first
    first := arg
  
  func inst add-param(copy Int access, user Mtype mtype, user String name)
    self.add-arg(copy access, user mtype, user name):(owner self.first-param)
  
  func inst add-out(copy Int access, user Mtype mtype, user String name)
    self.add-arg(copy access, user mtype, user name):(owner self.first-out)
  
  func inst add-self-call(owner Mexp value)
    new Call-arg arg
    arg.access := ACCESS-USER
    arg.value := value
    arg.next := self.first-param
    self.first-param := arg

func parse-new-args():(owner Arg-list new-args)
  new Arg-list args
  args.parse(copy true)
  new-args := args


static Mfunc(Object)
  owner String name
  owner Arg-list args
  var Bool is-dynamic
  var Int dynamic-index
  
  func inst init(user String name)
    f-new-copy(user name):(owner self.name)
    new Arg-list args
    self.args := args
    self.args.init(copy true)
    self.is-dynamic := false
    self.dynamic-index := 0
  
  func inst parse()
    if ? glob.mclass
      var String{64} meth-type
      read(user " ", user meth-type)
      self.is-dynamic := meth-type.equal(user "dynamic")
    else
      self.is-dynamic := false
    self.dynamic-index := 0
    read-new(user "("):(owner self.name)
    parse-new-args():(owner self.args)
    if ? glob.mclass
      self.args.add-param(copy ACCESS-USER, user glob.mclass, user "self")
  
  func inst analyze()
    self.args.analyze()
  
  func inst write-name()
    if ? glob.mclass
      write-cstyle(user glob.mclass.name)
      write(user "_")
    write-cstyle(user self.name)
  
  func inst write()
    write(user "Returncode ")
    self.write-name()
    self.args.write-final()
  
  func inst m-new-var():(owner Mvar mvar)
    init-new-var(user glob.type-func):(owner mvar)
    f-new-copy(user self.name):(owner mvar.name)
    mvar.func-dec := self

func parse-new-mfunc():(owner Mfunc new-mfunc)
  new Mfunc mfunc
  mfunc.parse()
  new-mfunc := mfunc


class Call-operand(Operand)
  owner Arg-list args
  owner Operand func-opr
  var Bool is-used
  user Mvar res-var
  user Mexp res-exp
  owner String res-name
  
  func dynamic parse(owner String text, user String ends):(copy Char end)
    new Arg-list args
    self.args := args
    self.args.init(copy false)
    args.parse(copy false):(copy end)
    self.func-opr := _
    self.res-var := _
    self.res-name := _
    self.res-exp := _
  
  func dynamic analyze(user Mexp exp, user Mtype mtype, user Operand member, user Var-operand method)
    if mtype != glob.type-func
      f-syntax-error(user "not a function", user mtype.name)
    self.is-used := exp.is-used or ? self.next or ? exp.next or ? exp.operator
    if not self.is-used
      exp.is-used := true
    
    self.args.analyze()
    
    member.next := _
    user Operand method-opr
    method-opr := method
    if ? method and method-opr != member
      method.next := _
      self.func-opr := method
      new Mexp new-exp
      new-exp.operand := exp.operand
      new-exp.operator := _
      new-exp.next := _
      self.args.add-self-call(owner new-exp)
    else
      self.func-opr := exp.operand
    exp.operand := self
    
    if ? method and ? method.mvar.func-dec
      user Mfunc mfunc(method.mvar.func-dec)
      user Arg-node dec-out(mfunc.args.first-out)
      if not (? dec-out)
        if self.is-used
          f-syntax-error(user "no return value for", user method.mvar.name)
      else
        user Arg-node call-out(self.args.first-out)
        if ? call-out
          do
            while ? call-out.next
            call-out := call-out.next
            dec-out := dec-out.next
            if not (? dec-out)
              f-syntax-error(user "too many outputs for", user method.mvar.name)
        var Bool fill-out(? dec-out.next or not (? call-out))
        if ? dec-out.next
          dec-out := dec-out.next
          if ? dec-out.next or not (? call-out)
            f-syntax-error(user "too few outputs for", user method.mvar.name)
        user Dec-arg dec-res
        dec-out.get-dec():(user dec-res)
        self.res-var := dec-res.mvar
        if fill-out
          var String{64} res-count
          glob.res-count.str():(var res-count)
          glob.res-count := glob.res-count + 1
          new String{self.res-var.typename.length + res-count.length + 2} res-name
          self.res-name := res-name
          self.res-name.append(copy '-')
          self.res-name.concat(user self.res-var.typename)
          self.res-name.concat(user res-count)
          new Var-operand var-opr
          f-new-copy(user self.res-name):(owner var-opr.name)
          f-copy-var(user self.res-var, user self.res-name):(owner var-opr.mvar)
          var-opr.next := _
          new Mexp exp
          exp.operand := var-opr
          exp.operator := _
          exp.next := _
          new Call-arg arg
          arg.access := self.res-var.access
          arg.value := exp
          arg.next := _
          if ? call-out
            call-out.next := arg
          else
            self.args.first-out := arg
        else
          call-out.get-call-value():(user self.res-exp)
    
    if ? self.next
      # todo ...
      # self.next.analyze(user exp, user return-type, user self, user _)
  
  func inst write-call()
    write-tb-check()
    self.func-opr.write-all-final()
    self.args.write-final()
    write(user ")")
  
  func dynamic write-intro()
    self.func-opr.write-all-intro()
    self.args.write-intro()
    if ? self.res-exp
      self.res-exp.write-intro()
    else-if ? self.res-name
      write-cstyle(user self.res-var.typename)
      if not self.res-var.mtype.is-primitive
        write(user "*")
      write(user " ")
      write-cstyle(user self.res-name)
      write(user ";\n")
      write-spaces()
    if self.is-used
      self.write-call()
      write-new-indent-line()
  
  func dynamic write-final()
    if self.is-used
      if ? self.res-exp
        self.res-exp.write-final()
      else-if self.res-name
        write-cstyle(user self.res-name)
    else
      self.write-call()


func parse-new-operand(copy Type{Operand} opr-type, owner String text, user String ends):(owner Operand new-opr, copy Char end)
  new As{opr-type} opr
  new-opr := opr
  opr.parse(owner text, user ends):(copy end)
  var Type{Operand} next-type
  if end = '.'
    next-type := Member-operand
  else-if end = '['
    next-type := Slice-operand
  else-if end = '('
    next-type := Call-operand
  else
    opr.next := _
    return
  parse-new-operand(copy next-type, owner _, user ends):(owner opr.next, copy end)

func parse-new-operands(owner String text, user String ends):(owner Operand new-opr, copy Char end)
  var Type{Operand} opr-type
  if text.length = 0
    if end = '('
      opr-type := Block-operand
    else
      f-syntax-error-c(user "unexpected", copy end)
  else
    var Char first(text[0])
    if first = '\''
      opr-type := Char-operand
    else-if first = '"'
      opr-type := String-operand
    else-if first >= '0' and first <= '9'
      opr-type := Int-operand
    else-if text.length = 1 and first = '_'
      opr-type := Empty-operand
    else
      opr-type := Var-operand
  parse-new-operand(copy opr-type, owner text, user ends):(owner new-opr, copy end)


class St-func(St-node)
  owner Mfunc mfunc
  
  func inst add-args-vars(user Arg-node fisrt-arg)
    user Arg-node arg(fisrt-arg)
    do
      while ? arg
      user Dec-arg dec-arg
      arg.get-dec():(user dec-arg)
      while ? dec-arg
      add-var(user self.sons-var-map, user dec-arg.mvar)
      arg := arg.next
  
  func dynamic parse()
    parse-new-mfunc():(owner self.mfunc)
    self.add-var(owner self.mfunc.m-new-var())
    f-copy-new-var-map(user _):(owner self.sons-var-map)
    self.add-args-vars(owner self.mfunc.args.first-param)
    self.add-args-vars(owner self.mfunc.args.first-out)
    base.parse()
  
  func dynamic analyze-first()
    base.analyze-first()
  
  func dynamic analyze()
    self.mfunc.analyze()
    new St-return st-return
    st-return.init(user self)
    base.analyze()
  
  func dynamic write()
    if ? glob.mclass
      if not glob.methods
        return
      write-new-indent-line()
    write(user "static char* _func_name_")
    self.mfunc.write-name()
    write(user " = \"")
    if ? glob.mclass
      write(user glob.mclass.name)
      write(user ".")
    write(user self.mfunc.name)
    write(user "\";\n")
    write-spaces()
    write(user "#define MR_FUNC_NAME _func_name_")
    self.mfunc.write-name()
    write-new-indent-line()
    self.mfunc.write()
    user Mtype mclass(glob.mclass)
    glob.mclass := _
    base.write()
    glob.mclass := mclass
    write-new-indent-line()
    write(user "#undef MR_FUNC_NAME")


class St-main(St-func)
  func dynamic parse()
    base.parse()
  
  func dynamic analyze-first()
    base.analyze-first()
  
  func dynamic analyze()
    base.analyze()
  
  func dynamic write()
    base.write()
    write(user "\n\nMAIN_FUNC")

# MR3 compiler - expression

native class Mexp
native class Member-operand

class Operand(Object)
  owner Operand next
  
  func dynamic parse(owner String text, user String ends):(copy Char end)
    # nothing
  func dynamic analyze(user Mexp exp, user Mtype mtype, user Operand member, user Member-operand method)
    # nothing
  func dynamic write-intro()
    # nothing
  func dynamic write-final()
    # nothing
  
  func inst analyze-all(user Mexp exp)
    self.analyze(user exp, user _, user _, user _)
  
  func inst write-all-intro()
    self.write-intro()
    if ? self.next
      self.next.write-all-intro()
  
  func inst write-all-final()
    self.write-final()
    if ? self.next
      self.next.write-all-final()


func read-new-value(user String ends):(owner String out-text, copy Char end)
  new String{ends.length + 5} all-ends
  all-ends.copy(user " .[(")
  all-ends.concat(user ends)
  read-new(user all-ends):(owner out-text, copy end)
  delete all-ends

native func parse-new-operands(owner String text, user String ends):(owner Operand new-opr, copy Char end)

static Mexp(Object)
  owner Operand operand
  owner String operator
  owner Mexp next
  
  native func parse(owner String text, user String ends):(copy Char end)
  
  func inst parse-new-with-text(owner String text, user String ends):(owner Mexp new-exp, copy Char end)
    new Mexp exp
    exp.parse(owner text, user ends):(copy end)
    new-exp := exp
  
  func inst parse-new(user String ends):(owner Mexp new-exp, copy Char end)
    owner String text
    read-new-value(user ends):(owner text, copy end)
    self.parse-new-with-text(user text, user ends):(owner new-exp, copy end)
  
  func inst parse-new-with-kw(user String ends):(owner Mexp new-exp, copy Char end)
    if ? glob.key-word
      owner String text
      f-new-copy(user glob.key-word.text):(owner text)
      end := glob.key-word.end
      self.parse-new-with-text(user text, user ends):(owner new-exp, copy end)
    else
      self.parse-new(user ends):(owner new-exp, copy end)
  
  func inst parse(owner String text, user String ends):(copy Char end)
    if end = ' ' and ? glob.op-map.find(user text)
      self.operator := text
      read-new-value(user ends):(owner text, copy end)
      
      if end = ' ' and ? glob.op-map.find(user text)
        self.operand := _
        self.parse-new-with-text(user text, user ends):(owner self.next, copy end)
        return
      
    else
      self.operator := _
    
    parse-new-operands(owner text, user ends):(owner self.operand, copy end)
    if end = ' ' and not ends.has(copy ' ')
      self.parse-new(user ends):(owner self.next, copy end)
    else
      self.next := _
  
  func inst analyze()
    if ? self.operand
      self.operand.analyze(user self, user _, user _, user _)
    if ? self.next
      self.next.analyze()
  
  func inst write-all-final(copy Bool is-binary)
    if ? self.operator
      user String op
      if not (? glob.op-map.find(user self.operator):(user op))
        f-syntax-error(user "unknow operator", user self.operator)
      if is-binary
        write(user " ")
      write(user op)
      if is-binary
        write(user " ")
    if ? self.operand
      self.operand.write-all-final()
    if ? self.next
      self.next.write-all-final(copy true)
  
  func inst write-intro()
    if ? self.operand
      self.operand.write-all-intro()
    if ? self.next
      self.next.write-intro()
  
  func inst write-final()
    self.write-all-final(copy false)

func parse-new-exp(user String ends):(owner Mexp exp, copy Char end)
  Mexp.parse-new(user _, user ends):(owner exp, copy end)

func parse-new-exp-with-kw(user String ends):(owner Mexp exp, copy Char end)
  Mexp.parse-new-with-kw(user _, user ends):(owner exp, copy end)


native func m-find-var(user String name):(user Mvar mvar)

class Var-operand(Operand)
  owner String name
  user Mvar mvar
  
  func dynamic parse(owner String text, user String ends):(copy Char end)
    self.name := text
    self.mvar := _
  
  func dynamic analyze(user Mexp exp, user Mtype mtype, user Operand member, user Member-operand method)
    if not (? m-find-var(user self.name):(user self.mvar))
      f-syntax-error(user "unknow variable", user self.name)
    if ? self.next
      self.next.analyze(user exp, user self.mvar.mtype, user self, user _)
  
  func dynamic write-intro()
    # nothing
  
  func dynamic write-final()
    if self.mvar.is-ref
      write(user "(*")
    write-cstyle(user self.name)
    if self.mvar.is-ref
      write(user ")")


class Char-operand(Operand)
  owner String text
  
  func dynamic parse(owner String text, user String ends):(copy Char end)
    var Char ch
    if text.length = 3
      ch := text[1]
      if ch = '\'' or ch = '\\'
        f-syntax-error(user "illegal character constant", user text)
    else-if text.length = 4
      if text[1] != '\\'
        f-syntax-error(user "illegal character constant", user text)
      ch := text[2]
    else
      f-syntax-error(user "illegal character constant", user text)
    if text[text.length - 1] != '\''
      f-syntax-error(user "illegal character constant", user text)
    self.text := text
  
  func dynamic analyze(user Mexp exp, user Mtype mtype, user Operand member, user Member-operand method)
    if ? self.next
      self.next.analyze(user exp, user glob.type-char, user self, user _)
  
  func dynamic write-intro()
    # nothing
  
  func dynamic write-final()
    write(user self.text)


class String-operand(Operand)
  owner String text
  func dynamic parse(owner String text, user String ends):(copy Char end)
    if text[text.length - 1] != '\"'
      f-syntax-error(user "illegal string constant", user text)
    self.text := text
  
  func dynamic analyze(user Mexp exp, user Mtype mtype, user Operand member, user Member-operand method)
    if ? self.next
      self.next.analyze(user exp, user glob.type-string, user self, user _)
  
  func dynamic write-intro()
    # nothing
  
  func dynamic write-final()
    var Int real-length(1)
    for index in 1:self.text.length - 1
      if self.text[index] = '\\'
        index := index + 1
      real-length := real-length + 1
    var String{80} length-str
    write(user "&(String){")
    real-length.str():(var length-str)
    write(user length-str)
    write(user ", ")
    real-length := real-length - 1
    real-length.str():(var length-str)
    write(user length-str)
    write(user ", ")
    write(user self.text)
    write(user "}")


class Int-operand(Operand)
  owner String text
  var Int value
  
  func dynamic parse(owner String text, user String ends):(copy Char end)
    self.value := 0
    for n in text.length
      var Char ch(text[n])
      if ch < '0' or ch > '9'
        f-syntax-error(user "illegal number", user text)
      self.value := self.value * 10 + ch - '0'
    self.text := text
  
  func dynamic analyze(user Mexp exp, user Mtype mtype, user Operand member, user Member-operand method)
    if ? self.next
      self.next.analyze(user exp, user glob.type-int, user self, user _)
  
  func dynamic write-intro()
    # nothing
  
  func dynamic write-final()
    write(user self.text)


class Empty-operand(Operand)
  func dynamic parse(owner String text, user String ends):(copy Char end)
    delete text
  
  func dynamic analyze(user Mexp exp, user Mtype mtype, user Operand member, user Member-operand method)
    if ? self.next
      f-syntax-error(user "no members for", user "empty")
  
  func dynamic write-intro()
    # nothing
  
  func dynamic write-final()
    write(user "NULL")


class Block-operand(Operand)
  owner Mexp exp
  
  func dynamic parse(owner String text, user String ends):(copy Char end)
    parse-new-exp(user ")"):(owner self.exp, copy end)
    if end != ')'
      f-syntax-error(user "missing", user ")")
    read-c():(copy end)
  
  func dynamic analyze(user Mexp exp, user Mtype mtype, user Operand member, user Member-operand method)
    self.exp.analyze()
    if ? self.next
      # todo ...
      # self.next.analyze(user exp, user exp-type, user self, user _)
  
  func dynamic write-intro()
    self.exp.write-intro()
  
  func dynamic write-final()
    write(user "(")
    self.exp.write-final()
    write(user ")")


class Member-operand(Var-operand)
  var Int base-count
  user Mtype mtype
  
  func dynamic parse(owner String text, user String ends):(copy Char end)
    self.base-count := 0
    read-new-value(user ends):(owner self.name, copy end)
  
  func dynamic analyze(user Mexp exp, user Mtype var-mtype, user Operand member, user Member-operand method)
    user Mtype mtype(var-mtype)
    do
      while not (? mtype.members.find(user self.name):(user self.mvar))
      mtype := mtype.base-mtype
      if not (? mtype)
        f-syntax-error2(user "type", user var-mtype.name, user "has no member", user self.name)
        self.base-count := self.base-count + 1
    self.mtype := var-mtype
    if ? self.next
      if ? self.mvar.func-dec
        self.next.analyze(user exp, user self.mvar.mtype, user member, user self)
      else
        self.next.analyze(user exp, user self.mvar.mtype, user self, user _)
  
  func dynamic write-intro()
    # nothing
  
  func dynamic write-final()
    if ? self.mvar.func-dec
      user Mtype mtype(self.mtype)
      for n in self.base-count
        mtype := mtype.base-mtype
      write(user mtype.name)
      write(user "_")
    else
      write(user "->")
      for n in self.base-count
        write(user "_base.")
    base.write-final()


class Slice-operand(Operand)
  owner Mexp index
  owner Mexp second-index
  
  func dynamic parse(owner String text, user String ends):(copy Char end)
    parse-new-exp(user ":]"):(owner self.index, copy end)
    if end = ':'
      parse-new-exp(user ":]"):(owner self.second-index, copy end)
    else
      self.second-index := _
    if end != ']'
      f-syntax-error(user "missing", user "]")
    read-c():(copy end)
  
  func dynamic analyze(user Mexp exp, user Mtype mtype, user Operand member, user Member-operand method)
    if mtype != glob.type-array and mtype != glob.type-string
      f-syntax-error(user "non-sliceable type", user mtype.name)
    self.index.analyze()
    if ? self.second-index
      self.second-index.analyze()
    if ? self.next
      # todo ...
      # self.next.analyze(user exp, user array-type, user self, user _)
  
  func dynamic write-intro()
    self.index.write-intro()
    if ? self.second-index
      self.second-index.write-intro()
  
  func dynamic write-final()
    write(user "[")
    self.index.write-final()
    if ? self.second-index
      write(user ":")
      self.second-index.write-final()
    write(user "]")


class St-exp(St)
  owner Mexp exp
  
  func dynamic parse()
    parse-new-exp-with-kw(user ""):(owner self.exp)
  
  func dynamic analyze-first()
    # do nothing
  
  func dynamic analyze()
    self.exp.analyze()
  
  func dynamic write()
    self.exp.write-intro()
    self.exp.write-final()
    write(user ";")

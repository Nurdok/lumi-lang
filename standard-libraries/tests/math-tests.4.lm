~~~ Tests for math functions ~~~
module math-test

test abs-test()
  assert math.abs(copy 234) = 234
  assert math.abs(copy 0) = 0
  assert math.abs(copy -1) = 1
  assert math.abs(copy -573) = 573


test copysign-test()
  assert math.copysign(copy 234, copy 480) = 234
  assert math.copysign(copy 234, copy - 34) = -234
  assert math.copysign(copy -234, copy 657) = 234
  assert math.copysign(copy -234, copy - 6) = -234
  assert math.copysign(copy 0, copy 12) = 0
  assert math.copysign(copy 0, copy -34) = 0
  assert math.copysign(copy 234, copy 0) = 234
  assert math.copysign(copy -234, copy 0) = -234
  assert math.copysign(copy 0, copy 0) = 0


test power-test()
  assert math.power(copy 2, copy 6) = 64
  assert math.power(copy -2, copy 6) = 64
  assert math.power(copy -2, copy 5) = -32
  assert math.power(copy 5, copy 3) = 125
  assert math.power(copy 5, copy 0) = 1
  assert math.power(copy -5, copy 0) = 1
  assert math.power(copy 0, copy 0) = 1
  assert math.power(copy 0, copy 1) = 0
  assert math.power(copy 0, copy 3) = 0
  assert-error math.power(copy 3, copy - 2), "negative power exponent"


test factorial-test()
  assert math.factorial(copy 0) = 1
  assert math.factorial(copy 1) = 1
  assert math.factorial(copy 2) = 2
  assert math.factorial(copy 3) = 6
  assert math.factorial(copy 4) = 24
  assert math.factorial(copy 6) = 720
  assert-error math.factorial(copy -4), "negative factorial"


test sum-test()
  var Array{4:math.IntBox} array
  var MockIntIterator iter(user array)
  array[0].new(copy 3)
  array[1].new(copy 0)
  array[2].new(copy -1)
  array[3].new(copy 34)
  assert math.sum(user iter) = 36
  iter.new(user array)
  iter.next()
  iter.next()
  assert math.sum(user iter) = 33
  assert math.sum(user iter) = 0

class MockIntIterator(ds.Iterator{math.IntBox})
  user Array{math.IntBox} array
  var Int index

  func inst new(user Array{math.IntBox} array)
    self.array := array
    self.index := 0

  func dynamic has()->(var Bool has-another-item)
    has-another-item := self.index < self.array.length

  func dynamic get()->(user math.IntBox item)
    if self.index >= self.array.length
      raise
    item := self.array[self.index]

  func dynamic next()
    if self.index < self.array.length
      self.index += 1

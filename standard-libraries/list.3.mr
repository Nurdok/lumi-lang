## Generic lists

## Generic single link list
static List{Generic}
  owner ListNode{Generic} first
  user ListNode{Generic} last
  
  ## Add item to list end
  func inst append(owner Generic item)
    new ListNode{Generic} node
    node.item := item
    if ? self.last
      self.last.next := node
    else
      self.first := node
    self.last := node
  
  ## Add item to list start
  func inst prepend(owner Generic item)
    new ListNode{Generic} node
    node.item := item
    node.next := self.first
    self.first := node
    if not (? self.last)
      self.last := node
  
  func inst is-empty():(copy Bool empty)
    empty := not (? self.first)
  
  ## Get and remove first item, fail if list is empty
  func inst pop():(owner Generic item)
    if not (? self.first)
      raise
    owner ListNode{Generic} first(self.first)
    item := first.item
    self.first := first.next
    delete first
    if not (? self.first)
      self.last := _
  
  func inst get-iterator(user ListIterator{Generic} iter)
    iter.curr := self.first


## Iterate over the list
class ListIterator{Generic}(Iterator)
  user ListNode{Generic} curr
  
  ## Return whether iteration has ended
  func dynamic is-end():(copy Bool ended)
    ended := not (? self.curr)
  
  ## Get current item, fail if not exists
  func dynamic get-item():(user Generic item)
    if not (? self.curr)
      raise
    item := self.curr.item
  
  ## Move to next item
  func dynamic next()
    if ? self.curr
      self.curr := self.curr.next


## Single node in the list
static ListNode{Generic}
  owner ListNode{Generic} next
  owner Generic item

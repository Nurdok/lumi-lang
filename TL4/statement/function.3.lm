## TL4 compiler - Syntax tree function

## Function node in the syntax tree
class SyntaxTreeFunction(SyntaxTreeBlock)
  owner List{TypeCount} aux-variables
  user TypeData parent-type
  owner String name
  user ModuleMembers my-module
  owner FunctionArguments arguments
  user SyntaxTreeMockFunction mocker-function
  user SyntaxTreeFunction dynamic-base-method
  var Int dynamic-base-count
  var Bool is-dynamic
  var Bool has-user-assign
  
  func inst parse-new(user TypeData parent-type):(
      copy Char end, owner SyntaxTreeFunction new-node)
    new SyntaxTreeFunction in new-node
    new-node.parse(user parent-type):(copy end)
  
  func inst parse(user TypeData parent-type):(copy Char end)
    self.init()
    self.parent-type := parent-type
    if ? self.parent-type
      self.indentation-spaces := 4
      if self.parent-type.is-dynamic
        user String meth-type
        read-until(user " ", copy false):(user meth-type, copy end)
        if meth-type.equal(user "dynamic")
          self.is-dynamic := true
        else-if not meth-type.equal(user "inst")
          self.m-syntax-error(
              user "expected \"dynamic\" or \"inst\" method type, got",
              user meth-type)
    else
      self.my-module := glob.current-module
    self.parse-header(copy false):(copy end)
    self.parse-body():(copy end)
  
  func inst init()
    self.set-location()
    new List{TypeCount} in self.aux-variables
  
  func inst parse-body():(copy Char end)
    self.indentation-spaces += 4
    self.parse-block():(copy end)
    self.indentation-spaces := 4
  
  func inst parse-header(copy Bool is-native):(copy Char end)
    read-new(user "("):(owner self.name, copy end)
    self.f-register-name()
    if end != '('
      self.m-syntax-error-c(
          user "expected \"(\" after function name, got", copy end)
    self.parse-arguments(copy is-native):(copy end)
  
  func inst parse-arguments(copy Bool is-native):(copy Char end)
    new FunctionArguments in self.arguments
    var DeclarationArgumentFactory argument-factory
    var SyntaxTreeCode dummy-node
    dummy-node.set-location()
    dummy-node.parent := self
    self.arguments.parse(
        user argument-factory,
        copy is-native,
        user dummy-node,
        copy self.indentation-spaces):(
        copy end)
    if ? self.parent-type
      self.arguments.add-self-parameter(user self.parent-type)
  
  func dynamic f-register-name()
    if not f-is-legal-name(user self.name, copy NAME-DEFAULT)
      self.m-syntax-error(user "illegal function name", user self.name)
    if ? self.parent-type
      user SyntaxTreeFunction meth
      self.parent-type.find-meth(user self.name):(user meth)
      if ? meth
        self.m-syntax-error(user "redefinition of method", user self.name)
      user SyntaxTreeVariable field
      self.parent-type.find-field(user self.name):(user field)
      if ? field
        self.m-syntax-error(
            user "method name overrides field", user self.name)
    else
      if ? glob.module-map.find(user self.name)
        self.m-syntax-error(
            user "function name overrides module", user self.name)
      if ? glob.find-function(user self.name)
        self.m-syntax-error(user "redefinition of function", user self.name)
      if ? glob.find-variable(user self.name)
        self.m-syntax-error(
            user "function name overrides global variable", user self.name)
      if ? self.my-module
        self.my-module.function-map.add(user self.name, user self)
  
  func dynamic get-function():(user SyntaxTreeFunction function)
    function := self
  
  func dynamic get-parent-type():(user TypeData parent-type)
    parent-type := self.parent-type
  
  func inst add-aux-variable(
      copy Int access, copy Bool is-create, user TypeInstance type-instance):(
      user SyntaxTreeVariable new-variable)
    var Int index(0)
    user ListNode{TypeCount} node(self.aux-variables.first)
    do
      while ? node
      while node.item.type-data != type-instance.type-data
      node := node.next
    if ? node
      node.item.count += 1
      index := node.item.count
    else
      new TypeCount type-count
      type-count.type-data := type-instance.type-data
      self.aux-variables.add(owner type-count)
    new SyntaxTreeVariable variable
    new String{type-instance.type-data.name.length +
        21} in variable.name
    variable.name.copy(user "aux_")
    variable.name.concat(user type-instance.type-data.name)
    variable.name.append(copy '_')
    var String{16} index-str
    index.str(user index-str)
    variable.name.concat(user index-str)
    variable.parent := self
    variable.access := access
    variable.is-create := is-create
    type-instance.copy-new():(owner variable.type-instance)
    new-variable := variable
    self.variables.add(owner variable)
  
  func dynamic find-variable(user String name, user String module-name):(
      user SyntaxTreeVariable variable)
    if ? base.find-variable(user name, user module-name):(user variable)
      return
    if not (? module-name)
      self.arguments.find-variable(user name):(user variable)
  
  func dynamic link-types()
    if ? self.my-module
      glob.current-module := self.my-module
    self.arguments.link-types()
    base.link-types()
    if ? self.my-module
      glob.current-module := _
  
  func dynamic analyze()
    if ? self.my-module
      glob.current-module := self.my-module
    self.arguments.analyze()
    base.analyze()
    if ? self.my-module
      glob.current-module := _
  
  func inst m-compare(user SyntaxTreeFunction other)
    if self.is-dynamic != other.is-dynamic
      self.m-syntax-error(user "illegal dynamic in function", user self.name)
  
  ## write function body
  func dynamic write()
    # #define LUMI_FILE_NAME "`file-name`"
    # #define LUMI_FUNC_NAME "`parent-type`.`function-name`"
    # Returncode `Type`_`name`(`args`) {
    #   `block...`
    # }
    # #undef LUMI_FILE_NAME
    # #undef LUMI_FUNC_NAME
    write-pre-func(user self)
    self.write-header()
    self.write-block()
    write-post-func()
  
  func inst write-header()
    write(user "\nReturncode ")
    self.write-cname()
    self.arguments.write()
  
  func inst write-block()
    # `previous-text` {
    #   Returncode LUMI_err = OK;
    #   `block...`
    # LUMI_cleanup:
    #   return LUMI_err;
    # }
    self.write-block-start()
    write(user "    Returncode LUMI_err = OK;\n")
    base.write()
    self.write-setup()
    self.write-block-body()
    write(user "LUMI_cleanup:\n")
    self.write-cleanup()
    write(user "    return LUMI_err;\n")
    self.write-block-end()
  
  func inst write-setup()
    if self.has-user-assign
      write(user "    Ref_Manager* aux_Ref_Manager = NULL;\n")
    user ListNode{Argument} node(self.arguments.parameters.first)
    do
      while ? node
      if node.item.access = ACCESS-USER
        write(user "    LUMI_inc_ref(")
        write-cname(user node.item.get-variable().name)
        write(user "_Refman);\n")
      node := node.next
  
  func inst write-cleanup()
    base.write-cleanup(user _)
    user ListNode{Argument} param-node(self.arguments.parameters.last)
    do
      while ? param-node
      if param-node.item.access = ACCESS-USER or
          param-node.item.access = ACCESS-OWNER
        self.write-variable-cleanup(
            user param-node.item.get-variable(), user _)
      param-node := param-node.prev
  
  func inst write-cname()
    if ? self.parent-type
      self.parent-type.write-cname()
      write(user "_")
    else-if ? self.my-module
      self.my-module.write-prefix()
    write-cname(user self.name)
  
  func inst write-pointer()
    self.arguments.write-pointer(user self.name)
  
  func dynamic write-declaration()
    # Returncode `Type`_`name`(`args`);
    self.write-header()
    write(user ";\n")


## Count occurrences of a specific type
static TypeCount
  user TypeData type-data
  var Int count


## Constructor declaration in the syntax tree
class SyntaxTreeConstructor(SyntaxTreeFunction)
  func inst parse-new(user TypeData parent-type):(
      copy Char end, owner SyntaxTreeConstructor new-node)
    new SyntaxTreeConstructor in new-node
    new-node.parse(user parent-type):(copy end)
  
  func inst parse(user TypeData parent-type):(copy Char end)
    self.init()
    self.parent-type := parent-type
    self.indentation-spaces := 4
    string-new-copy(user "new"):(owner self.name)
    self.parse-arguments(copy false):(copy end)
    self.parse-body():(copy end)
  
  func dynamic analyze()
    if ? self.arguments.outputs.first
      self.m-syntax-error-msg(user "constructor with outputs")
    base.analyze()


## Function declaration argument
class DeclarationArgument(Argument)
  owner SyntaxTreeVariable variable
  
  func dynamic copy-new():(owner DeclarationArgument new-argument)
    new DeclarationArgument in new-argument
    new-argument.input-file-name := self.input-file-name
    new-argument.line-number := self.line-number
    new-argument.access := self.access
    new-argument.is-output := self.is-output
    new-argument.is-native := self.is-native
    new SyntaxTreeVariable in new-argument.variable
    new-argument.variable.access := self.variable.access
    new-argument.variable.parent-type := self.variable.parent-type
    self.variable.type-instance.copy-new():(
        owner new-argument.variable.type-instance)
    string-new-copy(user self.variable.name):(owner new-argument.variable.name)
  
  func dynamic parse-value(
      user SyntaxTreeCode code-node, copy Int indentation-spaces):(
      copy Char end)
    new SyntaxTreeVariable in self.variable
    self.variable.access := self.access
    self.variable.is-output := self.is-output
    if ? code-node
      code-node.get-parent-type():(user self.variable.parent-type)
    new TypeInstance in self.variable.type-instance
    self.variable.type-instance.parse(
        user " ", user self, user _, copy indentation-spaces):(copy end)
    if end != ' '
      self.m-syntax-error-c(user "expected space after type, got", copy end)
    read-new(user ",)"):(owner self.variable.name, copy end)
  
  func dynamic get-parent-type():(user TypeData parent-type)
    parent-type := self.variable.parent-type
  
  func dynamic link-types()
    self.variable.type-instance.link-types(user self)
  
  func dynamic analyze()
    if self.variable.type-instance.type-data.is-primitive
      if self.is-output and self.access != ACCESS-VAR
        self.m-syntax-error2(
            user "output",
            user self.variable.name,
            user "access should be \"var\" for primitive types, got",
            user glob.access-names[self.access])
      else-if not self.is-output and self.access != ACCESS-COPY
        self.m-syntax-error2(
            user "parameter",
            user self.variable.name,
            user "access should be \"copy\" for primitive types, got",
            user glob.access-names[self.access])
    else-if self.access = ACCESS-COPY
      self.m-syntax-error2(
          user "argument",
          user self.variable.name,
          user "access should not be \"copy\" for non-primitive type",
          user self.variable.type-instance.type-data.name)
    self.variable.type-instance.analyze-lengths(user self, copy false)
    if self.is-native
      if self.access = ACCESS-OWNER
        self.m-syntax-error-msg(user "owner argument to native function")
      if self.is-output and self.access = ACCESS-USER
        self.m-syntax-error-msg(user "user output to native function")
      
  
  func dynamic get-type-instance():(user TypeInstance type-instance)
    type-instance := self.variable.type-instance
  
  func dynamic get-variable():(user SyntaxTreeVariable variable)
    variable := self.variable
  
  func dynamic write()
    if self.variable.type-instance.type-data = glob.type-func
      write(user "Returncode (*")
      if self.is-output
        write(user "*")
      write-cname(user self.variable.name)
      write(user ")")
      self.variable.type-instance.arguments.write()
      return
    # `type`[*][*] `name`
    # [, Ref_Manager*[*] `name`_Refman]
    # [, `type`_Dynamic*[*] `name`_Dynamic]
    self.variable.type-instance.type-data.write-cname()
    if not self.variable.type-instance.type-data.is-primitive
      write(user "*")
    if self.is-output
      write(user "*")
    write(user " ")
    write-cname(user self.variable.name)
    
    if not self.variable.type-instance.type-data.is-primitive and
        not self.is-native
      write(user ", Ref_Manager*")
      if self.is-output
        write(user "*")
      write(user " ")
      write-cname(user self.variable.name)
      write(user "_Refman")
    
    if self.variable.type-instance.type-data.is-dynamic and not self.is-native
      write(user ", ")
      self.variable.type-instance.type-data.write-cname()
      write(user "_Dynamic*")
      if self.is-output
        write(user "*")
      write(user " ")
      write-cname(user self.variable.name)
      write(user "_Dynamic")


class DeclarationArgumentFactory(ArgumentFactory)
  func dynamic m-new-argument():(owner Argument new-argument)
    new DeclarationArgument in new-argument


# to be mocked in unit-tests
func write-pre-func(user SyntaxTreeFunction self)
  write(user "\n#define LUMI_FILE_NAME ")
  write-string-literal(user self.input-file-name)
  write(user "\n#define LUMI_FUNC_NAME \"")
  if ? self.parent-type
    write(user self.parent-type.name)
    write(user ".")
  write(user self.name)
  write(user "\"")

# to be mocked in unit-tests
func write-post-func()
    write(user "#undef LUMI_FILE_NAME\n")
    write(user "#undef LUMI_FUNC_NAME\n")

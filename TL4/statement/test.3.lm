## TL4 compiler - Syntax tree testing nodes

## Assert statement in the syntax tree
class SyntaxTreeAssert(SyntaxTreeCode)
  owner Expression tested
  
  func inst parse-new(user SyntaxTreeBlock parent):(
      copy Char end, owner SyntaxTreeAssert new-node)
    new SyntaxTreeAssert in new-node
    new-node.parse(user parent):(copy end)
  
  func inst parse(user SyntaxTreeBlock parent):(copy Char end)
    self.parent := parent
    self.set-location()
    parse-new-expression(user "", user self):(owner self.tested, copy end)
  
  func dynamic analyze()
    self.analyze-expression(user self.tested, user glob.type-bool)
  
  func dynamic write()
    # TEST_ASSERT(`line`, `tested`)
    self.write-spaces()
    self.tested.write-preactions()
    write(user "TEST_ASSERT(")
    self.write-line-num()
    write(user ", ")
    self.tested.write()
    write(user ")\n")

## Assert-error statement in the syntax tree
class SyntaxTreeAssertError(SyntaxTreeCode)
  owner Expression tested
  owner String expected-error
  
  func inst parse-new(user SyntaxTreeBlock parent):(
      copy Char end, owner SyntaxTreeAssertError new-node)
    new SyntaxTreeAssertError in new-node
    new-node.parse(user parent):(copy end)
  
  func inst parse(user SyntaxTreeBlock parent):(copy Char end)
    self.parent := parent
    self.set-location()
    parse-new-expression(user ",", user self):(owner self.tested, copy end)
    if end = ','
      read-c():(copy end)
      if end = '\n'
        self.read-line-break-spaces()
      else-if end != ' '
        self.m-syntax-error-c(user "expected space after \",\", got", copy end)
      read-new(user ""):(owner self.expected-error, copy end)
      self.check-string(user self.expected-error)
  
  func dynamic analyze()
    self.tested.analyze()
  
  func dynamic write()
    if ? self.expected-error
      self.write-spaces()
      write(user "{char* LUMI_expected_error_prev;\n")
      self.write-spaces()
      write(user "int LUMI_expected_error_trace_ignore_count_prev;\n")
      self.write-spaces()
      write(user "LUMI_expected_error_prev = LUMI_expected_error;\n")
      self.write-spaces()
      write(user "LUMI_expected_error_trace_ignore_count_prev =")
      write(user " LUMI_expected_error_trace_ignore_count;\n")
      self.write-spaces()
      write(user "LUMI_expected_error = ")
      write(user self.expected-error)
      write(user ";\n")
      self.write-spaces()
      write(user "LUMI_expected_error_trace_ignore_count =")
      write(user " LUMI_trace_ignore_count + 1;\n")
    self.write-spaces()
    write(user "do {\n")
    self.parent.indentation-spaces += 2
    self.write-spaces()
    write(user "++LUMI_trace_ignore_count;\n")
    write(user "#undef RETURN_ERROR\n")
    write(user "#define RETURN_ERROR break\n")
    self.write-spaces()
    self.tested.write-preactions()
    write(user "\n#undef RETURN_ERROR\n")
    write(user "#define RETURN_ERROR goto LUMI_cleanup\n")
    self.write-spaces()
    write(user "--LUMI_trace_ignore_count;\n")
    if ? self.expected-error
      self.write-spaces()
      write(user "LUMI_expected_error_trace_ignore_count =")
      write(user " LUMI_expected_error_trace_ignore_count_prev;\n")
      self.write-spaces()
      write(user "LUMI_expected_error = LUMI_expected_error_prev;\n")
    self.write-spaces()
    write(user "TEST_FAIL(")
    self.write-line-num()
    write(user ", 16, \"error not raised\")\n")
    self.parent.indentation-spaces -= 2
    self.write-spaces()
    write(user "} while (false);\n")
    self.write-spaces()
    write(user "--LUMI_trace_ignore_count;\n")
    if ? self.expected-error
      self.write-spaces()
      write(user "LUMI_expected_error_trace_ignore_count =")
      write(user " LUMI_expected_error_trace_ignore_count_prev;\n")
      self.write-spaces()
      write(user "if (LUMI_expected_error == NULL) {\n")
      self.write-spaces()
      write(user "  LUMI_expected_error = LUMI_expected_error_prev;\n")
      self.write-spaces()
      write(user "  TEST_FAIL_NULL(")
      self.write-line-num()
      write(user ")\n")
      self.write-spaces()
      write(user "}\n")
      self.write-spaces()
      write(user "LUMI_expected_error = LUMI_expected_error_prev;}\n")
    self.write-spaces()
    write(user "LUMI_err = OK;\n")


## Test function in the syntax tree
class SyntaxTreeTestFunction(SyntaxTreeFunction)
  func inst parse-new():(copy Char end, owner SyntaxTreeTestFunction new-node)
    new SyntaxTreeTestFunction in new-node
    new-node.parse():(copy end)
  
  func inst parse():(copy Char end)
    base.parse(user _):(copy end)
    if (? self.arguments.parameters.first) or (? self.arguments.outputs.first)
      self.m-syntax-error-msg(user "test function cannot have arguments")
    glob.test-functions.add(user self.name, user self)


## Mock function in the syntax tree
class SyntaxTreeMockFunction(SyntaxTreeFunction)
  owner String mocked-name
  owner String type-name
  owner String module-name
  user SyntaxTreeFunction mocked-function
  
  func inst parse-new():(copy Char end, owner SyntaxTreeMockFunction new-node)
    new SyntaxTreeMockFunction in new-node
    new-node.parse():(copy end)
  
  func inst parse():(copy Char end)
    base.parse(user _):(copy end)
    self.mocker-function := self
    var Int index
    self.name.find(user "."):(copy index)
    if index < self.name.length
      user String first(self.name[0:index])
      user String last(self.name[index + 1:self.name.length - index - 1])
      last.find(user "."):(copy index)
      if index < last.length
        string-new-copy(user first):(owner self.module-name)
        first := last[0:index]
        last := last[index + 1:last.length - index - 1]
        string-new-copy(user first):(owner self.type-name)
      else
        var Char ch(first[0])
        if ch >= 'a' and ch <= 'z'
          string-new-copy(user first):(owner self.module-name)
        else
          string-new-copy(user first):(owner self.type-name)
      string-new-copy(user last):(owner self.mocked-name)
      delete self.name
    else
      self.mocked-name := self.name
    if ? self.type-name and self.mocked-name.equal(user "delete")
      string-new-copy(user "MockDel"):(owner self.name)
    else
      string-new-concat(user self.mocked-name, user " Mock"):(owner self.name)
  
  func dynamic f-register-name()
    # do not register
  
  func dynamic link-types()
    glob.current-module := self.my-module
    if ? self.type-name
      self.find-type(user self.type-name, user self.module-name):(
          user self.parent-type)
      if self.mocked-name.equal(user "delete")
        if self.parent-type.is-delete-mocked
          self.m-syntax-error(
              user "already mocking delete of type", user self.type-name)
        self.parent-type.is-delete-mocked := true
        self.arguments.add-self-parameter(user glob.type-ref)
      else
        self.parent-type.find-meth(user self.mocked-name):(
            user self.mocked-function)
        if not (? self.mocked-function)
          self.m-syntax-error2(
              user "mocking unknown method",
              user self.mocked-name,
              user "of type",
              user self.type-name)
        self.arguments.add-self-parameter(user self.parent-type)
    else-if self.mocked-name.equal(user "new")
      if glob.is-new-mocked
        self.m-syntax-error-msg(user "already mocking global new")
      glob.is-new-mocked := true
    else-if self.mocked-name.equal(user "delete")
      if glob.is-delete-mocked
        self.m-syntax-error-msg(user "already mocking global delete")
      if ? self.arguments.parameters.first or ? self.arguments.outputs.first
        self.m-syntax-error-msg(user "mock delete should have no arguments")
      glob.is-delete-mocked := true
      self.arguments.add-self-parameter(user glob.type-ref)
    else
      self.find-function(user self.mocked-name, user self.module-name):(
          user self.mocked-function)
      if not (? self.mocked-function)
        self.m-syntax-error(
            user "mocking unknown function", user self.mocked-name)
    if ? self.mocked-function
      if ? self.mocked-function.mocker-function
        self.m-syntax-error(
            user "already mocking function", user self.mocked-name)
      self.mocked-function.mocker-function := self
    base.link-types()
  
  func dynamic analyze()
    glob.current-module := self.my-module
    if not (? self.type-name) and self.mocked-name.equal(user "new")
      if ? self.arguments.parameters.first or
          not (? self.arguments.outputs.first) or
          ? self.arguments.outputs.first.next
        self.m-syntax-error-msg(
            user "mock new should have only single Bool output")
      if self.arguments.outputs.first.item.get-type-instance().type-data !=
          glob.type-bool
        self.m-syntax-error-msg(
            user "mock new should have only single Bool output")
      self.my-module := _
    else-if self.mocked-name.equal(user "delete")
      self.my-module := _
    if ? self.mocked-function
      self.arguments.check-same-as(
          user self.mocked-function.arguments, user _, copy 0)
      self.my-module := self.mocked-function.my-module
    base.analyze()
  
  func dynamic write-declaration()
    base.write-declaration()
    if ? self.mocked-function
      # Bool `name`_active = true;
      write(user "\nBool ")
      self.write-cname()
      write(user "_active = true;")
  
  func dynamic write-block-body()
    if ? self.mocked-function
      # if (!`name`_active) return `name`(`arguments`);
      write(user "  if (!")
      self.write-cname()
      write(user "_active) return ")
      self.mocked-function.write-cname()
      write(user "(")
      var Bool first(true)
      self.write-arg-list(user self.arguments.parameters):(copy first)
      self.write-arg-list(user self.arguments.outputs):(copy first)
      write(user ");\n")
    base.write-block-body()
  
  func inst write-arg-list(user List{Argument} list):(
      copy Bool first)
    user ListNode{Argument} node(list.first)
    do
      while ? node
      if not first
        write(user ", ")
      user SyntaxTreeVariable variable
      node.item.get-variable():(user variable)
      write-cname(user variable.name)
      if not variable.type-instance.type-data.is-primitive
        write(user ", ")
        write-cname(user variable.name)
        write(user "_Refman")
      if variable.type-instance.type-data.is-dynamic
        write(user ", ")
        write-cname(user variable.name)
        write(user "_Dynamic")
      first := false
      node := node.next

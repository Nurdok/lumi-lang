~~~ TL4 compiler integration test file #1

This file should only work together with test file #2.
~~~
module integration


class TopType(covered.MiddleType)
  var Int num-top
  user BaseType top-base-ref
  user covered.MiddleType top-mid-ref
  
  new()
    base()
    self.num-top := 3
  
  
  func dynamic meth2()
    sys.println(user "TopType.meth2")
    base()
    covered.MiddleType.meth2(user self)
    BaseType.meth2(user self)
  
  func dynamic meth3(copy Int n, user String s)
    sys.println(user "TopType.meth3")
    base.meth3(copy n, user s)
  
  func dynamic meth5(copy Int n, user String s)
    sys.println(user "TopType.meth5")
    base(copy n, user s)
    covered.MiddleType.meth1(user _, copy n, user s)
    BaseType.meth1(user _, copy n, user s)
  
  func dynamic meth6()
    sys.println(user "TopType.meth6")
    self.num-mid := self.num-base
    self.top-base-ref := self.top-mid-ref
    self.top-base-ref := self
    user covered.MiddleType mt(user self)
    user BaseType bt(user mt)
    test-mid-out()->(user bt)


class BaseType
  var Int num-base
  user covered.MiddleType base-mid-ref
  user TopType base-top-ref
  
  new()
    self.num-base := 1
  
  func dynamic meth0()
    sys.println(user "BaseType.meth0")
  
  func dynamic meth1(copy Int n, user String s)
    sys.println(user "BaseType.meth1")
  
  func dynamic meth2()
    sys.println(user "BaseType.meth2")
  
  func dynamic meth3(copy Int n, user String s)
    sys.println(user "BaseType.meth3")


func test-mid-out()->(user covered.MiddleType mt)
  new covered.MiddleType new-mt
  mt := new-mt


mock TestStruct.get()->(var Int x, user String s)
  x := 12
  s := ""

mock f-test-int2str(copy Int x)->(owner String s)
  raise

mock TestClass.dynamic-meth()
  self.num := 7

test test-func()
  owner String s
  assert-error f-test-int2str(copy 3)->(owner s)
  f-test-int2str.mocked(copy 4)->(owner s)
  f-test-int2str.active := false
  f-test-int2str(copy 5)->(owner s)
  f-test-int2str.active := true
  assert-error f-test-int2str(copy 6)->(owner s)
  
  var TestStruct t(copy 0, user _)
  var Int x
  t.get()->(var x)
  assert x = 12
  t.get.mocked()->(var x)
  assert x = 0
  t.get.active := false
  x := 1
  t.get()->(var x)
  assert x = 0
  TestStruct.get.active := true
  t.get()->(var x)
  assert x = 12
  
  var TestClass c
  assert c.num = 1
  c.dynamic-meth()
  assert c.num = 7
  TestClass.dynamic-meth.mocked(user c)
  assert c.num = 6
  TestClass.dynamic-meth.active := false
  c.num := 0
  c.dynamic-meth()
  assert c.num = 6
  TestClass.dynamic-meth.active := true
  TestClass.dynamic-meth(user c)
  assert c.num = 7


test test-another()
  var Int x
  assert x = 0


native var Int external-int
native type Native
native func external(copy Int i, user String s)->(var Int io, var Native n)
native func external2(copy Native n)->(var Bool b)


test test-native()
  assert external-int = 6
  var Int i
  var Native n
  var String{4} s(user "bb")
  assert-error external(copy 3, user s)->(var i, var n)
  assert i = 3
  assert s[0] = 'a'
  assert external2(copy n)


test test-dynamic-type-parameters()
  var Data{covered.MiddleType} dmid
  var TopType ttop
  ttop.num-base := 12
  dmid.item := ttop
  user BaseType tbase
  tbase := dmid.item
  assert tbase.num-base = 12
  ttop.num-base := 13
  dmid.set(user ttop, user _)
  tbase := _
  dmid.get()->(user tbase)
  assert tbase.num-base = 13


struct Link
  owner Link next

class BaseLink
  owner BaseLink next
  user Link link
  
  func dynamic m-meth()
    ; do nothing

class TopLink{Generic}(BaseLink)
  owner Generic item

struct RefNode
  owner RefNode next
  var Ref ref
  
  func new(copy Ref ref, owner RefNode next)
    self.ref := ref
    self.next := next

var Bool record-delete
owner RefNode deleted-links
owner RefNode deleted-base-links
owner RefNode deleted-top-links
owner RefNode deleted-refmans(owner _)

mock delete()
  if record-delete
    deleted-refmans := RefNode(copy self, owner deleted-refmans)

mock Link.delete()
  if record-delete
    deleted-links := RefNode(copy self, owner deleted-links)

mock BaseLink.delete()
  if record-delete
    deleted-base-links := RefNode(copy self, owner deleted-base-links)

mock TopLink.delete()
  if record-delete
    deleted-top-links := RefNode(copy self, owner deleted-top-links)

func f-remove-obj(owner Link b)
  ; remove b

test test-simple-delete()
  assert not deleted-refmans?
  assert not deleted-links?
  record-delete := true
  
  new Link l
  user Link l-user(user l)
  assert l?
  assert l-user?
  var Ref l-ref(copy l)
  f-remove-obj(owner l)
  assert not l?
  assert not l-user?
  assert not deleted-refmans?
  assert deleted-links?
  assert deleted-links.ref is l-ref
  assert not deleted-links.next?
  l-user := _
  assert deleted-refmans?
  assert deleted-refmans.ref is l-ref
  assert not deleted-refmans.next?
  
  record-delete := false
  deleted-refmans := _
  deleted-links := _

func f-has-ref(copy Ref ref)->(owner RefNode node)
  f-has-ref-rec(copy ref)->(owner node)
  f-has-ref-rec(copy ref)->(owner deleted-refmans)

func f-has-ref-rec(copy Ref ref)->(owner RefNode node)
  assert node?
  if node.ref is ref
    owner RefNode next(owner node.next)
    node := next
  else
    f-has-ref-rec(copy ref)->(owner node.next)

test test-complex-delete()
  assert not deleted-refmans?
  assert not deleted-links?
  assert not deleted-base-links?
  assert not deleted-top-links?
  record-delete := true
  
  new BaseLink b1
  var Ref b1-ref(copy b1)
  new BaseLink b2
  var Ref b2-ref(copy b2)
  new TopLink{Link} t1
  var Ref t1-ref(copy t1)
  new TopLink{BaseLink} t2
  var Ref t2-ref(copy t2)
  new TopLink{BaseLink} t3
  var Ref t3-ref(copy t3)
  new Link l1
  var Ref l1-ref(copy l1)
  new Link l2
  var Ref l2-ref(copy l2)
  new Link l3
  var Ref l3-ref(copy l3)
  
  b1.link := l1
  b2.link := l2
  t1.link := l1
  t2.link := l2
  t3.link := l3
  
  l2.next := l3
  assert not l3?
  l1.next := l2
  assert not l2?
  t3.item := b2
  assert not b2?
  t2.item := t3
  assert not t3?
  t1.next := t2
  assert not t2?
  t1.item := l1
  assert not l1?
  b1.next := t1
  assert not t1?
  
  assert not deleted-refmans?
  assert not deleted-links?
  assert not deleted-base-links?
  assert not deleted-top-links?
  b1 := _
  assert not b1?
  
  record-delete := false
  f-has-ref(copy b1-ref)->(owner deleted-base-links)
  f-has-ref(copy t1-ref)->(owner deleted-top-links)
  f-has-ref-rec(copy t1-ref)->(owner deleted-base-links)
  f-has-ref(copy t2-ref)->(owner deleted-top-links)
  f-has-ref-rec(copy t2-ref)->(owner deleted-base-links)
  f-has-ref(copy t3-ref)->(owner deleted-top-links)
  f-has-ref-rec(copy t3-ref)->(owner deleted-base-links)
  f-has-ref(copy b2-ref)->(owner deleted-base-links)
  f-has-ref(copy l1-ref)->(owner deleted-links)
  f-has-ref(copy l2-ref)->(owner deleted-links)
  f-has-ref(copy l3-ref)->(owner deleted-links)
  
  assert not deleted-refmans?
  assert not deleted-links?
  assert not deleted-base-links?
  assert not deleted-top-links?


func f-raise-message()
  raise "tested message"

func f-ignore-and-raise()
  try
    f-raise-message()
  raise "ignore and raise"

func f-failed-assert()
  assert 1 = 2

func f-good-assert-error()
  assert-error f-raise-message()
  raise "good assert error"

func f-failed-assert-error()
  assert-error f-test-void()

func f-wrong-message-assert-error()
  assert-error f-raise-message(), "wrong message"

var Int new-fail-countdown

mock new()->(var Bool alloc-success)
  alloc-success := true
  if new-fail-countdown > 0
    new-fail-countdown -= 1
    if new-fail-countdown = 0
      alloc-success := false

func f-alloc()
  new String{16} string
  assert string?

test test-assert-error-message()
  assert-error f-raise-message(), "tested message"
  assert-error f-ignore-and-raise(), "ignore and raise"
  assert-error f-failed-assert(), "condition is not true"
  assert-error f-good-assert-error(), "good assert error"
  assert-error f-failed-assert-error(), "error not raised"
  assert-error f-wrong-message-assert-error()
  var Func{()} fun
  assert-error fun(), "empty object used"
  var BaseType base-var
  user BaseType base-user(user base-var)
  assert-error test-mid-out()->(user base-user),
      "non empty base class given as output argument"
  new Array{2:Int} arr
  assert-error arr[6], "slice index out of bounds"
  user Array{Int} arr2(user arr)
  arr := _
  assert-error arr.length, "empty object used"
  assert-error arr2.length, "outdated weak reference used"
  assert-error arr[0], "empty object used"
  assert-error arr2[0], "outdated weak reference used"
  user TopType top
  assert-error top.meth2(), "empty object used"
  new-fail-countdown := 1
  assert-error f-alloc(), "insufficient memory for object dynamic allocation"
  new-fail-countdown := 2
  assert-error f-alloc(), "insufficient memory for managed object"

native var Int lumi-debug-value

test test-builtin-errors()
  new String{4} outdated-owner
  user String outdated(user outdated-owner)
  outdated-owner := _
  var String{3} too-long(user "abc")
  
  owner File file
  var String{4} filename
  assert-error file-open-read(user _)->(owner file), "empty object used"
  assert-error file-open-write(user outdated)->(owner file),
      "outdated weak reference used"
  assert-error file-open-read(user too-long)->(owner file), "string too long"
  lumi-debug-value := 1
  assert-error file-open-write(user filename)->(owner file), "open file failed"
  lumi-debug-value := 2
  new-fail-countdown := 1
  assert-error file-open-read(user filename)->(owner file),
      "insufficient memory for object dynamic allocation"
  new-fail-countdown := 2
  assert-error file-open-write(user filename)->(owner file),
      "insufficient memory for managed object"
  lumi-debug-value := 1
  assert-error file-close(owner file), "close file failed"
  var Char ch
  lumi-debug-value := 2
  file-open-read(user filename)->(owner file)
  assert-error file.getc()->(var ch), "file not opened"
  assert-error file.putc(copy 'a'), "file not opened"
  assert-error file.write(user "aa"), "file not opened"
  lumi-debug-value := 1
  assert-error file.putc(copy 'a'), "file write failed"
  assert-error file.write(user "aa"), "file write failed"
  
  assert-error "aa".get(copy 2), "slice index out of bounds"
  assert-error too-long.append(copy 'a'), "string too long"
  assert-error too-long.append(copy 'a'), "string too long"
  assert-error too-long.concat(user "a"), "string too long"
  var String{2} short-str
  assert-error 123.str(user short-str), "string too long"
  assert-error short-str.new(user "aaaaa"), "string too long"
  
  lumi-debug-value := 2
  assert-error sys.getline(user short-str), "string too long"
  lumi-debug-value := 1
  assert-error sys.exit(copy 0), "exit failed"
  assert-error sys.system(user "aaa"), "command execution failed"

mock Sys.println(user String text)
  assert text?

test test-cover-all()
  var covered.MiddleType mid
  mid.meth1(copy 0, user _)
  mid.meth2()
  mid.meth4()
  mid.meth5(copy 0, user _)


test test-constants()
  assert SIZE = 12
  assert LENGTH = 60
  assert TestEnum.FIRST-VALUE = 0
  assert TestEnum.ANOTHER-VALUE = 1
  assert TestEnum.VALUE2 = 2
  assert TestEnum.length = 3
  assert int-arr.length = 63

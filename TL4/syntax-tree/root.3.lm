## TL4 compiler - Syntax tree root

class GlobalNodes(SyntaxTreeNamespace)
  owner List{TypeData} types
  
  func inst init()
    base.init()
    new List{TypeData} in self.types


## The syntax tree root
class SyntaxTreeRoot(GlobalNodes)
  owner List{EnumData} enums
  owner List{SyntaxTreeConstant} constants
  owner List{ModuleMembers} modules
  user String output-file-name
  owner SyntaxTreeMainFunction main-function
  owner GlobalInit global-init
  owner Array{LineCount} line-counts
  var Int covered-files
  var Bool is-library
  
  func inst init()
    base.init()
    new List{EnumData} in self.enums
    new List{SyntaxTreeConstant} in self.constants
    new List{ModuleMembers} in self.modules
    new GlobalInit in self.global-init
    self.global-init.init()
  
  func inst parse(user Array{String} argv)
    var Int first-file-index
    var Int arg-test-index(- 1)
    var Int input-files-number
    for n in 1:argv.length
      user String arg(argv[n])
      if arg-test-index = n - 1
        string-new-copy(user arg):(owner glob.tested-module)
      else-if arg.equal(user "-t") or arg.equal(user "--test")
        arg-test-index := n
      else-if first-file-index = 0
        first-file-index := n
      else
        input-files-number += 1
    
    if input-files-number = 0 or arg-test-index = argv.length - 1
      print(user "usage: tl4-compiler [-t TESTED-MODULE]")
      print(user " OUTPUT-C-FILE-NAME INPUT-TL4-FILES...\n")
      raise
    
    if ? glob.tested-module
      new Array{input-files-number:LineCount} in self.line-counts
    
    self.output-file-name := argv[first-file-index]
    input-files-number := 0
    for n in first-file-index + 1:argv.length
      if n > (arg-test-index + 1) or n < arg-test-index
        glob.input-file-name := argv[n]
        glob.input-file-index := input-files-number
        input-files-number += 1
        glob.line-number := 1
        glob.current-module := _
        file-open(user glob.input-file-name, copy true):(owner glob.input-file)
        
        self.parse-children(user _, user _)
        
        if glob.input-buffer.length > 0 or glob.input-spaces > 0
          self.set-location()
          self.m-syntax-error-msg(user "no new-line before file end")
        
        file-close(owner glob.input-file)
        if ? self.line-counts
          self.line-counts[glob.input-file-index].init()
    
    glob.current-module := _
    self.line-number := 0
  
  func dynamic parse-if-common(
      user String keyword,
      user TypeData parent-type,
      user SyntaxTreeBlock parent-block):(
      copy Char end,
      copy Bool is-parsed)
    is-parsed := false
    if not (? glob.current-module)
      if keyword.equal(user "module")
        if end != ' '
          self.m-syntax-error-c(
              user "expected space after \"module\", got", copy end)
        user String name
        read-until(user "", copy false):(user name, copy end)
        if not f-is-legal-name(user name, copy NAME-DEFAULT)
          self.m-syntax-error(user "illegal module name", user name)
        if ? glob.global-module.variable-map.find(user name)
          self.m-syntax-error(user "module name overrides variable", user name)
        if ? glob.global-module.function-map.find(user name)
          self.m-syntax-error(user "module name overrides function", user name)
        if not (? glob.module-map.find(user name):(user glob.current-module))
          new ModuleMembers module-members
          module-members.init(user name)
          glob.current-module := module-members
          self.modules.add(owner module-members)
        is-parsed := true
        return
      else
        self.m-syntax-error-msg(user "no \"module\" in file start")
    base.parse-if-common(user keyword, user parent-type, user parent-block):(
        copy end, copy is-parsed)
  
  func dynamic parse-child(user String keyword):(copy Char end)
    if self.parse-if-function(user keyword, user _):(copy end)
      return
    
    if keyword.equal(user "const")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"const\", got", copy end)
      self.variables.add(owner SyntaxTreeConstant.parse-new(var _):(copy end))
      
    else-if keyword.equal(user "struct")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"struct\", got", copy end)
      self.types.add(owner TypeData.parse-new(var _, copy false):(copy end))
      
    else-if keyword.equal(user "class")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"class\", got", copy end)
      self.types.add(owner TypeData.parse-new(var _, copy true):(copy end))
      
    else-if keyword.equal(user "enum")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"enum\", got", copy end)
      self.enums.add(owner EnumData.parse-new(var _):(copy end))
      
    else-if keyword.equal(user "main")
      if end != '\n'
        self.m-syntax-error-c(
            user "expected new-line after \"main\", got", copy end)
      SyntaxTreeMainFunction.parse-new(var _):(
          copy end, owner self.main-function)
      
    else-if keyword.equal(user "native")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"native\", got", copy end)
      parse-native(user self):(copy end)
      
    else-if keyword.equal(user "test")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"test\", got", copy end)
      self.functions.add(owner SyntaxTreeTestFunction.parse-new(var _):(
          copy end))
      
    else-if keyword.equal(user "mock")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"mock\", got", copy end)
      self.functions.add(owner SyntaxTreeMockFunction.parse-new(var _):(
          copy end))
      
    else
      self.m-syntax-error(user "unknown keyword", user keyword)
  
  func dynamic link-types()
    raise
  
  func dynamic analyze()
    self.m-order-types()
    base.link-types()
    self.link-children-types(user self.types)
    self.global-init.link-types()
    if ? self.main-function
      self.main-function.link-types()
    base.analyze()
    self.analyze-children(user self.types)
    self.global-init.analyze()
    if ? glob.tested-module
      if not (? glob.test-functions.first)
        print(user "General code error: no test functions\n")
        raise
    else-if ? self.main-function
      self.main-function.analyze()
    else-if not self.is-library
      print(user "General code error: no main function\n")
      raise
    self.m-order-children-constants(user self.variables, user self.constants)
    if ? self.line-counts
      self.analyze-cover()
  
  func inst m-order-types()
    new List{TypeData} ordered-list
    do
      owner TypeData type-data
      self.types.pop():(owner type-data)
      while ? type-data
      if type-data.m-order-bases(user ordered-list)
        print(user "\n")
        raise
    delete self.types
    self.types := ordered-list
  
  func inst analyze-cover()
    if not (? glob.module-map.find(user glob.tested-module))
      print(user "General code error: unknown tested module \"")
      print(user glob.tested-module)
      print(user "\"\n")
      raise
    var Int covered-index
    for n in self.line-counts.length
      user LineCount line-count(self.line-counts[n])
      if line-count.needs-cover
        line-count.covered-index := covered-index
        covered-index += 1
    self.covered-files := covered-index
    if self.covered-files = 0
      print(user "General code error: no code to test under module \"")
      print(user glob.tested-module)
      print(user "\"\n")
      raise
  
  (## write C file in this order:
  1. type declarations
  2. type structs (ordered by depth)
  3. function declarations
  4. global variables
  5. function bodies
  6. main function
  #)
  func dynamic write()
    file-open(user self.output-file-name, copy false):(owner glob.output-file)
    
    write-global(user "#include \"lumi.4.h\"\n")
    
    write-global(user "\n\n/* types declaration */\n")
    var TypeDeclarationWriter type-declaration-writer
    self.write-for-type(user type-declaration-writer)
    
    # will write Enums
    write-global(user "\n\n/* Enums */\n")
    self.write-children(user self.enums)
    
    # will write constants
    write-global(user "\n\n/* constants */\n")
    self.write-children(user self.constants)
    
    # will write type structures
    write-global(user "\n\n/* types struct */\n")
    self.write-children(user self.types)
    
    write-global(user "\n\n/* types methods declaration */\n")
    var TypeMethodsDeclarationWriter type-methods-declaration-writer
    self.write-for-type(user type-methods-declaration-writer)
    
    write-global(user "\n\n/* global functions declaration */\n")
    self.write-functions-declaration()
    
    write-global(user "\n\n/* types global variables */\n")
    var TypeGlobalWriter type-global-writer
    self.write-for-type(user type-global-writer)
    
    # will write global variables
    write-global(user "\n\n/* global variables */\n")
    self.write-children(user self.variables)
    
    if ? self.line-counts
      self.write-test-coverage-data()
    
    write-global(user "\n\n/* types methods body */\n")
    var TypeMethodsBodyWriter type-methods-body-writer
    self.write-for-type(user type-methods-body-writer)
    
    # will write global functions bodies
    write-global(user "\n\n/* global functions body */\n")
    self.write-children(user self.functions)
    
    # write main function
    if ? glob.tested-module or ? self.main-function
      if not glob.is-new-mocked
        write(
            user "\n\nReturncode new_Mock(Bool* allocate_success) { return OK; }")
      if not glob.is-delete-mocked
        write(user "\n\nReturncode delete_Mock(Ref self) { return OK; }")
    if ? glob.tested-module
      self.write-test-main()
    else-if ? self.main-function
      write-global(user "\n\n/* main function */\n")
      self.main-function.write()
    
    file-close(owner glob.output-file)
  
  func inst write-for-type(user TypeWriter type-writer)
    user ListNode{TypeData} child(self.types.first)
    do
      while ? child
      child.item.write-me(user type-writer)
      child := child.next
  
  func inst write-test-coverage-data()
    for n in self.line-counts.length
      user LineCount line-count(self.line-counts[n])
      if line-count.needs-cover
        write(user "\nint LUMI_file")
        write-int(copy line-count.covered-index)
        write(user "_line_count[")
        write-int(copy line-count.line-needs-cover.length)
        write(user "] = {\n  ")
        var Int mod
        for i in line-count.line-needs-cover.length
          if i > 0
            write(user ",")
          if mod = 25
            write(user "\n  ")
            mod := 1
          else
            mod += 1
          if line-count.line-needs-cover[i]
            write(user " 0")
          else
            write(user "-1")
        write(user "\n};")
    write(user "\nFile_Coverage LUMI_file_coverage[")
    write-int(copy self.covered-files)
    write(user "] = {")
    for n in self.line-counts.length
      user LineCount line-count(self.line-counts[n])
      if line-count.needs-cover
        if line-count.covered-index > 0
          write(user ",")
        write(user "\n  {")
        write-string-literal(user line-count.filename)
        write(user ", ")
        write-int(copy line-count.line-needs-cover.length)
        write(user ", LUMI_file")
        write-int(copy line-count.covered-index)
        write(user "_line_count}")
    write(user "\n};\n")
  
  func inst write-test-main()
    write(user "\nUSER_MAIN_HEADER {\n")
    write(user "  Returncode LUMI_err = OK;\n")
    write(user "  Bool LUMI_success = true;\n")
    self.global-init.write()
    write(user "\n")
    user NameMapNode{SyntaxTreeTestFunction} node(glob.test-functions.first)
    do
      # LUMI_success &= LUMI_run_test("`test-func.name`", `test-func`);
      write(user "  LUMI_success &= LUMI_run_test(\"")
      write(user node.value.name)
      write(user "\", ")
      node.value.write-cname()
      write(user ");\n")
      node := node.next
      while ? node
    if ? self.line-counts
      write(user "  LUMI_success &= LUMI_test_coverage(LUMI_file_coverage, ")
      write-int(copy self.covered-files)
      write(user ");\n")
    write(user "  return LUMI_success? LUMI_err : FAIL;\n")
    write(user "}\n")
    write(user "\nTEST_MAIN_FUNC\n")


static ModuleMembers
  owner String name
  owner NameMap{TypeData} type-map
  owner NameMap{EnumData} enum-map
  owner NameMap{SyntaxTreeVariable} variable-map
  owner NameMap{SyntaxTreeFunction} function-map
  
  func inst init(user String name)
    string-new-copy(user name):(owner self.name)
    new NameMap{TypeData} in self.type-map
    new NameMap{EnumData} in self.enum-map
    new NameMap{SyntaxTreeVariable} in self.variable-map
    new NameMap{SyntaxTreeFunction} in self.function-map
    if ? self.name
      glob.module-map.add(user self.name, user self)
  
  func inst write-prefix()
    write-cname(user self.name)
    write(user "_M_")


## Main function node in the syntax tree
class SyntaxTreeMainFunction(SyntaxTreeFunction)
  func inst parse-new():(copy Char end, owner SyntaxTreeMainFunction new-node)
    new SyntaxTreeMainFunction in new-node
    new-node.parse():(copy end)
  
  func inst parse():(copy Char end)
    self.init()
    self.my-module := glob.current-module
    string-new-copy(user "main"):(owner self.name)
    new FunctionArguments in self.arguments
    self.arguments.init()
    self.parse-body():(copy end)
  
  func dynamic write()
    # USER_MAIN_HEADER {
    #   `block...`
    # }
    # MAIN_FUNC
    write(user "\nUSER_MAIN_HEADER")
    self.write-block()
    write-post-func()
    write(user "\nMAIN_FUNC\n")
  
  func dynamic write-block-body()
    glob.root.global-init.write()
    write-pre-func(user self)
    write(user "\n")
    base.write-block-body()


class GlobalInit(SyntaxTreeFunction)
  func inst init()
    base.init()
    new List{SyntaxTreeCode} in self.code-nodes
    new List{SyntaxTreeVariable} in self.variables
    new FunctionArguments in self.arguments
    self.arguments.init()
    self.indentation-spaces := 2
  
  func dynamic write()
    if not (? self.code-nodes.first)
      return
    self.write-children(user self.variables)
    write(user "#undef RETURN_ERROR\n")
    write(user "#define RETURN_ERROR return LUMI_err;\n")
    write(user "#define LUMI_FUNC_NAME \"global variable initialization\"\n")
    self.write-block-body()
    write(user "#undef LUMI_FUNC_NAME\n")
    write(user "#undef RETURN_ERROR\n")
    write(user "#define RETURN_ERROR goto LUMI_cleanup")


static LineCount
  user String filename
  var Int covered-index
  var Bool needs-cover
  owner Array{Bool} line-needs-cover
  
  func inst init()
    self.filename := glob.input-file-name
    new Array{glob.line-number + 1:Bool} in self.line-needs-cover


## proxy write function to be mocked on unit-tests
func write-global(user String text)
  write(user text)

## TL4 compiler - Syntax tree code block


## A basic code node in the syntax tree
class SyntaxTreeCode(SyntaxTreeNode)
  user SyntaxTreeBlock parent
  
  func inst find-variable(user String name, user String module-name):(
      user SyntaxTreeVariable variable)
    if ? self.parent and not (? module-name)
      self.parent.find-variable(user name, user _):(user variable)
    else
      base.find-variable(user name, user module-name):(user variable)
  
  func inst get-function():(user SyntaxTreeFunction function)
    self.parent.get-function():(user function)
  
  func dynamic get-parent-type():(user TypeData parent-type)
    self.parent.get-parent-type():(user parent-type)
  
  func inst check-try(user String statement)
    user SyntaxTreeBlock parent(self.parent)
    do
      while ? parent
      if parent.is-try
        self.m-syntax-error(
            user "inside \"try\" block cannot use", user statement)
      parent := parent.parent
  
  func inst write-spaces()
    self.parent.write-spaces()
  
  func inst write-call(user FunctionArguments arguments)
    arguments.write-call()
    write(user ";\n")
    arguments.write-postactions()
    self.write-spaces()
    write(user "CHECK(")
    self.write-line-num()
    write(user ")\n")
  
  ## Read and check indentation spaces for a line break from the input file
  func inst read-parent-line-break-spaces()
    self.read-line-break-spaces(copy self.parent.indentation-spaces)
  
  func dynamic m-is-end-point():(copy Bool is-end)
    is-end := false


## A basic code block node in the syntax tree
class SyntaxTreeBlock(SyntaxTreeBranch)
  user SyntaxTreeBlock parent
  owner List{SyntaxTreeCode} code-nodes
  user SyntaxTreeIf previous-if
  user SyntaxTreeTry previous-try
  var Bool is-in-loop
  var Bool is-try
  
  func inst parse-block():(copy Char end)
    new List{SyntaxTreeCode} in self.code-nodes
    self.parse-block-children(user _, user self):(copy end)
    if ? self.get-parent-type()
      self.indentation-spaces -= 2
  
  func dynamic parse-child(user String keyword):(copy Char end)
    owner SyntaxTreeCode node
    user SyntaxTreeIf new-if
    user SyntaxTreeTry new-try
    
    if self.m-has-end-point()
      self.m-syntax-error-msg(user "unreachable code")
    
    if keyword.equal(user "if")
      if end != ' '
        self.m-syntax-error-c(user "expected space after \"if\", got", copy end)
      SyntaxTreeIf.parse-new(var _, user self):(copy end, owner new-if)
      self.code-nodes.add(owner new-if)
      
    else-if keyword.equal(user "else")
      if not (? self.previous-if)
        self.m-syntax-error-msg(user "\"else\" without a previous \"if\"")
      if end != '\n'
        self.m-syntax-error-c(
            user "expected new-line after \"else\", got", copy end)
      self.previous-if.add-else(
          owner SyntaxTreeElse.parse-new(var _, user self):(copy end))
      
    else-if keyword.equal(user "else-if")
      if not (? self.previous-if)
        self.m-syntax-error-msg(user "\"else-if\" without a previous \"if\"")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"else-if\", got", copy end)
      owner SyntaxTreeCoverage coverage-node
      if ? glob.tested-module
        if glob.current-module.name.equal(user glob.tested-module)
          SyntaxTreeCoverage.init-new(var _, user _):(owner coverage-node)
      SyntaxTreeIf.parse-new(var _, user self):(copy end, owner new-if)
      self.previous-if.add-else-if(owner new-if, owner coverage-node)
      
    else-if keyword.equal(user "do")
      if end != '\n'
        self.m-syntax-error-c(
            user "expected new-line after \"do\", got", copy end)
      self.code-nodes.add(
          owner SyntaxTreeDoLoop.parse-new(var _, user self):(copy end))
      
    else-if keyword.equal(user "for")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"for\", got", copy end)
      self.code-nodes.add(
          owner SyntaxTreeForLoop.parse-new(var _, user self):(copy end))
      
    else-if keyword.equal(user "while")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"while\", got", copy end)
      self.code-nodes.add(
          owner SyntaxTreeWhile.parse-new(var _, user self):(copy end))
      
    else-if keyword.equal(user "break")
      if end != '\n'
        self.m-syntax-error-c(
            user "expected new-line after \"break\", got", copy end)
      self.code-nodes.add(
          owner SyntaxTreeBreak.parse-new(var _, user self):(copy end))
      
    else-if keyword.equal(user "continue")
      if end != '\n'
        self.m-syntax-error-c(
            user "expected new-line after \"continue\", got", copy end)
      self.code-nodes.add(
          owner SyntaxTreeContinue.parse-new(var _, user self):(copy end))
      
    else-if keyword.equal(user "return")
      if end != '\n'
        self.m-syntax-error-c(
            user "expected new-line after \"return\", got", copy end)
      self.code-nodes.add(
          owner SyntaxTreeReturn.parse-new(var _, user self):(copy end))
      
    else-if keyword.equal(user "raise")
      if end != ' ' and end != '\n'
        self.m-syntax-error-c(
            user "expected space or new-line after \"raise\", got", copy end)
      self.code-nodes.add(
          owner SyntaxTreeRaise.parse-new(var _, user self):(copy end))
      
    else-if keyword.equal(user "new")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"new\", got", copy end)
      self.get-function().variables.add(owner SyntaxTreeVariable.parse-new(
          var _, copy ACCESS-OWNER, copy true, user _, user self):(copy end))
      
    else-if keyword.equal(user "try")
      if end != '\n'
        self.m-syntax-error-c(
            user "expected new-line after \"try\", got", copy end)
      owner SyntaxTreeTry try-node
      SyntaxTreeTry.parse-new(var _, user self):(copy end, owner try-node)
      new-try := try-node
      self.code-nodes.add(owner try-node)
      
    else-if keyword.equal(user "catch")
      if not (? self.previous-try)
        self.m-syntax-error-msg(user "\"catch\" without a previous \"try\"")
      if end != '\n'
        self.m-syntax-error-c(
            user "expected new-line after \"catch\", got", copy end)
      owner SyntaxTreeCatch catch-node
      SyntaxTreeCatch.parse-new(var _, user self):(copy end, owner catch-node)
      self.previous-try.catch-node := catch-node
      self.code-nodes.add(owner catch-node)
      
    else-if keyword.equal(user "assert")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"assert\", got", copy end)
      self.code-nodes.add(owner SyntaxTreeAssert.parse-new(
          var _, user self):(copy end))
      
    else-if keyword.equal(user "assert-error")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"assert-error\", got", copy end)
      self.code-nodes.add(owner SyntaxTreeAssertError.parse-new(
          var _, user self):(copy end))
      
    else
      glob.save-input := true
      self.code-nodes.add(
          owner SyntaxTreeExpression.parse-new(var _, user self):(copy end))
    
    self.previous-if := new-if
    self.previous-try := new-try
  
  func inst m-has-end-point():(copy Bool has-end)
    if ? self.code-nodes.last
      self.code-nodes.last.item.m-is-end-point():(copy has-end)
    else
      has-end := false
  
  func dynamic find-variable(user String name, user String module-name):(
      user SyntaxTreeVariable variable)
    base.find-variable(user name, user module-name):(user variable)
    if not (? variable) and ? self.parent and not (? module-name)
      self.parent.find-variable(user name, user _):(user variable)
  
  func dynamic get-function():(user SyntaxTreeFunction function)
    self.parent.get-function():(user function)
  
  func inst get-parent-type():(user TypeData parent-type)
    parent-type := self.get-function().parent-type
  
  func dynamic link-types()
    base.link-types()
    self.link-children-types(user self.code-nodes)
  
  func dynamic analyze()
    base.analyze()
    self.analyze-children(user self.code-nodes)
  
  func inst write-block()
    # `previous-text` {
    #   `block...`
    # }
    self.write-block-start()
    self.write-block-body()
    self.write-block-end()
  
  func inst write-block-start()
    write(user " {\n")
  
  func dynamic write-block-body()
    self.write-children(user self.code-nodes)
  
  func inst write-block-end()
    write-spaces(copy self.indentation-spaces - 2)
    write(user "}\n")

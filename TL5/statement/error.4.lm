~~~ TL5 compiler - Syntax tree error handling nodes ~~~
module tl5-compiler


~~~ Try statement in the syntax tree ~~~
class SyntaxTreeTry(SyntaxTreeFlowElement)
  user SyntaxTreeCatch catch-node
  
  func inst parse-new(user SyntaxTreeBlock parent)->(
      owner SyntaxTreeTry new-node)
    new-node := SyntaxTreeTry(user parent)
    new-node.parse-block()
  
  func dynamic analyze()
    if not self.block.code-nodes.first?
      self.syntax-error-msg(user "\"try\" statement with no code")
    base()
  
  func dynamic write()
    self.write-spaces()
    write(user "{\n")
    self.block.write-block-setup()
    self.block.write-spaces()
    write(user "++LUMI_trace_ignore_count;\n")
    
    self.block.write-block-body()
    self.block.write-block-cleanup()
    
    self.write-spaces()
    write(user "}\n")
    self.write-spaces()
    write(user "--LUMI_trace_ignore_count;\n")
    
    if not self.catch-node?
      var SyntaxTreeCatch empty-catch(user self.parent)
      empty-catch.write()


~~~ Catch statement in the syntax tree ~~~
class SyntaxTreeCatch(SyntaxTreeFlowElement)
  func inst parse-new(user SyntaxTreeBlock parent)->(
      owner SyntaxTreeCatch new-node)
    new-node := SyntaxTreeCatch(user parent)
    new-node.parse-block()
  
  func dynamic analyze()
    if not self.block.code-nodes.first?
      self.syntax-error-msg(user "\"catch\" statement with no code")
    base()
  
  func dynamic write()
    self.write-spaces()
    write(user "if (LUMI_err != OK) {\n")
    self.block.write-block-setup()
    self.block.write-spaces()
    write(user "LUMI_err = OK;\n")
    self.block.write-set-loop-depth()
    self.block.write-block-body()
    self.block.write-block-cleanup()
    self.block.write-block-end()

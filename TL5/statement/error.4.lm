~~~ TL5 compiler - Syntax tree error handling nodes ~~~
module tl5-compiler

var Int try-depth-count

~~~ Try statement in the syntax tree ~~~
class SyntaxTreeTry(SyntaxTreeFlowElement)
  user SyntaxTreeCatch catch-node
  
  func inst parse-new(user SyntaxTreeBlock parent)->(
      var Char end, owner SyntaxTreeTry new-node)
    new-node := SyntaxTreeTry()
    new-node.init(user parent)
    new-node.parse-block(copy false)->(var end)
  
  func dynamic analyze()
    if not self.block.code-nodes.first?
      self.syntax-error-msg(user "\"try\" statement with no code")
    base.analyze()
  
  func dynamic write()
    self.write-spaces()
    write(user "do {\n")
    self.parent.indentation-spaces += 2
    self.write-spaces()
    write(user "++LUMI_trace_ignore_count;\n")
    if try-depth-count = 0
      write(user "#undef RETURN_ERROR\n")
      write(user "#define RETURN_ERROR(value) LUMI_err = value; break\n")
    try-depth-count += 1
    
    self.block.write-block-body()
    
    try-depth-count -= 1
    if try-depth-count = 0
      write(user "\n#undef RETURN_ERROR\n")
      write(
          user "#define RETURN_ERROR(value) LUMI_err = value; goto LUMI_cleanup\n")
    self.parent.indentation-spaces -= 2
    self.write-spaces()
    write(user "} while (false);\n")
    self.write-spaces()
    write(user "--LUMI_trace_ignore_count;\n")
    if not self.catch-node?
      self.write-spaces()
      write(user "LUMI_err = OK;\n")


~~~ Catch statement in the syntax tree ~~~
class SyntaxTreeCatch(SyntaxTreeFlowElement)
  func inst parse-new(user SyntaxTreeBlock parent)->(
      var Char end, owner SyntaxTreeCatch new-node)
    new-node := SyntaxTreeCatch()
    new-node.init(user parent)
    new-node.parse-block(copy false)->(var end)
  
  func dynamic analyze()
    if not self.block.code-nodes.first?
      self.syntax-error-msg(user "\"catch\" statement with no code")
    base.analyze()
  
  func dynamic write()
    self.write-spaces()
    write(user "if (LUMI_err != OK) {\n")
    self.write-spaces()
    write(user "  LUMI_err = OK;\n")
    self.block.write-block-body()
    self.block.write-block-end()

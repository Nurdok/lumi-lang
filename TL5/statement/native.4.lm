~~~ TL5 compiler - Syntax tree native nodes ~~~
module tl5-compiler

~~~ Parse "native" keyword in the root tree ~~~
func parse-native(user SyntaxTreeRoot root)->(var Char end)
  user String keyword
  read-until(user " ", copy false)->(user keyword, var end)
  if end != ' '
    root.syntax-error-c(
        user "expected space after \"native\" keyword, got", copy end)
  
  if keyword.equal(user "func")
    root.functions.add(owner NativeFunction.parse-new(user _)->(var end))
    
  else-if keyword.equal(user "var")
    root.variables.add(owner NativeVariable.parse-new(user _)->(var end))
    
  else-if keyword.equal(user "type")
    root.types.add(owner NativeType.parse-new(user _)->(var end))
    
  else
    root.syntax-error(user "unknown \"native\" keyword", user keyword)


~~~ Native function declaration in the syntax tree ~~~
class NativeFunction(SyntaxTreeFunction)
  user ModuleMembers outer-module
  
  func inst parse-new()->(var Char end, owner NativeFunction new-node)
    new-node := NativeFunction()
    new-node.parse()->(var end)
  
  func inst parse()->(var Char end)
    self.set-location()
    self.outer-module := glob.current-module
    self.parse-header(copy true)->(var end)
    self.code-nodes := List{SyntaxTreeCode}()
    self.variables := List{SyntaxTreeVariable}()
    glob.global-module.function-map.add(user self.name, user self)
  
  func dynamic link-types()
    glob.current-module := self.outer-module
    base()
    glob.current-module := _
  
  func dynamic analyze()
    glob.current-module := self.outer-module
    base()
    glob.current-module := _
  
  func dynamic write()
    ; do nothing


~~~ Native variable declaration in the syntax tree ~~~
class NativeVariable(SyntaxTreeVariable)
  func inst parse-new()->(var Char end, owner NativeVariable new-node)
    new-node := NativeVariable()
    new-node.parse(
        copy Access.VAR, copy false, user _, user _, user glob.global-module)->(
        var end)
    new-node.is-native := true
    new-node.my-module := _
  
  func dynamic analyze()
    if not self.type-instance.type-data.is-primitive
      self.syntax-error(
          user "only primitive types supported for native variable, got",
          user self.type-instance.type-data.name)
    base()
  
  func dynamic write()
    write(user "\nextern ")
    base()


~~~ Native variable declaration in the syntax tree ~~~
class NativeType(TypeData)
  func inst parse-new()->(var Char end, owner NativeType new-node)
    new-node := NativeType()
    new-node.parse()->(var end)
  
  func inst parse()->(var Char end)
    self.is-primitive := true
    read-new(user "")->(owner self.name, var end)
    self.add-type(user glob.global-module)
    self.init()
  
  func dynamic analyze()
    ; do nothing
  
  func dynamic write-declaration()
    ; typedef void* `name`;
    write(user "\ntypedef void* ")
    write-cname(user self.name)
    write(user ";\n")
  
  func dynamic write-methods-declaration()
    ; do nothing
  
  func dynamic write-methods-body()
    ; do nothing
    
  func dynamic write-global()
    ; do nothing
  
  func dynamic write()
    ; do nothing

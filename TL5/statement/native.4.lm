~~~ TL5 compiler - Syntax tree native nodes ~~~
module tl5-compiler


~~~ Native include declaration in the syntax tree ~~~
class NativeInclude(SyntaxTreeFunction)
  owner String path

  func inst parse-new()->(owner NativeInclude new-node)
    new-node := NativeInclude()
    new-node.parse()
  
  func inst parse()
    read-new(user "")->(owner self.path)
    self.check-string(user self.path)
  
  func dynamic write()
    write(user "\n#include <")
    write(user self.path[1:self.path.length - 2])
    write(user ">\n")


~~~ Native function declaration in the syntax tree ~~~
class NativeFunction(SyntaxTreeFunction)
  user ModuleMembers outer-module
  
  func inst parse-new()->(owner NativeFunction new-node)
    new-node := NativeFunction()
    new-node.parse()
  
  func inst parse()
    self.outer-module := glob.current-module
    self.parse-header(copy true)
    glob.global-module.function-map.add(user self.name, user self)
  
  func dynamic link-types()
    glob.current-module := self.outer-module
    base()
    glob.current-module := _
  
  func dynamic analyze()
    glob.current-module := self.outer-module
    base()
    glob.current-module := _
  
  func dynamic write-declaration()
    ; do nothing
  
  func dynamic write()
    ; do nothing


~~~ Native variable declaration in the syntax tree ~~~
class NativeVariable(SyntaxTreeVariable)
  func inst parse-new()->(owner NativeVariable new-node)
    new-node := NativeVariable(user _)
    new-node.parse(
        copy Access.VAR, copy false, user _, user glob.global-module)
    new-node.is-native := true
    new-node.my-module := _
  
  func dynamic analyze()
    if not self.type-instance.type-data.is-primitive
      self.syntax-error(
          user "only primitive types supported for native variable, got",
          user self.type-instance.type-data.name)
    base()
  
  func dynamic write()
    ; do nothing


~~~ Native constant declaration in the syntax tree ~~~
class NativeConstant(SyntaxTreeConstant)
  func inst parse-new()->(owner NativeConstant new-node)
    new-node := NativeConstant(user _)
    new-node.is-native := true
    new-node.parse(user glob.global-module)
    new-node.is-ordered := true
    new-node.my-module := _

  func dynamic analyze()
    ; do nothing
  
  func dynamic get-constant-value()->(var Int value, var Bool has-value)
    has-value := false

  func dynamic write()
    ; do nothing


~~~ Native variable declaration in the syntax tree ~~~
class NativeType(TypeData)
  func inst parse-new()->(owner NativeType new-node)
    new-node := NativeType()
    new-node.parse()
  
  func inst parse()
    self.is-primitive := true
    read-new(user "")->(owner self.name)
    self.add-type(user glob.global-module)
  
  func dynamic analyze()
    ; do nothing
  
  func dynamic write-declaration()
    ; do nothing
  
  func dynamic write-methods-declaration()
    ; do nothing
  
  func dynamic write-methods-body()
    ; do nothing
    
  func dynamic write-global()
    ; do nothing
  
  func dynamic write()
    ; do nothing

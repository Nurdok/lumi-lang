~~~ TL5 compiler - Syntax tree variable ~~~
module tl5-compiler

~~~ Variable node in the syntax tree ~~~
class SyntaxTreeVariable(SyntaxTreeCode)
  owner String name
  user ModuleMembers my-module
  var Int access
  owner TypeInstance type-instance
  user TypeData parent-type
  var Bool constant
  var Bool is-output
  var Bool is-create
  var Bool is-native
  
  func inst parse-new(
      copy Int access,
      copy Bool is-create,
      user TypeData parent-type,
      user SyntaxTreeBlock parent-block)->(
      owner SyntaxTreeVariable new-node)
    new-node := SyntaxTreeVariable(user parent-block)
    new-node.parse(
        copy access,
        copy is-create,
        user parent-type,
        user glob.current-module)
  
  func inst parse(
      copy Int access,
      copy Bool is-create,
      user TypeData parent-type,
      user ModuleMembers my-module)
    self.parent-type := parent-type
    self.access := access
    self.is-create := is-create
    self.type-instance := TypeInstance()
    if self.is-create
      self.type-instance.parse(
          user " ", user self, user self, copy INDENTATION-SPACES)
    else
      self.type-instance.parse(
          user " ", user self, user _, copy INDENTATION-SPACES)
    if glob.last-char != ' '
      self.syntax-error-c(user "expected space after type, got")
    read-new(user "(")->(owner self.name)
    self.check-name()
    if glob.last-char = '(' and self.parent-type?
      self.syntax-error-msg(user "type members cannot be initialized")
    if not self.parent? and not self.parent-type?
      self.parent := glob.root.global-init
      self.my-module := my-module
      self.my-module.variable-map.add(user self.name, user self)
    if self.parent?
      if (glob.last-char = '(' or self.is-create)
        VariableInit.parse-new(user _, user self)
      self.get-function().function-variables.add(user self.name, user self)
    if self.parent is glob.root.global-init
      self.parent := _
  
  func inst check-name()
    if not is-legal-name(user self.name, copy NameGroup.DEFAULT)
      self.syntax-error(user "illegal variable name", user self.name)
    if self.parent-type?
      user SyntaxTreeVariable field
      self.parent-type.find-field(user self.name)->(user field)
      if field?
        self.syntax-error(user "redefinition of field", user self.name)
      user SyntaxTreeFunction meth
      self.parent-type.find-meth(user self.name)->(user meth)
      if meth?
        self.syntax-error(
            user "field name overrides method", user self.name)
    else
      if glob.module-map.find(user self.name)?
        self.syntax-error(
            user "variable name overrides module", user self.name)
      if glob.find-variable(user self.name)?
        self.syntax-error(
            user "redefinition of global variable", user self.name)
      if glob.find-function(user self.name)?
        self.syntax-error(
            user "variable name overrides function", user self.name)
      if self.parent?
        var Bool redefinition(
            copy self.parent.find-variable(user self.name, user _)?)
        if not redefinition
          redefinition :=
              self.get-function().function-variables.find(user self.name)?
        if redefinition
          self.syntax-error(
              user "redefinition of variable", user self.name)
  
  func dynamic get-parent-type()->(user TypeData parent-type)
    if self.parent-type?
      parent-type := self.parent-type
    else-if self.parent?
      base()->(user parent-type)
    else
      parent-type := _
  
  func inst get-if-equal(user String name)->(user SyntaxTreeVariable variable)
    if self.name.equal(user name)
      variable := self
    else
      variable := _
  
  func dynamic link-types()
    if self.my-module?
      glob.current-module := self.my-module
    self.type-instance.link-types(user self)
    if self.my-module?
      glob.current-module := _
  
  func dynamic analyze()
    if self.my-module?
      glob.current-module := self.my-module
    if self.type-instance.type-data.is-primitive and self.access != Access.VAR
      self.syntax-error(
          user "only \"var\" access is supported for primitive types, got",
          user glob.access-names[self.access])
    self.type-instance.analyze-lengths(user self, copy self.access = Access.VAR)
    if self.is-create and self.type-instance.type-data is glob.type-generic
      self.syntax-error(
          user "declared variable with generic subtype",
          user self.type-instance.name)
    if self.is-create and not self.type-instance.type-data.is-primitive and
        self.parent-type? and
        (self.type-instance.type-data is glob.type-string or
        self.type-instance.type-data is glob.type-array)
      self.syntax-error(
          user "cannot declared \"var\" field of sequence type",
          user self.type-instance.type-data.name)
    if self.is-create and self.type-instance.type-data.create-disallowed
      self.syntax-error(
          user "cannot create objects with type",
          user self.type-instance.type-data.name)
    if self.access = Access.VAR
      self.type-instance.check-sequence(user self)
    if self.is-create and self.type-instance.type-data is glob.type-array
      if self.type-instance.parameters.first.item.type-data is glob.type-generic
        self.syntax-error-msg(user "cannot create generic array")
    if self.my-module?
      glob.current-module := _

  func dynamic check-memory(user ReferenceMemoryList refs)
    if self.access = Access.USER or self.access = Access.OWNER
      refs.add(user self)
  
  func inst write-cname()
    if self.my-module?
      self.my-module.write-prefix()
    write-cname(user self.name)
  
  func dynamic write()
    if self.parent? or self.parent-type?
      self.write-spaces()
    else-if not self.is-native
      write(user "\n")
    
    if self.access = Access.VAR and self.is-create and
        (self.type-instance.type-data is glob.type-array or
        self.type-instance.type-data is glob.type-string)
      self.write-sequence()
    
    if not self.type-instance.type-data.is-primitive and
        self.access = Access.VAR and not self.parent-type?
      self.write-var()
    
    ; `type` `name`[ = 0];
    ; `type`* `name`[ = NULL];
    ; Ref_Manager* `name`_Refman[ = NULL];
    if self.type-instance.type-data is glob.type-func
      self.type-instance.arguments.write-pointer(user self.name)
    else
      self.type-instance.type-data.write-cname()
      if not self.type-instance.type-data.is-primitive and
          not (self.parent-type? and self.access = Access.VAR)
        write(user "*")
      write(user " ")
      self.write-cname()
    
    if not self.parent-type? and not self.is-native
      if self.type-instance.type-data.is-primitive and
          self.type-instance.type-data is-not glob.type-func and
          self.type-instance.type-data is-not glob.type-ref
        write(user " = 0")
      else
        write(user " = NULL")
    
    write(user ";\n")
    
    if not self.type-instance.type-data.is-primitive and
        not (self.parent-type? and self.access = Access.VAR)
      self.write-refman()
    
    if self.type-instance.type-data.is-dynamic and
        not (self.parent-type? and self.access = Access.VAR)
      self.write-dynamic()
  
  func dynamic write-sequence()
    if self.type-instance.type-data is glob.type-array
      if self.type-instance.parameters.first.item.type-data is glob.type-string
        ; char `name`_Chars[`length` * `string-legth`] = {0};
        write(user "char ")
        self.write-cname()
        write(user "_Chars[")
        self.type-instance.length.write()
        write(user " * ")
        self.type-instance.parameters.first.item.length.write()
        write(user "];\n")
        self.write-spaces()
    ; `sub-type` `name`_Values[`length`];
    if self.type-instance.type-data is glob.type-string
      write(user "char ")
    else-if self.type-instance.parameters.first.item.type-data is glob.type-func
      write(user "Returncode (*")
    else
      self.type-instance.parameters.first.item.type-data.write-cname()
      write(user " ")
    self.write-cname()
    write(user "_Values[")
    self.type-instance.length.write()
    write(user "]")
    if self.type-instance.type-data is glob.type-array
      if self.type-instance.parameters.first.item.type-data is glob.type-func
        write(user ")")
        self.type-instance.parameters.first.item.arguments.write()
    write(user " = ")
    var Int bases
    if self.type-instance.type-data is glob.type-array
      if not self.type-instance.parameters.first.item.type-data.is-primitive
        user TypeData type-data(user self.type-instance.parameters.first.item.type-data)
        bases := 1
        do
          write(user "{")
          while type-data.base-type?
          type-data := type-data.base-type.type-data
          bases += 1
    write(user "{0}")
    for n in bases
      write(user "}")
    write(user ";\n")
    self.write-spaces()
  
  func inst write-var()
    ; `type` `name`_Var = {...};
    self.type-instance.type-data.write-cname()
    write(user " ")
    self.write-cname()
    write(user "_Var = {")
    if self.is-create and
        (self.type-instance.type-data is glob.type-array or
        self.type-instance.type-data is glob.type-string)
      ; {`length`, 0, NULL}
      self.type-instance.length.write()
      if self.type-instance.type-data is glob.type-string
        write(user ", 0")
      write(user ", NULL")
    else
      var Int bases
      user TypeData type-data(user self.type-instance.type-data)
      do
        if type-data.base-type?
          type-data := type-data.base-type.type-data
        else-if type-data.variables.first.item.access = Access.VAR and
            not type-data.variables.first.item.type-instance.type-data.is-primitive
          type-data := type-data.variables.first.item.type-instance.type-data
        else
          break
        bases += 1
        write(user "{")
      write(user "0")
      for n in bases
        write(user "}")
    write(user "};\n")
    self.write-spaces()
  
  func inst write-refman()
    self.write-spaces()
    write(user "Ref_Manager* ")
    self.write-cname()
    write(user "_Refman")
    if not self.parent-type?
      write(user " = NULL")
    write(user ";\n")
  
  func inst write-dynamic()
    ; `type`_Dynamic* `name`_Dynamic[ = `type`_dynamic];
    self.write-spaces()
    self.type-instance.type-data.write-cname()
    write(user "_Dynamic* ")
    self.write-cname()
    write(user "_Dynamic")
    if not self.parent-type?
      write(user " = ")
      if self.is-create
        write(user "&")
        self.type-instance.type-data.write-cname()
        write(user "_dynamic")
      else
        write(user "NULL")
    write(user ";\n")
  
  func inst write-spaces()
    if self.parent?
      base()
    else-if self.parent-type?
      self.parent-type.write-spaces()


class VariableInit(SyntaxTreeCode)
  owner InitExpression expression-init
  user SyntaxTreeVariable variable
  
  func inst parse-new(user SyntaxTreeVariable variable)
    new VariableInit new-node(user variable.parent)
    new-node.parse(user variable)
    variable.parent.code-nodes.add(owner new-node)
  
  func inst parse(user SyntaxTreeVariable variable)
    self.variable := variable
    self.expression-init := InitExpression(user self)
    self.expression-init.parse(
        owner variable.type-instance.copy-new(), owner _)
    self.expression-init.is-statement := true
    self.expression-init.aux-variable := VariableExpression(user self)
    string-new-copy(user variable.name)->(
        owner self.expression-init.aux-variable.name)
    self.expression-init.aux-variable.variable := variable
    variable.type-instance.copy-new()->(
        owner self.expression-init.aux-variable.result-type)
    self.expression-init.aux-variable.access := variable.access
  
  func dynamic analyze()
    if self.parent is glob.root.global-init
      glob.current-module := self.variable.my-module
    self.expression-init.analyze()
    if self.parent is glob.root.global-init
      glob.current-module := _
  
  func dynamic write()
    if self.variable.type-instance.type-data.is-primitive and
        not self.expression-init.arguments.parameters.first?
      return
    if self.parent is glob.root.global-init
      write(user "#define LUMI_FILE_NAME \"")
      write(user self.variable.input-file-name)
      write(user "\"\n")
    self.expression-init.write()
    if self.parent is glob.root.global-init
      write(user "#undef LUMI_FILE_NAME\n")


class SyntaxTreeConstant(SyntaxTreeVariable)
  var ExpressionValue value
  var Bool is-ordered
  var Bool ordering
  
  func inst parse-new()->(owner SyntaxTreeConstant constant)
    constant := SyntaxTreeConstant(user _)
    constant.parse()
  
  func inst parse()
    self.access := Access.VAR
    self.constant := true
    self.my-module := glob.current-module
    user String type-name
    read-until(user " ", copy false)->(user type-name)
    if not type-name.equal(user "Int")
      self.syntax-error(
          user "Only \"Int\" typed constant supported, got", user type-name)
    if glob.last-char != ' '
      self.syntax-error-c(user "expected space after \"Int\", got")
    read-new(user " ")->(owner self.name)
    if not is-legal-name(user self.name, copy NameGroup.CONSTANT)
      self.syntax-error(user "illegal constant name", user self.name)
    if glob.last-char != ' '
      self.syntax-error-c(user "expected space after constant name, got")
    self.value.new(user "", user self)
    glob.type-int.new-type-instance()->(owner self.type-instance)
    self.my-module.variable-map.add(user self.name, user self)
  
  func dynamic link-types()
    ; do nothing
  
  func dynamic analyze()
    glob.current-module := self.my-module
    self.analyze-expression(user self.value, user glob.type-int)
    if not self.value.constant
      self.syntax-error-msg(user "value is not constant")
    glob.current-module := _
  
  func dynamic order-constants(user NameMap{SyntaxTreeConstant} ordered-list)
    if self.is-ordered
      return
    if self.ordering
      self.syntax-error(
          user "recursive dependency in constant", user self.name)
    self.ordering := true
    self.value.order-constants(user ordered-list)
    ordered-list.add(user self.name, user self)
    self.is-ordered := true
  
  func dynamic write()
    if not self.is-ordered
      return
    ; enum { `name` = `value` };
    write(user "\nenum { ")
    self.write-cname()
    write(user " = ")
    self.value.write()
    write(user " };\n")
    self.is-ordered := false

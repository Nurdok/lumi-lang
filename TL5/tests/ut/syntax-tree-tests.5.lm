; @@ test-general
; @ g t0
user String str
; @ g t1


    

var Int x
; @ g t2
; comment

var Int x
; @ g t3
~~~ documentation ~~~

var Int x
; @ g t4
[; multi 
 line 
 comment ;]

var Int x
; @ g t5
~~~ multi 
 line    
 documentation
 confused by ~ or ~~ or ; or ~~ ~ ?
~~~

var Int x
; @ g t6
var String{12} s
user String us(user s)
user String gs(user "global text")
main
    var Int x(copy 6)
    x := 7
; @ tg t7
var String{12} s
func fun()
    s := _
; @-
module second
test dummy()
; @ eg te0
error 
; @ ec te1
1 + 2
; @ ec te2
return
i := 3
; @ ec te3
raise
i := 3
; @ eg te4
[; comment ;]?
; @ eg te5
main(
; @ eg te6
    struct Test
; @ eg te7
func f()
    x :=
        y
; @ feg te8
var Int x
; @ eg te9
var Int name
var Int name
; @ eg te10
func name()
var Int name
; @ eg te11
user Error error
; @ eg te12
var Int x(copy error)
; @ eg te13
[ ; error
; @@ test-struct
; @ g t0
struct Test
    var Int x
; @ g t1
struct Test
    var Int x
; @ g t2
struct Test1
    var Int x
struct Test2
    var Int x


struct Test3
    var Int x
; @ g t3
struct Test2(Test1)
    var Int y
struct Test1
    var Int x
; @ eg te0
struct(
; @ eg te1
struct error
; @ eg te2
struct ERror
; @ eg te3
struct Error-name
; @ eg te4
struct E
; @ eg te5
struct Int
; @ eg te6
struct Test
struct Test
; @ eg te7
struct Test(Base
; @ eg te8
struct Test
    error 
; @ feg te9
struct Test
; @ eg te10
struct Error
; @ eg te11
struct Error
    new 
; @ eg te12
struct Error
    new()
    new()
; @ eg te13
struct Error
    var Int x
    new()->(var Int x)
; @ eg te14
struct Error(Error)
    var Int x
; @ eg te15
struct Aerror(Berror)
    var Int x
struct Berror(Aerror)
    var Int x
; @@ test-class
; @ g t0
class Base
    var Int x
    owner Base b
    func inst stat()
    func dynamic dyn0()
    func dynamic dyn1()
class Mid(Base)
    var Int y
    owner Mid m
    func dynamic dyn0()
    func dynamic dyn2()
class Top(Mid)
    var Int z
    owner Top t
    func dynamic dyn0()
        base()
    func dynamic dyn3()
        base.dyn0()
; @ eg te0
class(
; @ eg te1
class Error
    var Int x
; @ eg te2
class Error
    func error f()
; @ eg te3
struct Base
    var Int x
    func meth()
class Error(Base)
    func dynamic meth()
; @ eg te4
class Base
    var Int x
    func dynamic meth()
class Error(Base)
    func inst meth()
; @@ test-function
; @ g t0
func name()
; @ g t1
func name(user String self, user String text, copy Int num)
; @ g t2
func name()->(owner String text, var Int num)
; @ g t3
func name(copy Char param)->(owner String out)
; @ g t4
func name(user Array{Int} array)
; @ g t5
func name(copy Func{(copy Int x)->(var Int y)} fun)->(var Func{()} joy)
; @ g t6
func name()
    var Int x
; @ g t7
func name(user String self, copy Int px, user String pu, owner String po)->(
        var String oself, var Int ox, user String ou, owner String oo)
    var Int x
    user String u
    owner String o
    var String{12} v
    new String{12} n
    o := String{12}()
    u := "constant string"
    pu := po[2:6]
; @ g t8
struct Struct
    owner Struct s
    owner Array{Struct} as
class Class
    owner Class c
    owner Array{Class} ac
    func dynamic meth()
func name(
        owner Struct ps,
        owner Class pc,
        owner Array{Struct} pas,
        owner Array{Class} pac)
    owner Struct s
    owner Class c
    owner Array{Struct} as
    owner Array{Class} ac
    owner Array{Int} ai
    owner Array{File} af
; @ g t9
class Test
    var Int x
    func dynamic meth()
func name()->(owner Test t)
    t := _
; @ g tm0
main
    var Int x
; @ eg te0
func(
; @ eg te1
func name
; @ eg te2
func Error()
; @ eg te3
func error_name()
; @ eg te4
func name()
func name()
; @ eg te5
var Int name
func name()
; @ eg te6
func name( )
; @ eg te7
func name(user)
; @ eg te8
func name(user String
; @ eg te9
func name(error Int x)
; @ eg te10
func name(user String str,user Int x)
; @ eg te11
func name()-()
; @ feg te12
func name()
; @ eg te13
func name()
        var Int x
; @ eg te14
func name(user Int x)
; @ eg te15
func name()->(copy Int x)
; @ eg te16
func name(copy String s)
; @ eg te17
func name(user Array error)
; @ eg te18
func name(copy Func error)
; @ eg te19
func name(user Array{Array{Int}} error)
; @ eg te20
func name(
    copy Int x)
; @ eg te21
func Type.Error.name()
; @ eg te22
func module.error.name()
; @@ test-members
; @ g t0
struct Test
    var Int x
    weak String str
; @ g t1
struct Test
    var Int x
    func name()
        self.x := 2
; @ g t2
struct Test
    var Int x
    func name()
        var Int x
        x := self.x
; @ g t3
struct Test
    ; comment
    var Int x
; @ g t4
struct Test
    ~~~ documemtation ~~~
    var Int x
; @ g t5
struct Test
    [; multi 
    line 
    comment ;]
    var Int x
; @ g t6
struct Test
    ~~~ multi 
    line 
    documemtation
    ~~~
    var Int x
; @ g t7
var Int name
func fun()
struct Test1
    var Int name
    func fun()
struct Test2
    var Int fun
    func name()
; @ g t8
struct Test
    var Int x
    func fun()
        if self.x > 3
            self.x := 3
        do
            for n in 4
                self.x += n
; @ g t9
struct Test
    var Int x
    func fun() _
func Test.fun()
    self.x := 3
; @ g t10
func Test.fun(user String s)->(var Int x)
    x := s.length
struct Test
    var Int x
    func fun(user String s)->(var Int x) _
; @ g t11
struct Test
    var Int x
    new(copy Int x) _
func Test.new(copy Int x)
    self.x := x
; @ eg te0
struct Test
    var Int name
    var Int name
; @ eg te1
struct Test
    func name()
    var Int name
; @ eg te2
struct Test
    func name()
    func name()
; @ eg te3
struct Test
    var Int name
    func name()
; @ eg te4
struct Test
    var Int x
    func meth()
        owner Test error
        error := self
; @ eg te5
struct Test
    var Int x
    func name() 
; @ eg te6
struct Test
    var Int x
    func error.name()
; @ eg te7
struct Test
    var Int x
    func fun()
func Test.fun()
; @ eg te8
func Test.fun()
struct Test
    var Int x
    func fun() _
func Test.fun()
; @@ test-return
; @ g t0
func name()
    return
; @ g t1
func name()
    raise
; @ g t2
func name()
    raise "some error"
; @ g t3
func name(user Array{String} arr)
    raise arr[3]
; @ eg te0
func name()
    return()
; @ eg te1
func name()
    raise()
; @ eg te2
func name()
    raise 2
; @@ test-code-variables
; @ c t0
var Int x
; @ c t1
user String s
; @ c t2
owner Array{Int} a
; @ c t3
user Test tt
; @ c t4
var String{12} s
; @ c t5
var Array{12:Int} a
; @ c t6
var Array{12:Test} a
; @ c t7
var Array{12:String{7}} sa
; @ c t8
new String{12} s
so := s
; @ c t9
var Array{12:Tc} a
; @ g t10
func fun()
    var String{4} sv
    if 1 > 2
        user String su(user sv[1:2])
; @ ec te0
var Int
; @ ec te1
var Int Error
; @ ec te2
var Int errorName
; @ ec te3
var Int name
var Int name
; @ ec te4
var Int name
do
    var Int x
    do
        var Int name
; @ eg te5
var Int name
func mock()
    var Int name
; @ eg te6
func name()
func mock()
    var Int name
; @ eg te7
struct Test
    var Int x(1)
; @ ec te8
new
; @ ec te9
var Array{i:Int} error
; @ ec te10
var Int error--name
; @@ test-initialize
; @ c t0
t := Test(copy i)
; @ c t1
str := String{arr[0]}()
; @ c t2
arr := Array{arr[0]:Int}()
; @ c t3
owner Array{Test} a(owner Array{arr[0]:Test}())
; @ c t4
owner Array{String} sa(owner Array{arr[0]:String{arr[1]}}())
; @ c t5
var Int x(copy arr[0])
; @ c t6
user String s(user str)
; @ c t7
var String{12} s(user "some string")
; @ c t8
new String{i} s(user str)
; @ c t9
user Test tt(user tc)
; @ c t10
var Test tt(copy 3)
; @ c t11
new Test tt(copy 3)
; @ c t12
t := Test(copy 3)
; @ c t13
user Tb tt(user tb)
; @ c t14
owner Ta ota(owner tb)
; @ ec te0
Int()
; @ ec te1
var String s
; @ ec te2
var Array{4:String} sa
; @ ec te3
new String s
; @ ec te4
String()
; @ ec te5
user Array a
; @ ec te6
new Array a
; @ ec te7
Array()
; @ ec te8
var Array{23} a
; @ ec te9
var Array{1:Array{2:Int}} a
; @ ec te10
var Array{1
; @ ec te11
var String{12
; @ ec te12
var Array{error:Int} a
; @ ec te13
var Array{"12":Int} a
; @ ec te14
user Int x
; @ ec te15
new Int x
; @ ec te16
var Array{4:Int} a(copy 1)
; @ ec te17
var Bool x(var 1)
; @ ec te18
var Int x(var 1, var 2)
; @ eg te19
struct Test
    var Int x
func mock()
    Test(copy 1)
; @ ec te20
var Int x(user 3)
; @ ec te21
owner String s(user so)
; @ ec te22
owner String s(owner str)
; @ ec te23
var Array{1:Int:Int} a
; @ ec te24
owner Test ot(owner tb)
; @@ test-comment
; @ c t0
; comment

var Int x
; @ c t1
~~~ documemtation ~~~

var Int x
; @ c t2
[; multi 
line 
comment ;]

var Int x
; @ c t3
~~~ multi 
line 
documemtation
~~~

var Int x
; @@ test-if-else
; @ c t0
if t.num > 3
    i -= 2
; @ c t1
if i > 3
    i -= 2
else
    i += 1
; @ c t2
if i > 3
    i -= 3
else-if t.num > 2
    i -= 2
else-if t.num > 1
    i -= 1
else
    i += 1
; @ c t3
if b
    return
i := 3
; @ c t4
if b and
        b
    i += 1
; @ c t5
if b
    var String{4} sa
    if b
        var String{4} sb
    else-if b
        var String{4} sc
    else
        var String{4} sd
else-if b
    var String{4} se
else
    var String{4} sf
; @ ec te0
if 3
; @ ec te1
if b
    error
; @ ec te2
if b
    i := 0
else
    error
; @ ec te3
if b
    i := 0
else-if b
    error
; @ ec te4
if b
    return
    i := 3
; @ ec te5
if()
; @ ec te6
else
; @ ec te7
if false
    ; ...
else 
; @ ec te8
else-if
; @ ec te9
if false
    ; ...
else-if()
; @ feg te10
func error()
    if b
; @@ test-do-loop
; @ c t0
do
    var Int x
; @ c t1
do
    break
; @ c t2
do
    while t.num > 3
; @ c t3
do
    continue
; @ c t4
do
    if true
        while false
; @ c t5
do
    var String{4} sa
    while b
    break
    continue
    if b
        return
    do
        var String{4} sb
        while b
        break
        continue
        if b
            return
        do
            var String{4} sc
            while b
            break
            continue
            if b
                return
; @ ec te0
do(
; @ ec te1
while true
; @ ec te2
continue
; @ ec te3
do
    while 2
; @ ec te4
do
    error
; @ ec te5
do
    var Int error
do
    var Int error
; @ ec te6
do
    while i := 3
; @ ec te7
do
    while
; @ ec te8
do
    continue error
; @ ec te9
break
; @ ec te10
do
    break error
; @@ test-for-loop
; @ c t0
for n in 5
    i += n
; @ c t1
for n in t.num:str.length + 2
    i += n
; @ c t2
for ch in str
    c := ch
; @ c t3
for n in arr
    i += n
; @ c t4
for s in sarr
    s.clear()
; @ c t5
var Int n
for n in 5
    i += n
; @ c t6
for n in 5
    i += n
for n in 7
    i += n
; @ c t7
for n in 1 +
        2
    i += n
; @ c t8
for n in 6
    var String{4} sa
    break
    continue
    if b
        return
    for ch in str
        var String{4} sb
        break
        continue
        if b
            return
; @ ec te0
for(
; @ ec te1
for n
; @ ec te2
for n error
; @ ec te3
for n in fun0()
; @ ec te4
for n in str:8
; @ ec te5
for n in 5
    error
; @ ec te6
for n in arr
    i += n
for n in sarr
; @@ test-testing
; @ c ta0
assert t.num = 2
; @ c ta1
assert-error t.num
; @ c ta2
assert-error fun0()
; @ c ta3
assert-error t.num, "expected error"
; @ c ta4
assert-error fun0(), "expected error in the function"
; @ c ta5
assert-error t.num,
        "expected error in new line"
; @ c ta6
if b
    var String{4} s
    assert b
    assert-error s[1:2]
    do
        assert-error s[1:2]
; @ g tm0
func fun()
    fun()
mock fun()
    raise
; @ g tm1
mock fun()
func fun()
    fun()
; @ g tm2
mock Test.meth(copy Int x)
struct Test
    var Int x
    func meth(copy Int x)
        self.meth(copy x)
; @ g tm3
mock Test.meth(copy Int x)
class Test
    var Int x
    func dynamic meth(copy Int x)
        self.meth(copy x)
; @ g tm4
func fun(copy Int x)->(var Int y)
mock fun(copy Int x)->(var Int y)
    fun.mocked(copy x)->(var y)
    fun.active := false
    fun(copy x)->(var y)
    fun.active := true
; @ g tm5
struct Test
    var Int x
    func meth(copy Int x)->(var Int y)
        self.meth(copy x)->(var y)
mock Test.meth(copy Int x)->(var Int y)
    self.meth.mocked(copy x)->(var y)
    Test.meth.mocked(user self, copy x)->(var y)
    self.meth.active := false
    Test.meth(user self, copy x)->(var y)
    Test.meth.active := true
; @ g tm6
class Test
    var Int x
    func dynamic meth(copy Int x)->(var Int y)
        self.meth(copy x)->(var y)
mock Test.meth(copy Int x)->(var Int y)
    Test.meth.mocked(user self, copy x)->(var y)
    Test.meth.active := false
    Test.meth(user self, copy x)->(var y)
    Test.meth.active := true
; @ g tm7
func fun()
    sys.print(user "mock print")
    sys.print.mocked(user "really print")
    Sys.print.active := false
    sys.print.active := true
mock Sys.print(user String text)
; @ tg tt0
func fun0()
    var Int x(copy 4)
    x += 1
    var Int y(copy 5)
    y := x
    if y > 3
        y := 3
    else-if y < 0
        y := 0
    else
        y += 1
    try
        x := 0
        sys.print(user _)
        y := 0
    catch
        x := 1
        x := 2
    if x > 3
        return
    else
        raise
    do
        while x > 1
        if x = 5
            continue
    for n in 3
        x += y
; @-
module ut
func fun1()
    fun0()
test fun2()
    fun1()
; @ tg tt1
func fun()
    var Int x
main
; @-
module second
test fun0()
test fun1()
; @ g tmg0
mock Test.delete()
    var Ref r(copy self)
struct Test
    weak String s
; @ g tmg1
mock delete()
    var Ref r(copy self)
main
; @ g tmg2
mock new()->(var Bool allocate-success)
    allocate-success := false
main
; @ c tr0
var Ref r
; @ c tr1
var Ref r
r := str
; @ c tr2
var Ref r
r := _
; @ c tr3
var Ref r(copy str)
; @ c tr4
var Ref r
assert r is r
; @ ec te0
assert 3
; @ ec te1
assert error
; @ ec te2
assert-error error
; @ eg te3
test fun(copy Int x)
; @ eg te4
test fun()->(copy Int x)
; @ eg te5
mock error()
; @ eg te6
mock Error.fun()
; @ eg te7
struct Test
    var Int x
mock Test.error()
; @ eg te8
mock fun(owner String s)
func fun(user String s)
; @ eg te9
mock fun(user Int s)
func fun(user String s)
; @ eg te10
mock fun(user Array{Char} a)
func fun(user Array{Int} a)
; @ ec te11
assert
; @ ec te12
assert-error
; @ eg te13
mock()
; @ eg te14
func fun()
mock fun()
mock fun()
; @ eg te15
struct Test
    var Int x
    func fun()
mock Test.fun()
mock Test.fun()
; @ eg te16
mock delete()
mock delete()
; @ eg te17
struct Test
    var Int x
mock Test.delete()
mock Test.delete()
; @ ec te18
assert-error t.num , "error"
; @ ec te19
assert-error t.num,"error"
; @ ec te19-copy
assert-error t.num,"error"
; @ ec te20
assert-error t.num,  "error"
; @ ec te21
assert-error t.num, error
; @ eg te22
mock new()->(var Bool res)
mock new()->(var Bool res)
; @ eg te23
mock new()->(var Int x)
; @ eg te24
mock new()
; @ eg te25
mock new(copy Int x)->(var Bool res)
; @ eg te26
mock new()->(var Bool res, var Int x)
; @ eg te27
mock delete(copy Int x)
; @ eg te28
mock delete()->(copy Int x)
; @ eg te29
func fun()
mock fun()
    fun.error
; @ eg te30
class Test
    var Int x
    func dynamic meth()
mock Test.meth()
    self.meth.mocked()
; @ eg te31
test
; @@ test-native
; @ g tf0
native func external()
func call()
    external()
; @ g tf1
class Test
    var Int x
    func dynamic meth()
native func external(copy Int i, user String s, user Test ta)->(var Int io)
func call()
    var Int i
    user String s
    user Test ta
    external(copy 5, user s, user ta)->(var i)
; @ g tv0
native var Int x
func use()
    x := 2
; @ g tt0
native type Native
native func external(copy Native n)->(var Native no)
; @ eg te0
native()
; @ eg te1
native error
; @ eg te2
native error 
; @ eg tef1
native func error(owner String s)
; @ eg tef2
native func error()->(user String s)
; @ eg tef3
native func error()->(owner String s)
; @ eg tef4
native func error()
native func error()
; @ eg tev3
native var String s
; @@ test-parameter-type
; @ g t0
struct Test{Generic}
    weak Generic item
    weak Array{Generic} arr
    func set(weak Generic item, weak Array{Generic} arr)
        weak Generic x(weak item)
        self.item := x
        self.arr := arr
        new Test{Generic} t
        t.item := self.item
        self.item := t.item
; @ g t1
struct Test{Generic}
    owner Generic item
    func get()->(user Generic item)
        item := self.item
; @ g t2
struct Test{First:Second:Third}
    weak First first
    weak Second second
    weak Third third
    func set(weak First first, weak Second second, weak Third third)
        self.first := first
        self.second := second
        self.third := third
func use(weak String first, weak Sys second, weak File third)
    var Test{String:Sys:File} t
    t.first := first
    t.second := second
    t.third := third
    t.set(weak first, weak second, weak third)
; @ g t3
struct Base
    var Int x
struct Test{Generic}(Base)
; @ c t4
d.item := str
; @ c t5
str := d.item
; @ c t6
d.arr := sarr
; @ c t7
str := d.arr[4]
; @ c t8
var Array{5:Data{String}} ad
str := ad[2].item
; @ c t9
var Array{5:Data{String}} ad
str := ad[2].arr[3]
; @ c t10
d.set(owner _, user _)
; @ c t11
var Data{Data{Data{String}}} dr
str := dr.item.item.item
; @ c t12
d.set(owner so, user sarr)
; @ c t13
d.get()->(weak str)
d.get().clear()
; @ c t14
var Data dg
; @ c t15
user Data dg(user d)
; @ c t16
Data{String}.set(user d, owner so, user sarr)
; @ g t17
struct Test{Generic}
    weak Test{Generic} next
    func meth(weak Test{Generic} next)->(user Test{Generic} out)
        self.next := next
        out := self
; @ c t18
var Data{Tb} dt
dt.item := tc
ta := dt.item
owner Tc otc
dt.set(owner otc, user _)
dt.get()->(weak ta)
i := dt.get().numa
fun7(weak dt.item)->(weak dt.item)
user Tb tb2(user dt.item)
tb2 := dt.item
; @ g t19
struct Base{Generic}
    weak Generic item
    func get()->(weak Generic item)
struct Test(Base{String})
    func set(weak String text)
        self.item := text
        self.get()->(weak text)
func fun(user Test test, weak String text)
    test.item := text
    test.set(weak text)
    text := test.item
    test.get()->(weak text)
    test.get().clear()
; @ g t20
class Base{Param}
    weak Param item
    func dynamic set(weak Param item)
    func dynamic get()->(weak Param item)
class Test{Generic}(Base{Generic})
    func dynamic set(weak Generic item)
    func dynamic get()->(weak Generic item)
func mock(user Test{String} test, weak String text)
    test.set(weak text)
    test.get()->(weak text)
    test.get().clear()
; @ g t21
struct Test{Param}
    weak Param item
    func meth(weak Param in)->(weak Param out) _
func Test.meth(weak Param in)->(weak Param out)
    weak Param p(weak in)
    out := p
    self.item := p
    self.meth(weak p)->(weak p)
; @ eg teg0
struct Test{First:Second:Third
; @ eg teg1
struct Test{Generic}
    var Generic error
; @ eg teg2
struct Test{Generic}
    weak Generic item
    func meth(copy Generic error)
; @ eg teg3
struct Test{Generic}
    weak Generic item
    func meth(weak String s)
        self.item := s
; @ eg teg4
struct Test{Generic}
    weak Generic item
    func meth(user String s)
        s := self.item
; @ eg teg5
struct Test{Generic}
    weak Generic item
    func meth()
        var Generic error
; @ eg teg6
struct Test{First:Second}
    weak First first
    weak Second second
    func meth()
        self.first := self.second
; @ eg teg7
struct Test{error}
    var Int x
; @ eg teg8
struct Test{Generic}
    weak Array{Generic} arr
    func meth()
        user Generic x
        x := self.arr[2]
; @ eg teg9
struct Test{Generic}
    weak Array{Generic} arr
    func meth()
        var Array{12:Generic} arr
; @ eg teg10
struct Test{Generic}
    weak Array{Generic} arr
    func meth()
        self.arr := Array{12:Generic}()
; @ eg teg11
struct Test{First:Second:Third}
    weak First first
    weak Second second
    weak Third third
func meth(user Test{String:String} t)
    user Test{String:String:String} error(user t)
; @ eg teg12
struct Base{Param}
    weak Param item
struct Error(Base)
; @ eg teg13
struct Base
    weak Int x
struct Error(Base{String})
; @ eg teg14
struct Base{Param}
    weak Param item
struct Error(Base{String:String})
; @ eg teg15
struct Base{Param0:Param1}
    weak Param0 item0
    weak Param1 item1
struct Error(Base{String})
; @ ec tec0
var Data{Int} error
; @ ec tec1
var Data{String:String} error
; @ ec tec2
var Data{Error} error
; @ ec tec3
var Char{String} error
; @ ec tec4
var Data dg
str := dg.item
; @ ec tec5
var Data dg
d := dg
; @ ec tec6
t := d.item
; @ ec tec7
var Data{Array{Int}} error
; @@ test-parameter-inheritance
; @ g t0
struct Base{Generic}
    weak Generic item
struct Test(Base{String})
    func set(weak String s)
        self.item := s
        Test.set(user Test(), weak s)
func use(weak String s)
    var Test t
    t.item := s
; @ g t1
struct Base{Generic}
    weak Generic item
struct Test{Param}(Base{Param})
    func set(weak Param i, weak String s)
        self.item := i
        Test{String}.set(user Test{String}(), weak s, weak s)
func use(weak String s)
    var Test{String} t
    t.item := s
; @ g t2
struct Base{Pbase}
    weak Pbase item
    func set(weak Pbase i)
struct Mid{Pmid}(Base{Pmid})
    func set(weak Pmid i)
struct Top(Mid{String})
    func set(weak String s)
        base(weak s)
        self.item := s
struct Test(Top)
    func set(weak String s)
        base(weak s)
        self.item := s
        Top.set(user Top(), weak s)
        Test.set(user Test(), weak s)
        Mid{String}.set(user Top(), weak s)
func use(weak String s)
    var Test t
    t.item := s
; @ g t3
struct Base{Generic}
    weak Generic item
struct Test{Generic}(Base{Generic})
    func set(weak Generic i, weak String s)
        self.item := i
        Test{String}.set(user Test{String}(), weak s, weak s)
func use(weak String s)
    var Test{String} t
    t.item := s
; @ g t4
struct Base{First:Second}
    weak First first
    weak Second second
struct Mid{Param:Third}(Base{Param:Sys})
    weak Third third
    func set(weak Param first, weak Sys second, weak Third third)
        self.first := first
        self.second := second
        self.third := third
struct Top{Generic}(Mid{Generic:File})
    func set(weak Generic first, weak Sys second, weak File third)
        self.first := first
        self.second := second
        self.third := third
struct Test(Top{String})
    func set(weak String first, weak Sys second, weak File third)
        self.first := first
        self.second := second
        self.third := third
func use(weak String first, weak Sys second, weak File third)
    var Test t
    t.first := first
    t.second := second
    t.third := third
; @ g t5
struct First{FirstGeneric}
    weak FirstGeneric item
struct Second{SecondGeneric}
    weak SecondGeneric item
struct Test{Generic}(First{Second{Generic}})
    func set(weak Generic g, weak Second{Generic} sg)
        self.item := sg
        self.item.item := g
func use(weak String s, weak Second{String} ss)
    var Test{String} t
    t.item := ss
    t.item.item := s
; @ g t6
struct BaseGen{FirstGeneric}
    weak FirstGeneric item
struct TestGen{SecondGeneric}(BaseGen{SecondGeneric})
struct Base
    var Int x
struct Test(Base)
func test()
    user BaseGen{Base} bb
    user BaseGen{Test} bt
    user TestGen{Base} tb
    user TestGen{Test} tt
    bb := tb
    bt := tt
    bb := bt
    tb := tt
    bb := tt
; @ eg te0
struct Base{Generic}
    weak Generic item
struct Test{Param}(Base{Param})
    weak Generic error
; @ eg te1
struct Base{Generic}
    weak Generic item
struct Test(Base{String})
    func set(weak File error)
        self.item := error
; @ eg te2
struct Base{Generic}
    weak Generic item
struct Test{Param}(Base{Param})
    func set(weak String error)
        self.item := error
; @ eg te3
struct Base{Pbase}
    weak Pbase item
struct Mid{Pmid}(Base{Pmid})
struct Top(Mid{String})
struct Test(Top)
    func set(weak File error)
        self.item := error
; @@ test-error-handling
; @ c t0
try
    t.num := 1
    fun0()
catch
    i := t.num
    fun4(copy 2)
; @ c t1
try
    t.num := 1
    fun0()
; @ c t2
try
    t.num := 1
    try
        fun0()
    catch
        fun4(copy 2)
catch
    try
        i := arr[3]
    catch
        i := t.num
; @ c t3
try
    var String{4} sa
    try
        var String{4} sb
    catch
        var String{4} sc
catch
    var String{4} sd
    try
        var String{4} se
    catch
        var String{4} sf
; @ ec te0
try()
; @ ec te1
catch
; @ ec te2
try
catch()
; @ ec te3
try
; @ ec te4
try
    i := 1
catch
; @ ec te5
try
    i := 1
i := 2
catch
    i := 3
; @@ test-for-each
; @ g t0
struct TestIterator
    var Int counter
    new(copy Int count)
    func has()->(var Bool has-data)
    func get()->(var Int num)
    func next()
func fun()->(var Int i)
    for n in TestIterator(copy 6)
        var String{4} s
        i := n
; @ g t1
struct TestIterator
    weak String value
    func has()->(var Bool has-data)
    func get()->(user String text)
    func next()
func fun(user TestIterator iter)->(user String s)
    for t in iter
        s := t
; @ g t2
struct TestIterator{Generic}
    weak Generic item
    func has()->(var Bool has-data)
    func get()->(user Generic item)
    func next()
class Test
    var Int x
    func dynamic fun()
func fun(user TestIterator{String} siter, user TestIterator{Test} titer)->(
        user String os, user Test ot)
    for s in siter
        os := s
    for t in titer
        ot := t
; @ g t3
class TestIterator{Generic}
    weak Generic item
    func dynamic has()->(var Bool has-data)
    func dynamic get()->(user Generic item)
    func dynamic next()
func f-mock(user TestIterator{String} iter)->(user String s)
    for t in iter
        s := t
; @ eg te0
struct TestIterator
    var Int num
    func get()->(var Int num)
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te1
struct TestIterator
    var Int num
    func has(copy Int x)->(var Bool has-data)
    func get()->(var Int num)
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te2
struct TestIterator
    var Int num
    func has()
    func get()->(var Int num)
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te3
struct TestIterator
    var Int num
    func has()->(var Bool has-data, var Int x)
    func get()->(var Int num)
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te4
struct TestIterator
    var Int num
    func has()->(var Int x)
    func get()->(var Int num)
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te5
struct TestIterator
    var Int num
    func has()->(var Bool has-data)
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te6
struct TestIterator
    var Int num
    func has()->(var Bool has-data)
    func get(user Int x)->(var Int num)
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te7
struct TestIterator
    var Int num
    func has()->(var Bool has-data)
    func get()
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te8
struct TestIterator
    var Int num
    func has()->(var Bool has-data)
    func get()->(var Int num, var Int x)
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te9
struct TestIterator
    var Int num
    func has()->(var Bool has-data)
    func get()->(owner String s)
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te10
struct TestIterator
    var Int num
    func has()->(var Bool has-data)
    func get()->(weak String s)
    func next()
func f-mock()
    for n in TestIterator()
; @ eg te11
struct TestIterator
    var Int num
    func has()->(var Bool has-data)
    func get()->(var Int num)
func f-mock()
    for n in TestIterator()
; @ eg te12
struct TestIterator
    var Int num
    func has()->(var Bool has-data)
    func get()->(var Int num)
    func next(user Int x)
func f-mock()
    for n in TestIterator()
; @ eg te13
struct TestIterator
    var Int num
    func has()->(var Bool has-data)
    func get()->(var Int num)
    func next()->(var Int x)
func f-mock()
    for n in TestIterator()
; @@ test-complex-fields
; @ g t0
struct Test
    var Bstruct b
    func test()
        weak Bstruct b(weak self.b)
        b := self.b
        self.b.meth()
        Bstruct.meth(user self.b)
        user Bstruct b2(user self.b.b)
        b2 := self.b.b
        self.b.b.meth()
        self.b.b := b
        Bstruct.meth(user self.b.b)
        var Test t
        self.b.x := 5
        Astruct.meth(user self.b)
        if self.b is b or b2 is-not self.b
class Astruct
    var Int x
    func dynamic meth()
class Bstruct(Astruct)
    weak Bstruct b
    func dynamic meth()
; @ eg te0
struct Test
    var String{12} error
; @ eg te1
struct Test
    var Array{12:Int} error
; @ eg te2
struct Test
    var Test error
; @ eg te3
struct Test
    var Base error
struct Base
    var Test t
; @ eg te4
struct Abase
    var Berror b
struct Aerror(Abase)
struct Bbase
    var Aerror a
struct Berror(Bbase)
; @ eg te5
struct Base
    var Int x
struct Test
    var Base b
    func test(user Base b)
        self.b := b
; @ eg te6
struct Base
    var Int x
struct Test
    var Base b
    func error()
        assert self.b?
; @@ test-enum
; @ g t0
enum MyEnum
    VALUE
    ANOTHER-VALUE
    LAST-VALUE
func dummy()
    var Int x(copy MyEnum.VALUE)
    x += MyEnum.ANOTHER-VALUE
    x -= MyEnum.length
; @ g t1
enum MyEnum
    VALUE
    ANOTHER-VALUE
    LAST-VALUE
var Array{MyEnum.length:Int} arr
; @ eg te0
enum MyEnum
    VALUE
func dummy()
    var Int x(copy MyEnum.ERROR)
; @ ec te1
i := Error.VALUE
; @ eg te2
enum MyEnum
    VALUE
func dummy()
    var Int x(copy MyEnum.error)
; @ eg te3
enum My-Enum
; @ eg te4
enum MyEnum
    Error
; @ eg te5
enum MyEnum
    ERRoR
; @ eg te6
enum
; @ eg te7
enum MyEnum
    VALUE(0)
; @ eg te8
enum MyEnum
; @ eg te9
enum MyEnum
        VALUE
; @ eg te10
enum Error
    VALUE
enum Error
; @ eg te11
struct Error
    var Int x
enum Error
; @ eg te12
enum Error
    VALUE
struct Error
    var Int x
; @@ test-constant
; @ g t0
const Int NUMBER 12
; @ g t1
const Int SIZE 12
var Array{SIZE + 3:Int} arr
; @ g t2
const Int LARGE - (2 * SMALL) + 1
const Int SMALL 7
; @ eg te0
const
; @ eg te1
const Bool
; @ eg te2
const Int
; @ eg te3
const Int Error
; @ eg te4
const Int ERROR
; @ eg te5
const Int NAME false
; @ eg te6
var Int x
const Int NAME x
; @ eg te7
const Int ERROR ERROR + 1
; @ eg te8
const Int A-ERROR B-ERROR
const Int B-ERROR - (2 * A-ERROR) + 1
; @ eg te9
const Int NUMBER 12
func dummy()
    NUMBER := 3
; @ eg te10
const Int NUMBER 12
func dummy()->(var Int x)
    dummy()->(var NUMBER)
; @@ test-module
; @ tg t0
enum Enum
    VALUE
const Int SIZE 12
struct Test
    var Int x
    func meth()
var Test t
func fun()
    t.x := Enum.VALUE + SIZE
    fun()
    Test.meth(user t)
    second.t.x := second.Enum.VALUE + second.SIZE
    second.fun()
    second.Test.meth(user second.t)
    new second.Test nt
; @-
module second
enum Enum
    VALUE
const Int SIZE 12
struct Test(ut.Test)
    func meth()
var Test t
func fun()
    t.x := Enum.VALUE + SIZE
    fun()
    Test.meth(user t)
    ut.t.x := ut.Enum.VALUE + ut.SIZE
    ut.fun()
    ut.Test.meth(user ut.t)
    new ut.Test nt
test dummy()
; @ tg t1
func fun()
struct Test
    var Int x
    func meth()
        fun()
        self.meth()
; @-
module second
mock ut.fun()
mock ut.Test.meth()
test dummy()
; @ tg t2
native type Native
native var Int x
native func external()
func fun()
    x := 0
; @-
module second
test use()
    var Native n
    x := 2
    external()
; @ ec te0
ut.error
; @ eg te1
var Int ut
; @ eg te2
func ut()
; @ eg te3
var error.Test x
; @ eg te4
var ut.Error x
; @ etg te5
; nothing
; @-
module(error)
; @ etg te6
; @-
module Error
; @ etg te7
; @-
module true
; @ etg te8
; @-
module file-open-read
; @ etg te9
; @-
func fun()
; @ ec te10
fun0().Error
; @ ec te11
i.Error
; @ ec te12
ut.Error.VALUE
; @@ test-memory
; @ g to0
struct Test
    owner String s
func use(user String s)
func take(owner String s)
func fun(owner String s, user Test tu, owner Test to)
    s := _
    s := String{12}()
    s.clear()
    to.s := String{12}()
    user String su(user tu.s)
    use(user tu.s)
    take(owner to.s)
    var Array{12:Int} arr
    arr[4] := arr[8]
; @ g tu0
func deleting()->(owner String s)
    s := _
func fun(user String s)->(owner String so)
    s.clear()
    deleting()->(owner so)
; @ g tu1
func deleting()->(strong String s)
    s := _
func fun()
    new String{12} so
    user String s(user so)
    s.clear()
    deleting()->(strong so)
; @ g tu2
func deleting()->(strong String s)
    s := _
func fun()
    new String{12} so
    weak String s(weak so)
    deleting()->(strong so)
    s.clear()
; @ eg teo0
struct Test
    owner String s
func fun(user Test t)
    t.s := String{12}()
; @ eg teo1
struct Aa
    var Int x
struct Bb
    owner Aa a
func fun(user Bb b)
    owner Aa a(owner b.a)
; @ eg teo2
struct Aa
    var Int x
struct Bb
    owner Aa a
func take(owner Aa a)
func fun(user Bb b)
    take(owner b.a)
; @ eg teo3
struct Aa
    owner String s
struct Bb
    weak Aa a
func fun(owner Array{Bb} b)
    b[3].a.s := _
; @ eg teo4
struct Test
    owner String s
func get-user()->(user Test t)
func fun()
    user Test t
    get-user()->(user t).s := _
; @ eg teo5
struct Test
    owner String s
func get-user()->(user Test t)
func fun()
    get-user().s := _
; @ eg teu0
func deleting()->(owner String s)
    s := _
func fun(user String s)
    deleting()
    s.clear()
; @ eg teu1
func deleting()->(owner String s)
    s := _
func fun()->(user String s-out)
    owner String so(owner String{12}())
    user String s(user so)
    deleting()->(owner so)
    s-out := s
; @ eg teu2
func deleting()->(owner String s)
    s := _
func fun(user String s)->(var Int x)
    deleting()
    x := s.length
; @ eg teu3
func deleting()->(owner String s)
    s := _
func fun(user String s)
    deleting()
    String.clear(user s)
; @ eg teu4
func deleting()->(owner String s)
    s := _
func fun(user String s)->(var Bool b)
    deleting()
    b := not (false or s.length > 3)
; @ eg teu5
func deleting()->(owner String s)
    s := _
func fun(user String s)->(var Char c)
    deleting()
    c := s[2]
; @ eg teu6
func deleting()->(owner String s)
    s := _
func proxy()
    deleting()
func fun(user String s)
    proxy()
    s.clear()
; @ eg teu7
func deleting()->(owner String s)
    proxy()
    s := _
func proxy()
    deleting()
func fun(user String s)
    proxy()
    s.clear()
; @ eg teu8
struct Test
    var Int x
    func deleting()->(owner String s)
        s := _
    func fun(user String s)
        self.deleting()
        s.clear()
; @ ec tec0
str := str
; @ eg tec1
struct Error
    user String s
; @

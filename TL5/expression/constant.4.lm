~~~ TL5 compiler - Constant expressions ~~~
module tl5-compiler

~~~ Return whether `text` is a number of base with given `top-digit` ~~~
func is-number(user String text, copy Char top-digit)->(var Bool is-number)
  is-number := true
  for n in text.length
    var Char ch(copy text[n])
    if ch < '0' or ch > top-digit
      is-number := false
      return

~~~ Return whether `text` is a binary number ~~~
func is-binary(user String text)->(var Bool is-octal)
  is-number(user text, copy '1')->(var is-octal)

~~~ Return whether `text` is an octal number ~~~
func is-octal(user String text)->(var Bool is-octal)
  is-number(user text, copy '7')->(var is-octal)

~~~ Return whether `text` is a decimal number ~~~
func is-decimal(user String text)->(var Bool is-octal)
  is-number(user text, copy '9')->(var is-octal)

~~~ Return whether `text` is a hexadecimal number ~~~
func is-hex(user String text)->(var Bool is-hex)
  is-hex := true
  for n in text.length
    var Char ch(copy text[n])
    if (ch < '0' or ch > '9') and (ch < 'a' or ch > 'f') and
        (ch < 'A' or ch > 'F')
      is-hex := false
      return


~~~ A basic expression that has a single textual value ~~~
class TextExpression(Expression)
  owner String text
  
  func dynamic write()
    write(user self.text)


~~~ Constant integer expression ~~~
class IntExpression(TextExpression)
  func inst parse-new(owner String text)->(owner Expression expression)
    new IntExpression int-expression
    int-expression.parse(owner text)
    expression := int-expression
  
  ~~~ parsing `123` or `-123` or `0b0012` or `0x3d4f` ~~~
  func inst parse(owner String text)
    self.set-location()
    user String number(user text)
    if number[0] = '-'
      number := number[1:number.length - 1]
    if number[0] = '0' and number.length > 1
      var Char second(copy number[1])
      if second >= '0' and second <= '7'
        if not is-octal(user number)
          self.syntax-error(user "illegal octal number", user text)
      else
        number := number[2:number.length - 2]
        if second = 'b' or second = 'B'
          if not is-binary(user number)
            self.syntax-error(user "illegal binary number", user text)
          self.syntax-error(
              user "binary numbers not supported yet...", user text)
        else-if second = 'x' or second = 'X'
          if not is-hex(user number)
            self.syntax-error(user "illegal hexadecimal number", user text)
        else
          self.syntax-error(user "illegal number", user text)
    else-if not is-decimal(user number)
      self.syntax-error(user "illegal number", user text)
    self.set-simple-type(user glob.type-int)
    self.access := Access.VAR
    self.text := text
    self.constant := true


~~~ Constant character expression ~~~
class CharExpression(TextExpression)
  func inst parse-new(owner String text)->(owner Expression expression)
    new CharExpression char-expression
    char-expression.parse(owner text)
    expression := char-expression
  
  ~~~ parsing `'a'` or `'\n'` or `'\xf5'` or `'\270'` ~~~
  func inst parse(owner String text)
    self.set-location()
    var Char ch
    if text.length = 3
      ch := text[1]
      if ch = '\'' or ch = '\\'
        self.syntax-error(user "illegal character constant", user text)
    else-if text.length = 4
      if text[1] != '\\'
        self.syntax-error(user "illegal character constant", user text)
      if not "'\"?\\abfnrtv0".has(copy text[2])
        self.syntax-error(user "illegal character constant", user text)
    else-if text.length = 6
      if text[1] != '\\'
        self.syntax-error(user "illegal character constant", user text)
      ch := text[2]
      if ch = 'x'
        if not is-hex(user text[3:2])
          self.syntax-error(user "illegal character constant", user text)
      else
        if not is-octal(user text[2:3])
          self.syntax-error(user "illegal character constant", user text)
    else
      self.syntax-error(user "illegal character constant", user text)
    if text[text.length - 1] != '\''
      self.syntax-error(user "illegal character constant", user text)
    self.set-simple-type(user glob.type-char)
    self.access := Access.VAR
    self.text := text


~~~ Constant string expression ~~~
class StringExpression(TextExpression)
  owner SymbolExpression symbol
  
  func inst parse-new(owner String text, user SyntaxTreeCode code-node)->(
      owner Expression expression)
    new StringExpression string-expression
    string-expression.parse(owner text, user code-node)
    expression := string-expression
  
  ~~~ parsing `"some string"` ~~~
  func inst parse(owner String text, user SyntaxTreeCode code-node)
    self.code-node := code-node
    self.set-location()
    self.check-string(user text)
    self.set-simple-type(user glob.type-string)
    self.access := Access.VAR
    self.text := text
    self.strip-multilines()
  
  func inst strip-multilines()
    var Int index-write(copy 1)
    for index-read in 1:self.text.length - 1
      if self.text[index-read] = '\n'
        var Bool skip-new-line
        if index-read > 0
          skip-new-line := self.text[index-read - 1] = '\\'
        var Int expected(copy self.code-node.parent.indentation-spaces + 4)
        var Int indentation
        do
          index-read += 1
          while index-read < self.text.length - 1
          while self.text[index-read] = ' '
          indentation += 1
          while indentation < expected
        if indentation < expected
          self.code-node.syntax-error-indentation(
              copy indentation, copy expected)
        if skip-new-line
          index-write -= 1
        else
          self.text[index-write] := '\\'
          index-write += 1
          self.text[index-write] := 'n'
          index-write += 1
      else
        self.text[index-write] := self.text[index-read]
        index-write += 1
    if index-write < self.text.length - 1
      self.text[index-write] := '"'
      index-write += 1
      self.text[index-write] := '\0'
      self.text.length := index-write
  
  func dynamic analyze()
    self.add-aux-variable(copy Access.VAR, copy false, user self.result-type)->(
        owner self.symbol)
  
  func dynamic write-preactions()
    ; `symbol`_Var.max_length = `string-length + 1`;
    ; `symbol`_Var.length = `string-length`;
    ; `symbol`_Var.values = "`text`";
    self.write-init-var-ref(user self.symbol)
    self.write-refman-init(user self.symbol)
    var Int real-length(copy 1)
    for index in 1:self.text.length - 1
      if self.text[index] = '\\'
        index += 1
      real-length := real-length + 1
    self.code-node.write-spaces()
    self.symbol.write()
    write(user "_Var.max_length = ")
    write-int(copy real-length)
    write(user ";\n")
    self.code-node.write-spaces()
    self.symbol.write()
    write(user "_Var.length = ")
    write-int(copy real-length - 1)
    write(user ";\n")
    self.code-node.write-spaces()
    self.symbol.write()
    write(user "_Var.values = ")
    write(user self.text)
    write(user ";\n")
    self.code-node.write-spaces()
  
  func dynamic write()
    self.symbol.write()


~~~ Constant empty expression `_` ~~~
class EmptyExpression(Expression)
  func inst parse-new(owner String text)->(owner Expression expression)
    new EmptyExpression empty-expression
    empty-expression.init()
    expression := empty-expression
  
  func inst init()
    self.set-location()
    self.set-simple-type(user glob.type-empty)
    self.access := Access.OWNER
  
  func dynamic write()
    write(user "NULL")
  
  func dynamic write-dynamic()
    self.write()
  
  func dynamic write-refman()
    self.write()

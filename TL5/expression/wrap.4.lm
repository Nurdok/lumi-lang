~~~ TL5 compiler - Wrap expressions ~~~
module tl5-compiler


class WrapExpression(Expression)
  owner Expression expression

  new(user SyntaxTreeCode code-node, owner Expression expression)
    base(user code-node)
    self.expression := expression
    self.access := self.expression.access
    self.assignable := self.expression.assignable
    self.expression.result-type.copy-new()->(owner self.result-type)

  func dynamic analyze()
    self.expression.analyze()

  func dynamic check-memory(user ReferenceMemoryList refs)
    self.expression.check-memory(user refs)

  func dynamic write-preactions()
    self.expression.write-preactions()

  func dynamic write()
    self.expression.write()
  
  func dynamic write-refman()
    self.expression.write-refman()


class TypeCastExpression(WrapExpression)
  new(user SyntaxTreeCode code-node, owner Expression expression)
    base(user code-node, owner expression)
    self.is-generic-cast := true

  func dynamic write-safe()
    write(user "((")
    self.result-type.type-data.write-cname()
    write(user "*)(")
    self.expression.write()
    write(user "))")

  func dynamic write-dynamic()
    self.expression.write-dynamic-safe()

  func dynamic write-dynamic-cast()
    write(user "((")
    self.result-type.type-data.write-cname()
    write(user "_Dynamic*)(")
    self.expression.write-dynamic()
    write(user "))")


~~~ Up-cast expression ~~~
class UpCastExpression(WrapExpression)
  var Int bases
  
  func inst init-new(copy Int bases)->(owner Expression expression)
    expression := UpCastExpression(owner expression, copy bases)
  
  new(owner Expression expression, copy Int bases)
    base(user expression.code-node, owner expression)
    self.bases := bases
  
  func dynamic write()
    ; &(`expression`->_base[._base]...)
    self.write-pre()
    if self.expression.is-complex-field
      self.expression.write()
    else
      self.expression.write-safe()
    self.write-post()
  
  func dynamic write-dynamic()
    self.write-pre()
    self.expression.write-dynamic-safe()
    self.write-post()
  
  func inst write-pre()
    write(user "&(")
  
  func inst write-post()
    if self.expression.is-complex-field
      write(user ".")
    else
      write(user "->")
    write(user "_base")
    for n in 1:self.bases
      write(user "._base")
    write(user ")")


; ~~~ Owner --> Strong call expression ~~~
; class OwnerToStrongCallExpression(WrapExpression)
;   owner Expression owner-expression
; 
;   new(owner Expression expression)
;     base(user expression.code-node, owner expression)
;     self.owner-expression := self.expression
;     self.access := Access.STRONG
;     self.add-aux-variable(
;         copy Access.STRONG, copy false, user self.result-type)->(
;         owner self.expression)
; 
;   func dynamic write-preactions()
;     var AssignExpression assign(
;         user self.code-node,
;         user self.expression,
;         user self.owner-expression,
;         copy true)
;     assign.write()

~~~ TL5 compiler - Container expressions ~~~
module tl5-compiler

~~~ An expression surrounded by brackets ~~~
class BlockExpression(Expression)
  owner Expression expression
  
  func inst parse-new(user SyntaxTreeCode code-node)->(
      owner Expression expression)
    new BlockExpression block-expression(user code-node)
    block-expression.parse()
    expression := block-expression
  
  ~~~ parsing `(expression)` ~~~
  func inst parse()
    parse-new-expression(user ")", user self.code-node)->(owner self.expression)
    if glob.last-char != ')'
      self.syntax-error-c(user "expected \")\", got")
    read-c()
  
  func dynamic analyze()
    analyze-expression()->(owner self.expression)
    self.expression.result-type.copy-new()->(owner self.result-type)
    self.access := self.expression.access
    self.constant := self.expression.constant
  
  func dynamic order-constants(user NameMap{SyntaxTreeConstant} ordered-list)
    self.expression.order-constants(user ordered-list)
  
  func dynamic write-preactions()
    self.expression.write-preactions()
  
  func dynamic write()
    self.expression.write()
    
  func dynamic write-safe()
    self.write-with-brackets()

struct Operator
  owner String name
  owner String c-name
  var Int order
  var Int group-index
  var Func{(user SyntaxTreeCode code-node, user Operator operator)->(
      owner BinaryExpression expression)} binary-expression-factory
  
  func init(
      user String name,
      user String c-name,
      copy Int order,
      copy Int group-index,
      copy Func{(user SyntaxTreeCode code-node, user Operator operator)->(
      owner BinaryExpression expression)} binary-expression-factory)
    string-new-copy(user name)->(owner self.name)
    string-new-copy(user c-name)->(owner self.c-name)
    self.order := order
    self.group-index := group-index
    self.binary-expression-factory := binary-expression-factory
  
  func create-expression(user SyntaxTreeCode code-node)->(
      owner BinaryExpression expression)
    self.binary-expression-factory(user code-node, user self)->(
        owner expression)


~~~ An expression with an unary operator ~~~
class UnaryExpression(Expression)
  user Operator operator
  owner Expression right-expression
  var Bool safe-operand-write
  
  new(user SyntaxTreeCode code-node, user Operator operator)
    base(user code-node)
    self.access := Access.VAR
    self.operator := operator
    self.safe-operand-write := true
  
  func inst parse-new(
      user String ends, user Operator operator, user SyntaxTreeCode code-node)->(
      owner Expression expression, user Operator next-operator)
    new UnaryExpression unary-expression(user code-node, user operator)
    unary-expression.parse(user ends)->(user next-operator)
    expression := unary-expression
  
  func inst parse(user String ends)->(user Operator next-operator)
    if glob.last-char = '\n'
      self.code-node.read-parent-line-break-spaces()
    else-if glob.last-char != ' '
      self.syntax-error-c(user "expected space after operator, got")
    Expression.parse-new(
        user _, user ends, user self.code-node, user self.operator)->(
        owner self.right-expression, user next-operator)
  
  func dynamic analyze()
    self.analyze-operand()->(owner self.right-expression)
    self.constant := self.right-expression.constant
    if self.operator.order = 2
      ; `not` operator
      self.test-operand-type(user self.right-expression, user glob.type-bool)
      self.set-simple-type(user glob.type-bool)
    else-if self.operator.name.equal(user "-")
      self.test-operand-type(user self.right-expression, user glob.type-int)
      self.set-simple-type(user glob.type-int)
    else
      self.syntax-error(user "not unary operator", user self.operator.name)
  
  func inst analyze-operand()->(owner Expression operand)
    analyze-expression()->(owner operand)
    if not operand.result-type?
      self.syntax-error(
          user "void expression given as operand to operator",
          user self.operator.name)
  
  func inst test-operand-type(
      user Expression operand,
      user TypeData expected-type)
    if not expected-type.is-same(user operand.result-type.type-data)
      self.syntax-error3(
          user "operator",
          user self.operator.name,
          user "expected",
          user expected-type.name,
          user "operand, got",
          user operand.result-type.type-data.name)
  
  func dynamic order-constants(user NameMap{SyntaxTreeConstant} ordered-list)
    self.right-expression.order-constants(user ordered-list)
  
  func dynamic write-preactions()
    self.right-expression.write-preactions()
  
  func dynamic write()
    self.write-end-expression(user self.right-expression)
  
  func dynamic write-safe()
    self.write-with-brackets()
  
  func inst write-end-expression(user Expression right-expression)
    write(user self.operator.c-name)
    write(user " ")
    if self.safe-operand-write
      right-expression.write-safe()
    else
      right-expression.write()
    if self.is-statement
      write(user ";\n")


~~~ An expression with a binary operator ~~~
class BinaryExpression(UnaryExpression)
  owner Expression left-expression
  user BinaryExpression binary-left-expression
  
  func inst parse-new(
      user String ends,
      user Operator operator,
      user SyntaxTreeCode code-node,
      owner Expression left-expression,
      user BinaryExpression binary-left-expression)->(
      owner BinaryExpression expression,
      user Operator next-operator)
    operator.create-expression(user code-node)->(owner expression)
    expression.left-expression := left-expression
    expression.binary-left-expression := binary-left-expression
    expression.parse(user ends)->(user next-operator)
  
  func dynamic analyze()
    self.analyze-operand()->(owner self.right-expression)
    self.analyze-operand()->(owner self.left-expression)
    self.constant :=
        self.left-expression.constant and self.right-expression.constant
    if self.binary-left-expression?
      if self.operator.order = self.binary-left-expression.operator.order and
          self.operator.group-index !=
          self.binary-left-expression.operator.group-index
        self.syntax-error2(
            user "ambiguous precedence between operators",
            user self.binary-left-expression.operator.name,
            user "and",
            user self.operator.name)
  
  func inst test-operands-type(user TypeData expected-type)
    self.test-operand-type(user self.right-expression, user expected-type)
    self.test-operand-type(user self.left-expression, user expected-type)
  
  func inst test-is-reference(copy Bool is-reference, user Expression operand)
    if (not operand.result-type.type-data.is-primitive or
        operand.result-type.type-data is glob.type-func or
        operand.result-type.type-data is glob.type-ref) != is-reference
      self.syntax-error2(
          user "operator",
          user self.operator.name,
          user "is not supported for type",
          user operand.result-type.type-data.name)
        
  func dynamic is-relational()->(var Bool is-relational)
    is-relational := false
  
  func dynamic order-constants(user NameMap{SyntaxTreeConstant} ordered-list)
    self.left-expression.order-constants(user ordered-list)
    base(user ordered-list)
  
  func dynamic write-preactions()
    base()
    self.left-expression.write-preactions()
  
  func dynamic write()
    if self.safe-operand-write
      self.left-expression.write-safe()
    else
      self.left-expression.write()
    write(user " ")
    self.write-end()
  
  func dynamic write-end()
    self.write-end-expression(user self.right-expression)


~~~ + - * div mod ~~~
class ArithmeticOperatorExpression(BinaryExpression)
  func dynamic analyze()
    base()
    self.test-operands-type(user glob.type-int)
    self.set-simple-type(user glob.type-int)

func arithmetic-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := ArithmeticOperatorExpression(user code-node, user operator)


~~~ > < >= <= ~~~
class RelationalOperatorExpression(BinaryExpression)
  ~~~ expand-and: (a > b) > c --> (a > b) && (b > c) ~~~
  var Bool expand-and
  
  func dynamic analyze()
    base()
    if self.binary-left-expression?
      self.binary-left-expression.is-relational()->(var self.expand-and)
    self.test-operand(user self.right-expression)
    if not self.expand-and
      self.test-operand(user self.left-expression)
    self.set-simple-type(user glob.type-bool)
  
  func dynamic is-relational()->(var Bool is-relational)
    is-relational := true
  
  func dynamic test-operand(user Expression operand)
    self.test-operand-type(user operand, user glob.type-int)
  
  func dynamic write-end()
    if self.expand-and
      write(user "&& (")
      self.binary-left-expression.right-expression.write()
      write(user " ")
    base()
    if self.expand-and
      write(user ")")

func relational-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := RelationalOperatorExpression(user code-node, user operator)


~~~ = != ~~~
class EqualizerOperatorExpression(RelationalOperatorExpression)
  func dynamic test-operand(user Expression operand)
    self.test-is-reference(copy false, user operand)

func equalizer-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := EqualizerOperatorExpression(user code-node, user operator)


~~~ is is-not ~~~
class IdentityOperatorExpression(BinaryExpression)
  func dynamic analyze()
    base()
    self.test-is-reference(copy true, user self.right-expression)
    self.test-is-reference(copy true, user self.left-expression)
    self.set-simple-type(user glob.type-bool)
    self.safe-operand-write := false
  
  func dynamic write()
    write(user "(void*)")
    base()

func identity-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := IdentityOperatorExpression(user code-node, user operator)


~~~ or and ~~~
class LogicalOperatorExpression(BinaryExpression)
  func dynamic analyze()
    base()
    self.test-operands-type(user glob.type-bool)
    self.set-simple-type(user glob.type-bool)
    

func logical-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := LogicalOperatorExpression(user code-node, user operator)


~~~ += -= *= ~~~
class ArithmeticAssignOperatorExpression(BinaryExpression)
  func dynamic analyze()
    base()
    self.analyze-operands()
    self.safe-operand-write := false
    if not self.left-expression.assignable
      self.syntax-error-msg(user "assigning into non assignable expression")
    
  func dynamic analyze-operands()
    self.test-operands-type(user glob.type-int)

func arithmetic-assign-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := ArithmeticAssignOperatorExpression(user code-node, user operator)


~~~ := ~~~
class AssignOperatorExpression(ArithmeticAssignOperatorExpression)
  user Expression assignee
  owner VariableExpression assigned-value-variable
  
  func dynamic analyze-operands()
    self.left-expression.result-type.check-assign-from(
        copy self.left-expression.access, user self)->(
        owner self.right-expression, user self.assignee)
    if self.left-expression.access = Access.USER
      self.code-node.get-function().has-user-assign := true
    else-if self.left-expression.access = Access.OWNER
      ; ownership pass
      self.add-aux-variable(
          copy Access.OWNER,
          copy false,
          user self.left-expression.result-type)->(
          owner self.assigned-value-variable)
        
  func dynamic write-preactions()
    base()
    if not self.left-expression.result-type.type-data.is-primitive
      if self.left-expression.access = Access.OWNER
        self.write-owner-assign-preactions()
      else
        self.write-user-assign-preactions()
      
  func dynamic write-end()
    if self.left-expression.access = Access.OWNER
      self.write-end-expression(user self.assigned-value-variable)
      self.code-node.write-spaces()
      self.assigned-value-variable.write-assign-null()
    else
      base()
      
  func inst write-user-assign-preactions()
    write(user "aux_Ref_Manager = ")
    self.left-expression.write-refman()
    write(user ";\n")
    self.code-node.write-spaces()
    
    self.left-expression.write-refman()
    write(user " = ")
    self.right-expression.write-refman()
    write(user ";\n")
    self.code-node.write-spaces()
    
    self.write-assign-dynamic(
        user self.left-expression, user self.right-expression)
    
    write(user "LUMI_inc_ref(")
    self.left-expression.write-refman()
    write(user ");\n")
    self.code-node.write-spaces()
    
    write(user "LUMI_dec_ref(aux_Ref_Manager);\n")
    self.code-node.write-spaces()
    write(user "aux_Ref_Manager = NULL;\n")
    self.code-node.write-spaces()
  
  func inst write-owner-assign-preactions()
    self.assigned-value-variable.write()
    write(user " = ")
    self.right-expression.write()
    write(user ";\n")
    self.code-node.write-spaces()
    self.assigned-value-variable.write-refman()
    write(user " = ")
    self.right-expression.write-refman()
    write(user ";\n")
    self.code-node.write-spaces()
    
    self.write-assign-dynamic(
        user self.assigned-value-variable, user self.right-expression)
    
    if self.right-expression.result-type.type-data is-not glob.type-empty
      self.assignee.write-assign-null()
      self.code-node.write-spaces()
    self.write-left-delete()
    self.code-node.write-spaces()
    
    write(user "LUMI_owner_dec_ref(")
    self.left-expression.write-refman()
    write(user ");\n")
    self.code-node.write-spaces()
    
    self.left-expression.write-refman()
    write(user " = ")
    self.assigned-value-variable.write-refman()
    write(user ";\n")
    self.code-node.write-spaces()
    
    self.write-assign-dynamic(
        user self.left-expression, user self.assigned-value-variable)
      
  func inst write-assign-dynamic(user Expression target, user Expression source)
    if not target.result-type.type-data.is-dynamic and
        not target.is-generic-cast
      return
    target.write-dynamic()
    write(user " = ")
    if not source.result-type.type-data.is-dynamic and
        not source.is-generic-cast and
        source.result-type.type-data is-not glob.type-empty
      write(user "&")
      source.result-type.type-data.write-cname()
      write(user "_dynamic")
    else
      if (target.result-type.type-data is glob.type-generic or
          target.is-generic-cast) and
          source.result-type.type-data is-not glob.type-generic and
          not source.is-generic-cast
        write(user "(Generic_Type_Dynamic*)")
        source.write-dynamic-safe()
      else-if source.is-generic-cast and not target.is-generic-cast and
          not (target.result-type.type-data is glob.type-generic)
        source.write-dynamic-safe()
      else
        source.write-dynamic()
    write(user ";\n")
    self.code-node.write-spaces()
  
  func inst write-left-delete()
    user TypeData type-data(user self.left-expression.result-type.type-data)
    if type-data.is-dynamic
      write(user "if (")
      self.left-expression.write-dynamic()
      write(user " != NULL) ")
      self.left-expression.write-dynamic-safe()
      write(user "->")
      do
        while type-data.base-type?
        type-data := type-data.base-type.type-data
        while type-data.is-dynamic
        write(user "_base.")
      write(user "_del(")
    else-if type-data is-not glob.type-array
      type-data.write-cname()
      write(user "_Del(")
    else
      type-data :=
          self.left-expression.result-type.parameters.first.item.type-data
      if not type-data.is-primitive
        write(user "ARRAY_DEL(")
        type-data.write-cname()
        write(user ", ")
        self.left-expression.write()
        write(user ")\n")
      return
    self.left-expression.write()
    write(user ");\n")

func assign-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := AssignOperatorExpression(user code-node, user operator)


func non-binary-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  code-node.syntax-error(user "used non-binary operator", user operator.name)


~~~ An expression with the "?" operator ~~~
class QuestionExpression(Expression)
  owner Expression tested
  
  func inst parse-new()->(owner Expression expression)
    new QuestionExpression question-expression(user _)
    question-expression.parse(owner expression)
    expression := question-expression
  
  ~~~ parsing `tested?` ~~~
  func inst parse(owner Expression tested)
    self.tested := tested
    read-c()
  
  func dynamic analyze()
    analyze-expression()->(owner self.tested)
    if not self.tested.result-type?
      self.syntax-error-msg(user "cannot use \"?\" on void expression")
    if self.tested.result-type.type-data.is-primitive and
        not (self.tested.result-type.type-data is glob.type-func)
      self.syntax-error(
          user "cannot use \"?\" on type",
          user self.tested.result-type.type-data.name)
    if self.tested.is-complex-field
      self.syntax-error-msg(user "cannot use \"?\" on complex field")
    self.set-simple-type(user glob.type-bool)
    self.access := Access.VAR
  
  func dynamic write-preactions()
    self.tested.write-preactions()
  
  func dynamic write()
    ; `tested` != NULL && `tested`_Refman->value != NULL
    self.tested.write-safe()
    write(user " != NULL")
    if not self.tested.result-type.type-data.is-primitive
      write(user " && ")
      self.tested.write-refman-safe()
      write(user "->value != NULL")
    
  func dynamic write-safe()
    self.write-with-brackets()

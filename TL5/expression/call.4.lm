~~~ TL5 compiler - Call expressions ~~~
module tl5-compiler

~~~ Function call expression ~~~
class CallExpression(Expression)
  owner FunctionArguments arguments
  user Expression output

  func inst analyze-declaration(
      user FunctionArguments declaration,
      user TypeInstance actual-params,
      copy Int bases)
    user TypeInstance result-type
    declaration.get-result-type()->(var self.access, user result-type)
    if not self.is-statement
      result-type.new-replace-params(user actual-params)->(
          owner self.result-type)
      result-type := self.result-type
    if self.arguments.check-same-as(
        user declaration, user actual-params, copy bases, copy true)
      ; add omitted output
      new CallArgument output
      output.set-location()
      output.is-output := true
      output.is-native := declaration.outputs.last.item.is-native
      output.is-primitive := result-type.type-data.is-primitive
      output.is-dynamic := result-type.type-data.is-dynamic
      output.is-generic :=
          declaration.outputs.last.item.get-type-instance().type-data is
          glob.type-generic
      output.access := declaration.outputs.last.item.access
      owner VariableExpression variable-expression
      self.add-aux-variable(
          copy declaration.outputs.last.item.access,
          copy false,
          user result-type)->(owner variable-expression)
      if self.result-type?
        self.result-type.reference-path :=
            ReferencePath(user variable-expression.variable)
      output.value := variable-expression
      self.output := output.value
      self.arguments.outputs.add(owner output)
    else-if self.result-type?
      self.arguments.get-output()->(user self.output)
      self.output.result-type.reference-path.copy-new()->(
          owner self.result-type.reference-path)
    self.assignable := self.result-type?

  func dynamic check-memory(user ReferenceMemoryList refs)
    self.arguments.check-memory(user refs)

  func dynamic write-preactions()
    self.arguments.write-preactions()
    self.write-function-check()
    if not self.is-statement
      self.write-func-call()
      self.code-node.write-spaces()

  func dynamic write-function-check()
    ; no check
    
  func dynamic write()
    if self.is-statement
      self.write-func-call()
    else
      self.output.write()
      
  func dynamic write-safe()
    self.output.write-safe()

  func inst write-func-call()
    write(user "LUMI_err = ")
    self.write-function()
    self.code-node.write-call(user self.arguments)

  func dynamic write-function()
    raise
  
  func dynamic write-refman()
    self.output.write-refman()
  
  func dynamic write-refman-safe()
    self.output.write-refman-safe()
  
  func dynamic write-dynamic()
    self.output.write-dynamic()
  
  func dynamic write-dynamic-safe()
    self.output.write-dynamic-safe()

class FunctionCallExpression(CallExpression)
  owner FunctionExpression function
  user TypeInstance actual-params

  new(user SyntaxTreeCode code-node,
      user FunctionExpression function,
      owner FunctionArguments arguments,
      user TypeInstance actual-params)
    base(user code-node)
    self.arguments := arguments
    function.move-new()->(owner self.function)
    self.actual-params := actual-params

  func dynamic analyze()
    self.analyze-declaration(
        user self.function.function.arguments,
        user self.actual-params,
        copy self.function.bases)

  func dynamic check-memory(user ReferenceMemoryList refs)
    base(user refs)
    refs.mark-illegal-types(user self.function.function.call-group)
  
  func dynamic write-function()
    self.function.write()


class DynamicCallExpression(FunctionCallExpression)
  user Expression self-instance
  
  new(user SyntaxTreeCode code-node,
      user FunctionExpression function,
      owner FunctionArguments arguments,
      user TypeInstance actual-params,
      user Expression self-instance)
    self.self-instance := self-instance
    function.bases += function.function.dynamic-base-count
    function.function := function.function.dynamic-base-method
    base(user code-node, user function, owner arguments, user actual-params)

  func dynamic write-function-check()
    ; if (`instance`_Dynamic == NULL) RAISE(`empty_object`)
    write(user "if (")
    self.self-instance.write-dynamic()
    write(user " == NULL) ")
    self.code-node.write-raise(user "empty_object")
    self.code-node.write-spaces()

  func dynamic write-function()
    self.self-instance.write-dynamic-safe()
    self.write-bases()
    write-cname(user self.function.function.name)

  func inst write-bases()
    write(user "->")
    for n in self.function.bases
      write(user "_base.")


class FunctionObjectCallExpression(CallExpression)
  owner Expression function-object
  
  new(user SyntaxTreeCode code-node)
    base(user code-node)
    self.arguments := FunctionArguments()
  
  func inst parse-new(user String ends, user SyntaxTreeCode code-node)->(
      owner Expression expression)
    new FunctionObjectCallExpression call-expression(user code-node)
    call-expression.parse(owner expression)
    expression := call-expression
  
  func inst parse(owner Expression function-object)
    self.function-object := function-object
    var CallArgumentFactory argument-factory
    self.arguments.parse(
        user argument-factory,
        copy false,
        user self.code-node,
        copy self.code-node.parent.indentation-spaces)
  
  func dynamic restructure()->(
      owner Expression expression, owner FunctionArguments arguments)
    self.arguments.analyze()
    self.function-object.restructure()->(
        owner self.function-object, owner self.arguments)
    if not self.arguments?
      expression := self.function-object
  
  func dynamic analyze()
    self.function-object.analyze()
    if not self.function-object.result-type?
      self.syntax-error-msg(user "void expression is not callable")
    if self.function-object.result-type.type-data is-not glob.type-func
      self.syntax-error(
          user "non callable type",
          user self.function-object.result-type.type-data.name)
    self.analyze-declaration(
        user self.function-object.result-type.arguments,
        user self.function-object.result-type,
        copy 0)
    self.code-node.get-function().call-group-builder.set-delete-all()
      
  func dynamic check-memory(user ReferenceMemoryList refs)
    self.function-object.check-memory(user refs)
    refs.mark-all-illegal()
  
  func dynamic write-function-check()
    self.function-object.write-preactions()
    write(user "if (")
    self.function-object.write()
    write(user " == NULL) ")
    self.code-node.write-raise(user "empty_object")
    self.code-node.write-spaces()

  func dynamic write-function()
    self.function-object.write-safe()


~~~ Function argument call ~~~
class CallArgument(Argument)
  owner Expression value
  user Expression assignee
  user SyntaxTreeCode code-node
  var Bool is-down-cast
  var Bool is-primitive
  var Bool is-dynamic
  var Bool is-generic
  
  func dynamic parse-value(
      user SyntaxTreeCode code-node, copy Int indentation-spaces)
    self.code-node := code-node
    parse-new-expression(
        user ",)", user code-node)->(owner self.value)
    if glob.last-char != ',' and glob.last-char != ')'
      self.syntax-error-c(user "expected \",\" or \")\", got")
  
  func dynamic analyze()
    analyze-expression()->(owner self.value)
    if self.is-output and not self.value.assignable
      self.syntax-error-msg(user "non assignable call output")
  
  func dynamic check-same-type-as(
      user TypeInstance type-instance,
      user TypeInstance actual-params,
      copy Int bases)
    if (self.access = Access.OWNER or self.access = Access.STRONG) and
        self.value.access != Access.OWNER and
        self.value.access != Access.STRONG
      self.syntax-error(
          user "assigning into an owner a non-owner access",
          user glob.access-names[self.value.access])
    if self.is-output and self.access != self.value.access
      self.syntax-error2(
          user "assigning into access",
          user glob.access-names[self.access],
          user "invalid access",
          user glob.access-names[self.value.access])
    
    owner TypeInstance real-type
    type-instance.new-replace-params(user actual-params)->(owner real-type)
    if self.is-output
      self.is-down-cast := real-type.check-assign-to(
          copy self.access,
          user self.value.result-type,
          copy self.value.access,
          user self) > 0
    else
      self.assignee := self.value
      real-type.check-assign-from(copy self.access, user self)->(
          owner self.value)
    self.is-primitive := real-type.type-data.is-primitive
    self.is-dynamic := real-type.type-data.is-dynamic
    self.is-generic := type-instance.type-data is glob.type-generic
  
  func dynamic get-output()->(user Expression output)
    output := self.value

  func dynamic check-memory(user ReferenceMemoryList refs)
    self.value.check-memory(user refs)
    if not self.is-output
      if self.access = Access.OWNER and self.value.result-type.reference-path?
        refs.mark-reference(
            user self.value.result-type.reference-path, copy false)
        self.value.result-type.reference-path.check-pure-owner(user self)
      refs.check-user(user self.value)
  
  func dynamic write-preactions()
    self.value.write-preactions()
    if self.is-down-cast
      ; if (`value` != NULL) RAISE(`empty_base_output`)
      write(user "if (")
      self.value.write()
      write(user " != NULL) ")
      self.code-node.write-raise(user "empty_base_output")
      self.code-node.write-spaces()
  
  func dynamic write()
    ; [&(]`value`[)][, [&(]`value`_Refman[)]][, [&(]`value`_Dynamic[)]]
    if self.is-output
      if self.is-down-cast or self.is-generic
        write(user "(void*)")
      write(user "&(")
    self.value.write-cast()
    if self.is-output
      write(user ")")
    
    if not self.is-primitive and not self.is-native
      write(user ", ")
      if self.is-output
        write(user "&(")
      self.value.write-refman()
      if self.is-output
        write(user ")")
    
    if self.is-dynamic and not self.is-native
      write(user ", ")
      if (self.is-output and self.is-down-cast) or self.is-generic
        write(user "(void*)")
      if self.is-output
        write(user "&(")
      self.value.write-dynamic-cast()
      if self.is-output
        write(user ")")
    else-if self.is-generic
      write(user ", ")
      if self.is-output
        write(user "&dynamic_Void")
      else-if self.value.result-type.type-data is glob.type-empty
        write(user "NULL")
      else
        write(user "&")
        self.value.result-type.type-data.write-cname()
        write(user "_dynamic")
  
  func dynamic write-postactions()
    if (self.access = Access.OWNER or self.access = Access.STRONG) and
        not self.is-output and
        self.value.result-type.type-data is-not glob.type-empty
      self.code-node.write-spaces()
      self.assignee.write-assign-null()


class CallArgumentFactory(ArgumentFactory)
  func dynamic new-argument()->(owner Argument new-argument)
    new-argument := CallArgument()

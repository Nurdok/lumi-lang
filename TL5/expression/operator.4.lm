~~~ TL5 compiler - Operators ~~~
module tl5-compiler


struct Operator
  owner String name
  owner String c-name
  var Int order
  var Int group-index
  var Func{(user SyntaxTreeCode code-node, user Operator operator)->(
      owner BinaryExpression expression)} binary-expression-factory

  func init(
      user String name,
      user String c-name,
      copy Int order,
      copy Int group-index,
      copy Func{(user SyntaxTreeCode code-node, user Operator operator)->(
      owner BinaryExpression expression)} binary-expression-factory)
    string-new-copy(user name)->(owner self.name)
    string-new-copy(user c-name)->(owner self.c-name)
    self.order := order
    self.group-index := group-index
    self.binary-expression-factory := binary-expression-factory

  func create-expression(user SyntaxTreeCode code-node)->(
      owner BinaryExpression expression)
    self.binary-expression-factory(user code-node, user self)->(
        owner expression)


~~~ + - * div mod ~~~
class ArithmeticOperatorExpression(BinaryExpression)
  func dynamic analyze()
    base()
    self.test-operands-type(user glob.type-int)
    self.set-simple-type(user glob.type-int)

func arithmetic-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := ArithmeticOperatorExpression(user code-node, user operator)


~~~ > < >= <= ~~~
class RelationalOperatorExpression(BinaryExpression)
  ~~~ expand-and: (a > b) > c --> (a > b) && (b > c) ~~~
  var Bool expand-and
  
  func dynamic analyze()
    base()
    if self.binary-left-expression?
      self.binary-left-expression.is-relational()->(var self.expand-and)
    self.test-operand(user self.right-expression)
    if not self.expand-and
      self.test-operand(user self.left-expression)
    self.set-simple-type(user glob.type-bool)
  
  func dynamic is-relational()->(var Bool is-relational)
    is-relational := true
  
  func dynamic test-operand(user Expression operand)
    self.test-operand-type(user operand, user glob.type-int)
  
  func dynamic write-end()
    if self.expand-and
      write(user "&& (")
      self.binary-left-expression.right-expression.write()
      write(user " ")
    base()
    if self.expand-and
      write(user ")")

func relational-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := RelationalOperatorExpression(user code-node, user operator)


~~~ = != ~~~
class EqualizerOperatorExpression(RelationalOperatorExpression)
  func dynamic test-operand(user Expression operand)
    self.test-is-reference(copy false, user operand)

func equalizer-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := EqualizerOperatorExpression(user code-node, user operator)


~~~ is is-not ~~~
class IdentityOperatorExpression(BinaryExpression)
  func dynamic analyze()
    base()
    self.test-is-reference(copy true, user self.right-expression)
    self.test-is-reference(copy true, user self.left-expression)
    self.set-simple-type(user glob.type-bool)
    self.safe-operand-write := false
  
  func dynamic write()
    write(user "(void*)")
    base()

func identity-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := IdentityOperatorExpression(user code-node, user operator)


~~~ or and ~~~
class LogicalOperatorExpression(BinaryExpression)
  func dynamic analyze()
    base()
    self.test-operands-type(user glob.type-bool)
    self.set-simple-type(user glob.type-bool)
    

func logical-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := LogicalOperatorExpression(user code-node, user operator)


~~~ += -= *= ~~~
class ArithmeticAssignOperatorExpression(BinaryExpression)
  func dynamic analyze()
    base()
    if not self.left-expression.assignable
      self.syntax-error-msg(user "assigning into non assignable expression")
    self.analyze-assignment()
    self.safe-operand-write := false
    
  func dynamic analyze-assignment()
    self.test-operands-type(user glob.type-int)

func arithmetic-assign-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := ArithmeticAssignOperatorExpression(user code-node, user operator)


~~~ := ~~~
class AssignOperatorExpression(ArithmeticAssignOperatorExpression)
  var AssignExpression assign
  
  func dynamic analyze-assignment()
    self.assign.new(
        user self.code-node,
        user self.left-expression,
        user self.right-expression)
    self.left-expression.result-type.check-assign-from(
        copy self.left-expression.access, user self)->(
        owner self.right-expression)
    self.assign.reset-value(user self.right-expression)
    self.assign.analyze()

  func dynamic check-memory(user ReferenceMemoryList refs)
    self.assign.check-memory(user refs)
        
  func dynamic write-preactions()
    self.assign.write-preactions()

  func dynamic write-end()
    if access-is-owner(copy self.left-expression.access)
      self.write-end-expression(user self.assign.assigned-value-variable)
      self.assign.write-owner-null()
    else
      base()

func assign-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  expression := AssignOperatorExpression(user code-node, user operator)


func non-binary-operator-factory(
    user SyntaxTreeCode code-node, user Operator operator)->(
    owner BinaryExpression expression)
  code-node.syntax-error(user "used non-binary operator", user operator.name)

~~~ TL5 compiler - Syntax tree code flow elements ~~~
module tl5-compiler

~~~ Basic code flow element node in the syntax tree ~~~
class SyntaxTreeFlowElement(SyntaxTreeCode)
  var SyntaxTreeBlock block
  
  new(user SyntaxTreeBlock parent)
    base(user parent)
    self.set-parent(user parent)
  
  func inst set-parent(user SyntaxTreeBlock parent)
    self.parent := parent
    self.block.set-parent(user parent)
  
  func inst parse-block()
    self.block.parse-block()
  
  func dynamic link-types()
    self.block.link-types()
  
  func dynamic analyze()
    self.block.analyze()

  func dynamic check-memory(user ReferenceMemoryList refs)
    var ReferenceMemoryList block-refs(user refs)
    self.block.check-memory(user block-refs)
    refs.add-invalids(user block-refs)
  
  func inst write-block()
    self.block.write-block()
  
  func inst write-block-body()
    self.block.write-block-body()
  
  func inst write-after-block()
    ; if (LUMI_loop_depth < `X`) goto `cleanup`;
    self.write-spaces()
    write(user "if (LUMI_loop_depth < ")
    write-int(copy (2 * self.parent.loop-depth) + 1)
    write(user ") goto ")
    self.parent.write-cleanup-label()
    write(user ";\n")


~~~ If statement node in the syntax tree ~~~
class SyntaxTreeIf(SyntaxTreeFlowElement)
  var ExpressionValue condition
  owner SyntaxTreeElse else-node
  
  func inst parse-new(user SyntaxTreeBlock parent)->(
      owner SyntaxTreeIf new-node)
    new-node := SyntaxTreeIf(user parent)
    new-node.parse()
  
  func inst parse()
    self.condition.new(user "", user self)
    self.parse-block()
  
  func inst add-else(owner SyntaxTreeElse else-node)
    else-node.set-parent(user self.parent)
    self.else-node := else-node
  
  func inst add-else-if(
      owner SyntaxTreeIf new-if, owner SyntaxTreeCoverage coverage-node)
    self.else-node := SyntaxTreeElse(user self.parent)
    if coverage-node?
      coverage-node.parent := self.else-node.block
      self.else-node.block.code-nodes.add(owner coverage-node)
    new-if.set-parent(user self.else-node.block)
    self.else-node.block.code-nodes.add(owner new-if)
  
  func dynamic link-types()
    base()
    if self.else-node?
      self.else-node.link-types()
  
  func dynamic analyze()
    self.analyze-expression(user self.condition, user glob.type-bool)
    self.condition.check-no-error()
    base()
    if self.else-node?
      self.else-node.analyze()

  func dynamic check-memory(user ReferenceMemoryList refs)
    self.condition.check-memory(user refs)
    base(user refs)
  
  func dynamic write()
    ; if (`condition`) {
    ;   `block...`
    ; }
    ; `else-block`
    self.write-spaces()
    self.condition.write-preactions()
    write(user "if (")
    self.condition.write()
    write(user ")")
    self.write-block()
    if self.else-node?
      self.else-node.write()
    self.write-after-block()


~~~ Else statement node in the syntax tree ~~~
class SyntaxTreeElse(SyntaxTreeFlowElement)
  func inst parse-new(user SyntaxTreeBlock parent)->(
      owner SyntaxTreeElse new-node)
    new-node := SyntaxTreeElse(user parent)
    new-node.parse-block()
  
  func dynamic write()
    ; else {
    ;   `block...`
    ; }
    self.write-spaces()
    write(user "else")
    self.write-block()


~~~ Base loop node in the syntax tree ~~~
class SyntaxTreeBaseLoop(SyntaxTreeFlowElement)
  new(user SyntaxTreeBlock parent)
    base(user parent)
    self.block.loop-depth := parent.loop-depth + 1
  
  func inst write-loop-block-start()
    self.block.write-block-setup()
    self.block.write-set-loop-depth()

  func dynamic check-memory(user ReferenceMemoryList refs)
    base(user refs)
    ; check memory again for possible next iterations of the loop
    base(user refs)


~~~ Do loop node in the syntax tree ~~~
class SyntaxTreeDoLoop(SyntaxTreeBaseLoop)
  func inst parse-new(user SyntaxTreeBlock parent)->(
      owner SyntaxTreeDoLoop new-node)
    new-node := SyntaxTreeDoLoop(user parent)
    new-node.parse-block()
  
  func dynamic write()
    ; do {
    ;   `block...`
    ; } while (LUMI_loop_depth >= `X`);
    self.write-spaces()
    write(user "do {\n")
    self.write-loop-block-start()
    self.write-block-body()
    self.block.write-block-cleanup()
    self.write-spaces()
    write(user "} while (LUMI_loop_depth >= ")
    write-int(copy 2 * self.block.loop-depth)
    write(user ");\n")
    self.write-after-block()

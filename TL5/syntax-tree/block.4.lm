~~~ TL5 compiler - Syntax tree code block ~~~
module tl5-compiler


~~~ A basic code node in the syntax tree ~~~
class SyntaxTreeCode(SyntaxTreeNode)
  user SyntaxTreeBlock parent
  
  new(user SyntaxTreeBlock parent)
    self.set-location()
    self.parent := parent
  
  func dynamic find-variable(user String name, user String module-name)->(
      user SyntaxTreeVariable variable)
    if self.parent? and not module-name?
      self.parent.find-variable(user name, user _)->(user variable)
    else
      base(user name, user module-name)->(user variable)
  
  func inst get-function()->(user SyntaxTreeFunction function)
    self.parent.get-function()->(user function)
  
  func dynamic get-parent-type()->(user TypeData parent-type)
    self.parent.get-parent-type()->(user parent-type)
  
  func inst write-spaces()
    self.parent.write-spaces()
  
  func inst write-call(user FunctionArguments arguments)
    arguments.write-call()
    write(user ";\n")
    arguments.write-postactions()
    self.write-spaces()
    write(user "CHECK(")
    self.write-line-num()
    write(user ")\n")
  
  ~~~ Read and check indentation spaces for a line break from the input file ~~~
  func inst read-line-break-spaces()
    var Int expected-spaces(
        copy self.parent.indentation-spaces + (2 * INDENTATION-SPACES))
    for n in expected-spaces
      read-c()
      if glob.last-char != ' '
        self.syntax-error-indentation(copy n, copy expected-spaces)
  
  func dynamic is-end-point()->(var Bool is-end)
    is-end := false


~~~ A basic code block node in the syntax tree ~~~
class SyntaxTreeBlock(SyntaxTreeBranch)
  user SyntaxTreeBlock parent
  var List{SyntaxTreeCode} code-nodes
  user SyntaxTreeIf previous-if
  user SyntaxTreeTry previous-try
  var Bool is-in-loop
  
  func inst parse-block()
    self.parse-block-children(user _, user self)
    if self.get-parent-type()?
      self.indentation-spaces -= INDENTATION-SPACES
  
  func dynamic parse-child(user String keyword)
    owner SyntaxTreeCode node
    owner SyntaxTreeIf owner-if
    user SyntaxTreeIf new-if
    user SyntaxTreeTry new-try
    
    if self.has-end-point()
      self.syntax-error-msg(user "unreachable code")
    
    if keyword.equal(user "if")
      if glob.last-char != ' '
        self.syntax-error-c(user "expected space after \"if\", got")
      new-if := SyntaxTreeIf.parse-new(user _, user self)->(owner owner-if)
      self.code-nodes.add(owner owner-if)
      
    else-if keyword.equal(user "else")
      if not self.previous-if?
        self.syntax-error-msg(user "\"else\" without a previous \"if\"")
      if glob.last-char != '\n'
        self.syntax-error-c(user "expected new-line after \"else\", got")
      self.previous-if.add-else(
          owner SyntaxTreeElse.parse-new(user _, user self))
      
    else-if keyword.equal(user "else-if")
      if not self.previous-if?
        self.syntax-error-msg(user "\"else-if\" without a previous \"if\"")
      if glob.last-char != ' '
        self.syntax-error-c(user "expected space after \"else-if\", got")
      owner SyntaxTreeCoverage coverage-node
      if glob.tested-module?
        if glob.current-module.name.equal(user glob.tested-module)
          coverage-node := SyntaxTreeCoverage(user _)
      new-if := SyntaxTreeIf.parse-new(user _, user self)->(owner owner-if)
      self.previous-if.add-else-if(owner owner-if, owner coverage-node)
      
    else-if keyword.equal(user "do")
      if glob.last-char != '\n'
        self.syntax-error-c(user "expected new-line after \"do\", got")
      self.code-nodes.add(owner SyntaxTreeDoLoop.parse-new(user _, user self))
      
    else-if keyword.equal(user "for")
      if glob.last-char != ' '
        self.syntax-error-c(user "expected space after \"for\", got")
      self.code-nodes.add(owner SyntaxTreeForLoop.parse-new(user _, user self))
      
    else-if keyword.equal(user "while")
      if glob.last-char != ' '
        self.syntax-error-c(user "expected space after \"while\", got")
      self.code-nodes.add(owner SyntaxTreeWhile.parse-new(user _, user self))
      
    else-if keyword.equal(user "break")
      if glob.last-char != '\n'
        self.syntax-error-c(user "expected new-line after \"break\", got")
      self.code-nodes.add(owner SyntaxTreeBreak.parse-new(user _, user self))
      
    else-if keyword.equal(user "continue")
      if glob.last-char != '\n'
        self.syntax-error-c(user "expected new-line after \"continue\", got")
      self.code-nodes.add(owner SyntaxTreeContinue.parse-new(user _, user self))
      
    else-if keyword.equal(user "return")
      if glob.last-char != '\n'
        self.syntax-error-c(user "expected new-line after \"return\", got")
      self.code-nodes.add(owner SyntaxTreeReturn(user self))
      
    else-if keyword.equal(user "raise")
      if glob.last-char != ' ' and glob.last-char != '\n'
        self.syntax-error-c(
            user "expected space or new-line after \"raise\", got")
      self.code-nodes.add(owner SyntaxTreeRaise.parse-new(user _, user self))
      
    else-if keyword.equal(user "new")
      if glob.last-char != ' '
        self.syntax-error-c(user "expected space after \"new\", got")
      self.get-function().variables.add(owner SyntaxTreeVariable.parse-new(
          user _, copy Access.OWNER, copy true, user _, user self))
      
    else-if keyword.equal(user "try")
      if glob.last-char != '\n'
        self.syntax-error-c(user "expected new-line after \"try\", got")
      owner SyntaxTreeTry try-node
      SyntaxTreeTry.parse-new(user _, user self)->(owner try-node)
      new-try := try-node
      self.code-nodes.add(owner try-node)
      
    else-if keyword.equal(user "catch")
      if not self.previous-try?
        self.syntax-error-msg(user "\"catch\" without a previous \"try\"")
      if glob.last-char != '\n'
        self.syntax-error-c(user "expected new-line after \"catch\", got")
      owner SyntaxTreeCatch catch-node
      SyntaxTreeCatch.parse-new(user _, user self)->(owner catch-node)
      self.previous-try.catch-node := catch-node
      self.code-nodes.add(owner catch-node)
      
    else-if keyword.equal(user "assert")
      if glob.last-char != ' '
        self.syntax-error-c(user "expected space after \"assert\", got")
      self.code-nodes.add(owner SyntaxTreeAssert.parse-new(
          user _, user self))
      
    else-if keyword.equal(user "assert-error")
      if glob.last-char != ' '
        self.syntax-error-c(user "expected space after \"assert-error\", got")
      self.code-nodes.add(owner SyntaxTreeAssertError.parse-new(
          user _, user self))
      
    else
      glob.save-input := true
      self.code-nodes.add(
          owner SyntaxTreeExpression.parse-new(user _, user self))
    
    self.previous-if := new-if
    self.previous-try := new-try
  
  func inst has-end-point()->(var Bool has-end)
    if self.code-nodes.last?
      self.code-nodes.last.item.is-end-point()->(var has-end)
    else
      has-end := false
  
  func dynamic find-variable(user String name, user String module-name)->(
      user SyntaxTreeVariable variable)
    base(user name, user module-name)->(user variable)
    if not variable? and self.parent? and not module-name?
      self.parent.find-variable(user name, user _)->(user variable)
  
  func dynamic get-function()->(user SyntaxTreeFunction function)
    self.parent.get-function()->(user function)

  func dynamic get-parent-type()->(user TypeData parent-type)
    parent-type := self.get-function().parent-type
  
  func dynamic link-types()
    base()
    self.link-children-types(user self.code-nodes)
  
  func dynamic analyze()
    base()
    self.analyze-children(user self.code-nodes)
  
  func inst write-block()
    ; `previous-text` {
    ;   `block...`
    ; }
    self.write-block-start()
    self.write-block-body()
    self.write-block-end()
  
  func inst write-block-start()
    write(user " {\n")
  
  func dynamic write-block-body()
    self.write-children(user self.code-nodes)
  
  func inst write-block-end()
    write-spaces(copy self.indentation-spaces - INDENTATION-SPACES)
    write(user "}\n")

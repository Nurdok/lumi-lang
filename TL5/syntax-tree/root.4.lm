~~~ TL5 compiler - Syntax tree root ~~~
module tl5-compiler

class GlobalNodes(SyntaxTreeNamespace)
  owner List{TypeData} types
  
  func inst init()
    base.init()
    self.types := List{TypeData}()


~~~ The syntax tree root ~~~
class SyntaxTreeRoot(GlobalNodes)
  owner List{EnumData} enums
  owner NameMap{SyntaxTreeConstant} constants
  owner List{ModuleMembers} modules
  user String output-file-name
  owner SyntaxTreeMainFunction main-function
  owner GlobalInit global-init
  owner Array{LineCount} line-counts
  var Int covered-files
  var Bool is-library
  
  func inst init()
    base.init()
    self.enums := List{EnumData}()
    self.constants := NameMap{SyntaxTreeConstant}()
    self.modules := List{ModuleMembers}()
    self.global-init := GlobalInit()
    self.global-init.init()
  
  func inst parse()
    var Int first-file-index
    var Int arg-test-index(copy - 1)
    var Int input-files-number
    for n in 1:sys.argv.length
      user String arg(user sys.argv[n])
      if arg-test-index = n - 1
        string-new-copy(user arg)->(owner glob.tested-module)
      else-if arg.equal(user "-t") or arg.equal(user "--test")
        arg-test-index := n
      else-if first-file-index = 0
        first-file-index := n
      else
        input-files-number += 1
    
    if input-files-number = 0 or arg-test-index = sys.argv.length - 1
      print(user "usage: tl4-compiler [-t TESTED-MODULE]")
      print(user " OUTPUT-C-FILE-NAME INPUT-TL5-FILES...\n")
      raise
    
    if glob.tested-module?
      self.line-counts := Array{input-files-number:LineCount}()
    
    self.output-file-name := sys.argv[first-file-index]
    input-files-number := 0
    for n in first-file-index + 1:sys.argv.length
      if n > (arg-test-index + 1) or n < arg-test-index
        glob.input-file-name := sys.argv[n]
        glob.input-file-index := input-files-number
        input-files-number += 1
        glob.line-number := 1
        glob.current-module := _
        file-open(user glob.input-file-name, copy true)->(owner glob.input-file)
        
        self.parse-children(user _, user _)
        
        if glob.input-buffer.length > 0 or glob.input-spaces > 0
          self.set-location()
          self.syntax-error-msg(user "no new-line before file end")
        
        file-close(owner glob.input-file)
        if self.line-counts?
          self.line-counts[glob.input-file-index].init()
    
    glob.current-module := _
    self.line-number := 0
  
  func dynamic parse-if-common(
      user String keyword,
      user TypeData parent-type,
      user SyntaxTreeBlock parent-block)->(
      var Char end,
      var Bool is-parsed)
    is-parsed := false
    if not glob.current-module?
      if keyword.equal(user "module")
        if end != ' '
          self.syntax-error-c(
              user "expected space after \"module\", got", copy end)
        user String name
        read-until(user "", copy false)->(user name, var end)
        if not is-legal-name(user name, copy NameGroup.DEFAULT)
          self.syntax-error(user "illegal module name", user name)
        if glob.global-module.variable-map.find(user name)?
          self.syntax-error(user "module name overrides variable", user name)
        if glob.global-module.function-map.find(user name)?
          self.syntax-error(user "module name overrides function", user name)
        if not glob.module-map.find(user name)->(user glob.current-module)?
          new ModuleMembers module-members
          module-members.init(user name)
          glob.current-module := module-members
          self.modules.add(owner module-members)
        is-parsed := true
        return
      else
        self.syntax-error-msg(user "no \"module\" in file start")
    base.parse-if-common(user keyword, user parent-type, user parent-block)->(
        var end, var is-parsed)
  
  func dynamic parse-child(user String keyword)->(var Char end)
    if self.parse-if-function(user keyword, user _)->(var end)
      return
    
    if keyword.equal(user "const")
      if end != ' '
        self.syntax-error-c(
            user "expected space after \"const\", got", copy end)
      self.variables.add(owner SyntaxTreeConstant.parse-new(user _)->(var end))
      
    else-if keyword.equal(user "struct")
      if end != ' '
        self.syntax-error-c(
            user "expected space after \"struct\", got", copy end)
      self.types.add(owner TypeData.parse-new(user _, copy false)->(var end))
      
    else-if keyword.equal(user "class")
      if end != ' '
        self.syntax-error-c(
            user "expected space after \"class\", got", copy end)
      self.types.add(owner TypeData.parse-new(user _, copy true)->(var end))
      
    else-if keyword.equal(user "enum")
      if end != ' '
        self.syntax-error-c(
            user "expected space after \"enum\", got", copy end)
      self.enums.add(owner EnumData.parse-new(user _)->(var end))
      
    else-if keyword.equal(user "main")
      if end != '\n'
        self.syntax-error-c(
            user "expected new-line after \"main\", got", copy end)
      SyntaxTreeMainFunction.parse-new(user _)->(
          var end, owner self.main-function)
      
    else-if keyword.equal(user "native")
      if end != ' '
        self.syntax-error-c(
            user "expected space after \"native\", got", copy end)
      parse-native(user self)->(var end)
      
    else-if keyword.equal(user "test")
      if end != ' '
        self.syntax-error-c(
            user "expected space after \"test\", got", copy end)
      self.functions.add(owner SyntaxTreeTestFunction.parse-new(user _)->(
          var end))
      
    else-if keyword.equal(user "mock")
      if end != ' '
        self.syntax-error-c(
            user "expected space after \"mock\", got", copy end)
      self.functions.add(owner SyntaxTreeMockFunction.parse-new(user _)->(
          var end))
      
    else
      self.syntax-error(user "unknown keyword", user keyword)
  
  func dynamic link-types()
    raise
  
  func dynamic analyze()
    self.order-types()
    base.link-types()
    self.link-children-types(user self.types)
    self.global-init.link-types()
    if self.main-function?
      self.main-function.link-types()
    base.analyze()
    self.analyze-children(user self.types)
    self.global-init.analyze()
    if glob.tested-module?
      if not glob.test-functions.first?
        print(user "General code error: no test functions\n")
        raise
    else-if self.main-function?
      self.main-function.analyze()
    else-if not self.is-library
      print(user "General code error: no main function\n")
      raise
    self.order-children-constants(user self.variables, user self.constants)
    if self.line-counts?
      self.analyze-cover()
  
  func inst order-types()
    new List{TypeData} ordered-list
    do
      while self.types.first?
      self.types.first.item.order-bases(user ordered-list)
    self.types := ordered-list
  
  func inst analyze-cover()
    if not glob.module-map.find(user glob.tested-module)?
      print(user "General code error: unknown tested module \"")
      print(user glob.tested-module)
      print(user "\"\n")
      raise
    var Int covered-index
    for n in self.line-counts.length
      user LineCount line-count(user self.line-counts[n])
      if line-count.needs-cover
        line-count.covered-index := covered-index
        covered-index += 1
    self.covered-files := covered-index
    if self.covered-files = 0
      print(user "General code error: no code to test under module \"")
      print(user glob.tested-module)
      print(user "\"\n")
      raise
  
  ~~~ write C file in this order:
  1. type declarations
  2. type structs (ordered by depth)
  3. function declarations
  4. global variables
  5. function bodies
  6. main function
  ~~~
  func dynamic write()
    file-open(user self.output-file-name, copy false)->(owner glob.output-file)
    
    write-global(user ";include \"lumi.4.h\"\n")
    
    write-global(user "\n\n/* types declaration */\n")
    var TypeDeclarationWriter type-declaration-writer
    self.write-for-type(user type-declaration-writer)
    
    ; will write Enums
    write-global(user "\n\n/* Enums */\n")
    self.write-children(user self.enums)
    
    ; will write constants
    write-global(user "\n\n/* constants */\n")
    var NodeWriteAction node-write-action
    user NameMapNode{SyntaxTreeConstant} child(user self.constants.first)
    do
      while child?
      child.value.do-action(user node-write-action)
      child := child.next
    
    ; will write type structures
    write-global(user "\n\n/* types struct */\n")
    self.write-children(user self.types)
    
    write-global(user "\n\n/* types methods declaration */\n")
    var TypeMethodsDeclarationWriter type-methods-declaration-writer
    self.write-for-type(user type-methods-declaration-writer)
    
    write-global(user "\n\n/* global functions declaration */\n")
    self.write-functions-declaration()
    
    write-global(user "\n\n/* types global variables */\n")
    var TypeGlobalWriter type-global-writer
    self.write-for-type(user type-global-writer)
    
    ; will write global variables
    write-global(user "\n\n/* global variables */\n")
    self.write-children(user self.variables)
    
    if self.line-counts?
      self.write-test-coverage-data()
    
    write-global(user "\n\n/* types methods body */\n")
    var TypeMethodsBodyWriter type-methods-body-writer
    self.write-for-type(user type-methods-body-writer)
    
    ; will write global functions bodies
    write-global(user "\n\n/* global functions body */\n")
    self.write-children(user self.functions)
    
    ; write main function
    if glob.tested-module? or self.main-function?
      if not glob.is-new-mocked
        write(
            user "\n\nReturncode new_Mock(Bool* allocate_success) { return OK; }")
      if not glob.is-delete-mocked
        write(user "\n\nReturncode delete_Mock(Ref self) { return OK; }")
    if glob.tested-module?
      self.write-test-main()
    else-if self.main-function?
      write-global(user "\n\n/* main function */\n")
      self.main-function.write()
    
    file-close(owner glob.output-file)
  
  func inst write-for-type(user TypeWriter type-writer)
    user ListNode{TypeData} child(user self.types.first)
    do
      while child?
      child.item.write-me(user type-writer)
      child := child.next
  
  func inst write-test-coverage-data()
    user LineCount line-count
    for n in self.line-counts.length
      line-count := self.line-counts[n]
      if line-count.needs-cover
        write(user "\nint LUMI_file")
        write-int(copy line-count.covered-index)
        write(user "_line_count[")
        write-int(copy line-count.line-needs-cover.length)
        write(user "] = {\n  ")
        var Int modulo
        for i in line-count.line-needs-cover.length
          if i > 0
            write(user ",")
          if modulo = 25
            write(user "\n  ")
            modulo := 1
          else
            modulo += 1
          if line-count.line-needs-cover[i]
            write(user " 0")
          else
            write(user "-1")
        write(user "\n};")
    write(user "\nFile_Coverage LUMI_file_coverage[")
    write-int(copy self.covered-files)
    write(user "] = {")
    for n in self.line-counts.length
      line-count := self.line-counts[n]
      if line-count.needs-cover
        if line-count.covered-index > 0
          write(user ",")
        write(user "\n  {\"")
        write(user line-count.filename)
        write(user "\", ")
        write-int(copy line-count.line-needs-cover.length)
        write(user ", LUMI_file")
        write-int(copy line-count.covered-index)
        write(user "_line_count}")
    write(user "\n};\n")
  
  func inst write-test-main()
    write(user "\nUSER_MAIN_HEADER {\n")
    write(user "  Bool LUMI_success = true;\n")
    self.global-init.write()
    write(user "\n")
    user NameMapNode{SyntaxTreeTestFunction} node(user glob.test-functions.first)
    do
      ; LUMI_success &= LUMI_run_test("`test-func.name`", `test-func`);
      write(user "  LUMI_success &= LUMI_run_test(\"")
      write(user node.value.name)
      write(user "\", ")
      node.value.write-cname()
      write(user ");\n")
      node := node.next
      while node?
    if self.line-counts?
      write(user "  LUMI_success &= LUMI_test_coverage(LUMI_file_coverage, ")
      write-int(copy self.covered-files)
      write(user ");\n")
    write(user "  return LUMI_success? OK : FAIL;\n")
    write(user "}\n")
    write(user "\nTEST_MAIN_FUNC\n")


struct ModuleMembers
  owner String name
  owner NameMap{TypeData} type-map
  owner NameMap{EnumData} enum-map
  owner NameMap{SyntaxTreeVariable} variable-map
  owner NameMap{SyntaxTreeFunction} function-map
  
  func init(user String name)
    string-new-copy(user name)->(owner self.name)
    self.type-map := NameMap{TypeData}()
    self.enum-map := NameMap{EnumData}()
    self.variable-map := NameMap{SyntaxTreeVariable}()
    self.function-map := NameMap{SyntaxTreeFunction}()
    if self.name?
      glob.module-map.add(user self.name, user self)
  
  func write-prefix()
    write-cname(user self.name)
    write(user "_M_")


~~~ Main function node in the syntax tree ~~~
class SyntaxTreeMainFunction(SyntaxTreeFunction)
  func inst parse-new()->(var Char end, owner SyntaxTreeMainFunction new-node)
    new-node := SyntaxTreeMainFunction()
    new-node.parse()->(var end)
  
  func inst parse()->(var Char end)
    self.init()
    self.my-module := glob.current-module
    string-new-copy(user "main")->(owner self.name)
    self.arguments := FunctionArguments()
    self.arguments.init()
    self.parse-body()->(var end)
  
  func dynamic write()
    ; USER_MAIN_HEADER {
    ;   `block...`
    ; }
    ; MAIN_FUNC
    write(user "\nUSER_MAIN_HEADER")
    self.write-block()
    write-post-func()
    write(user "\nMAIN_FUNC\n")
  
  func dynamic write-block-body()
    glob.root.global-init.write()
    write-pre-func(user self)
    write(user "\n")
    base.write-block-body()


class GlobalInit(SyntaxTreeFunction)
  func inst init()
    base.init()
    self.code-nodes := List{SyntaxTreeCode}()
    self.variables := List{SyntaxTreeVariable}()
    self.arguments := FunctionArguments()
    self.arguments.init()
    self.indentation-spaces := 2
  
  func dynamic write()
    if not self.code-nodes.first?
      return
    self.write-children(user self.variables)
    write(user "#undef RETURN_ERROR\n")
    write(user "#define RETURN_ERROR(value) return value;\n")
    write(user "#define LUMI_FUNC_NAME \"global variable initialization\"\n")
    self.write-block-body()
    write(user "#undef LUMI_FUNC_NAME\n")
    write(user "#undef RETURN_ERROR\n")
    write(user "#define RETURN_ERROR(value) LUMI_err = value; goto LUMI_cleanup")


struct LineCount
  user String filename
  var Int covered-index
  var Bool needs-cover
  owner Array{Bool} line-needs-cover
  
  func init()
    self.filename := glob.input-file-name
    self.line-needs-cover := Array{glob.line-number + 1:Bool}()


~~~ proxy write function to be mocked on unit-tests ~~~
func write-global(user String text)
  write(user text)

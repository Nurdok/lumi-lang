~~~ TL5 compiler - File read and write functions ~~~
module tl5-compiler

const Int EOF 0

~~~ Read a single character from the input file ~~~
func read-c()->(var Char ch)
  if glob.got-new-line
    glob.line-number += 1
  if glob.input-file.getc()->(var ch)
    ch := EOF
  glob.got-new-line := ch = '\n'


~~~ Read from the input file to `text` until a new-line, EOF, or one of the
characters in `ends` is reached, and return the end character in `end`.
If `indent` is true, ignore and count trailing spaces.
It is possible to "save" previous read result by setting "glob.save-input" to
true. Next time this function will be colled it will return the saved values.
~~~
func read-until(user String ends, copy Bool indent)->(
    user String text, var Char end, var Int spaces)
  var Char ch
  if glob.save-input
    ch := glob.input-end
    spaces := glob.input-spaces
  else
    glob.input-buffer.clear()
    spaces := 0
    read-c()->(var ch)
    if indent
      ; ignore and count indent
      do
        while ch = ' '
        spaces += 1
        read-c()->(var ch)
  
  var Char quote(copy '\0')
  do
    while ch != EOF
    if quote = '\0'
      while ch != '\n'
      while not ends.has(copy ch)
      if ch = '\'' or ch = '"' or ch = '`'
        quote := ch
    else-if ch = '\\'
      glob.input-buffer.append(copy ch)
      read-c()->(var ch)
    else-if ch = quote
      quote := '\0'
    glob.input-buffer.append(copy ch)
    read-c()->(var ch)
  
  glob.input-end := ch
  glob.input-spaces := spaces
  glob.save-input := false
  text := glob.input-buffer
  end := ch


~~~ Return in `new-text` a new allocated string read using `read-until`. ~~~
func read-new(user String ends)->(owner String new-text, var Char end)
  user String text
  read-until(user ends, copy false)->(user text, var end)
  string-new-copy(user text)->(owner new-text)


~~~ write a single character to the output file ~~~
func write-c(copy Char ch)
  glob.output-file.putc(copy ch)


~~~ write `text` to the output file ~~~
func write(user String text)
  glob.output-file.write(user text)


~~~ write `name` with `-` replaced by `_` and replace C builtin names ~~~
func write-cname(user String name)
  if not name?
    raise
  if name.equal(user "stdout") or name.equal(user "stdin") or
      name.equal(user "stderr")
    write(user name)
    write(user "_Cname")
    return
  for index in name.length
    var Char ch(copy name[index])
    if ch = '-' or ch = ' '
      write-c(copy '_')
    else
      write-c(copy ch)


~~~ write `num` to the output file as text ~~~
func write-int(copy Int num)
  var String{64} num-str
  num.str(user num-str)
  write(user num-str)


~~~ write `num` spaces - usefull for writing indentation ~~~
func write-spaces(copy Int num)
  for n in num
    write-c(copy ' ')

~~~ TL5 compiler - Memory management ~~~
module tl5-compiler

~~~ Reference full member path ~~~
struct ReferencePath
  user SyntaxTreeVariable variable
  owner ReferencePath field

  new(user SyntaxTreeVariable variable)
    self.variable := variable

  func copy-new()->(owner ReferencePath reference)
    reference := ReferencePath(user self.variable)
    if self.field?
      self.field.copy-new()->(owner reference.field)

  func copy-and-add-field(user SyntaxTreeVariable variable)->(
      owner ReferencePath reference)
    reference := ReferencePath(user self.variable)
    if self.field?
      self.field.copy-and-add-field(user variable)->(owner reference.field)
    else
      reference.field := ReferencePath(user variable)
  
  func equals(user ReferencePath reference)->(var Bool is-equal)
    if not self? or not reference?
      is-equal := false
      return
    if self.variable is-not reference.variable or
        (self.field? != reference.field?)
      is-equal := false
      return
    if self.field?
      ; self.field.equals(user reference.field)->(var is-equal)
    else
      is-equal := true
  
  func print()
    if self.variable.is-aux
      sys.print(user "{anonymous}")
    else
      sys.print(user self.variable.name)
    if self.field?
      sys.print(user ".")
      self.field.print()
  
  func check-pure-owner(user SyntaxTreeNode node)
    var Bool pure-owner(copy true)
    user ReferencePath path(user self)
    do
      while path?
      if path.variable.access = Access.OWNER or
          path.variable.access = Access.STRONG
        if not pure-owner
          node.print-syntax-error-header()
          sys.print(user "cannot modify owner field \"")
          sys.print(user path.variable.name)
          sys.print(user "\" in non-owner reference \"")
          self.print()
          sys.print(user "\"\n")
          sys.exit(copy 1)
      else
        pure-owner := false
      path := path.field


~~~ Manage a single reference memory ~~~
struct ReferenceMemory
  var ReferencePath path
  var Bool usable

  new(user SyntaxTreeVariable variable)
    ; self.path.new(user variable)
    ; self.usable := true


~~~ List of memory managed references ~~~
struct ReferenceMemoryList
  var List{ReferenceMemory} references
  var NameMap{SyntaxTreeVariable} user-references
  
  func add(user SyntaxTreeVariable variable)
    ; self.references.add(owner ReferenceMemory(user variable))
    if variable.access = Access.USER
      self.user-references.add-if-unique-value(
          user variable.name, user variable)
  
  func mark-illegal-type(user TypeData type-data)
    ; for reference in self.references.iter()
    ;   if type-data is reference.path.variable.type-instance.type-data
    ;     reference.usable := false
    var NameMap{SyntaxTreeVariable} to-delete
    for variable in self.user-references.iter()
      if type-data is variable.type-instance.type-data
        to-delete.add(user variable.name, user variable)
    for variable in to-delete.iter()
      self.user-references.remove(user variable)
  
  func mark-reference(user ReferencePath reference-path, copy Bool usable)
    ; for reference in self.references.iter()
    ;   if reference.path.equals(user reference-path)
    ;     reference.usable := usable
    ;     return
    ; new ReferenceMemory reference-memory(user reference-path.variable)
    ; reference-path.field.copy-new()->(owner reference-memory.path.field)
    ; reference-memory.usable := usable
    ; self.references.add(owner reference-memory)
  
  func check-expression(user Expression expression)
    ; for reference in self.references.iter()
    ;   if expression.result-type.reference-path.equals(user reference.path)
    ;     if not reference.usable
    ;       expression.print-syntax-error-header()
    ;       sys.print(user "using potentially illegal reference \"")
    ;       expression.result-type.reference-path.print()
    ;       sys.print(user "\"\n")
    ;       sys.exit(copy 1)
    ;     return
  
  func check-user(user Expression expression)
    user ReferencePath exp-path(user expression.result-type.reference-path)
    if not exp-path?
      return
    if exp-path.field? or exp-path.variable.access != Access.USER
      return
    for variable in self.user-references.iter()
      if variable is exp-path.variable
        return
    expression.syntax-error(
        user "using potentially illegal user reference",
        user exp-path.variable.name)


struct CallGroup
  owner NameMap{TypeData} deleting-types
  
  new(owner NameMap{TypeData} deleting-types)
    self.deleting-types := deleting-types


struct CallGroupBuilder(CallGroup)
  var NameMap{SyntaxTreeFunction} calling-functions
  var NameMap{SyntaxTreeFunction} members
  user SyntaxTreeFunction owner-member
  var Bool working
  
  new(user SyntaxTreeFunction owner-member)
    base(owner NameMap{TypeData}())
    self.owner-member := owner-member
    self.members.add(user self.owner-member.name, user self.owner-member)
  
  func add-calling(user SyntaxTreeFunction function)
    self.calling-functions.add-if-unique-value(
        user function.name, user function)

  func add-deleting(user TypeData type-data)
    self.deleting-types.add-if-unique-value(user type-data.name, user type-data)

  func build()->(user CallGroupBuilder recursive)
    if self.working
      recursive := self
      return
    self.working := true
    do
      user SyntaxTreeFunction function
      while self.calling-functions.pop()->(user function)?
      if function.collect-call-group()->(user recursive)?
        if recursive is self
          recursive := _
          continue
        recursive.merge-from(user self)
        return
      self.extend(user function.call-group)
    self.done()
  
  func merge-from(user CallGroupBuilder other)
    self.extend(user other)
    user SyntaxTreeFunction function
    do
      while other.members.pop()->(user function)?
      self.members.add(user function.name, user function)
      function.call-group-builder := self
    do
      while other.calling-functions.pop()->(user function)?
      self.calling-functions.add-if-unique-value(
          user function.name, user function)
    other.kill()
  
  func extend(user CallGroup call-group)
    for type-data in call-group.deleting-types.iter()
      self.deleting-types.add-if-unique-value(
          user type-data.name, user type-data)
  
  func done()
    self.owner-member.call-group-owner := CallGroup(owner self.deleting-types)
    for member in self.members.iter()
      member.call-group := self.owner-member.call-group-owner
      member.call-group-builder := _
    self.working := false
    self.kill()
  
  func kill()
    self.owner-member.call-group-builder-owner := _

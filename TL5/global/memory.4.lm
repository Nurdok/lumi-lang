~~~ TL5 compiler - Memory management ~~~
module tl5-compiler

~~~ Reference full member path ~~~
struct ReferencePath
  user SyntaxTreeVariable variable
  owner ReferencePath field

  new(user SyntaxTreeVariable variable)
    self.variable := variable

  func copy-new()->(owner ReferencePath reference)
    if not self?
      reference := _
      return
    reference := ReferencePath(user self.variable)
    if self.field?
      self.field.copy-new()->(owner reference.field)

  func copy-and-add-field(user SyntaxTreeVariable variable)->(
      owner ReferencePath reference)
    if not self?
      reference := _
      return
    reference := ReferencePath(user self.variable)
    if self.field?
      self.field.copy-and-add-field(user variable)->(owner reference.field)
    else
      reference.field := ReferencePath(user variable)
  
  func equals(user ReferencePath reference)->(var Bool is-equal)
    if self.variable is-not reference.variable or
        (self.field? != reference.field?)
      is-equal := false
      return
    if self.field?
      self.field.equals(user reference.field)->(var is-equal)
    else
      is-equal := true
  
  func print()
    sys.print(user self.variable.name)
    if self.field?
      sys.print(user ".")
      self.field.print()

~~~ Manage a single reference memory ~~~
struct ReferenceMemory
  var ReferencePath path
  var Bool usable

  new(user SyntaxTreeVariable variable)
    self.path.new(user variable)
    self.usable := true

~~~ List of memory managed references ~~~
struct ReferenceMemoryList
  var List{ReferenceMemory} references
  
  func add(user SyntaxTreeVariable variable)
    self.references.add(owner ReferenceMemory(user variable))
  
  func mark-illegal-type(user TypeData type-data)
    for reference in self.references.iter()
      if type-data is reference.path.variable.type-instance.type-data
        reference.usable := false
  
  func mark-reference(user ReferencePath reference-path, copy Bool usable)
    for reference in self.references.iter()
      if reference.path.equals(user reference-path)
        reference.usable := usable
        return
    new ReferenceMemory reference-memory(user reference-path.variable)
    reference-path.field.copy-new()->(owner reference-memory.path.field)
    reference-memory.usable := usable
    self.references.add(owner reference-memory)
  
  func check-expression(user Expression expression)
    if not expression.result-type.reference-path?
      return
    for reference in self.references.iter()
      if expression.result-type.reference-path.equals(user reference.path)
        if not reference.usable
          expression.print-syntax-error-header()
          sys.print(user "using potentially illegal reference \"")
          expression.result-type.reference-path.print()
          sys.print(user "\"\n")
          sys.exit(copy 1)
        return

~~~ TL5 compiler - Global compiler data ~~~
module tl5-compiler

~~~ Access values ~~~
enum Access
  UNDEFINED
  VAR
  COPY
  OWNER
  USER
  STRONG
  WEAK
  S-VAR
  SHARED


struct Global
  ~~~ stores all user defined nodes ~~~
  var SyntaxTreeRoot root
  
  ~~~ stores all built-in nodes ~~~
  var GlobalNodes builtins
  
  ~~~ stores all language operators ~~~
  var List{Operator} operators
  
  ~~~ maps all global-scope nodes ~~~
  var ModuleMembers global-module
  
  ~~~ maps all language operators ~~~
  var NameMap{Operator} operator-map
  
  ~~~ maps all modules ~~~
  var NameMap{ModuleMembers} module-map
  
  ~~~ maps access number to its name ~~~
  owner Array{String} access-names
  
  ~~~ the currently parsed input file object ~~~
  owner File input-file
  
  ~~~ the currently written output file object ~~~
  owner File output-file
  
  ~~~ holds the name of the input-file and the line number of the code
  currently been worked with ~~~
  user String input-file-name
  user ModuleMembers current-module
  var Int input-file-index
  var Int line-number
  
  ~~~ test functions list ~~~
  var NameMap{SyntaxTreeTestFunction} test-functions
  owner String tested-module
  var Bool is-new-mocked
  var Bool is-delete-mocked
  
  ~~~ input reading state ~~~
  owner String input-buffer
  var Char last-char
  var Int input-spaces
  var Bool got-new-line
  var Bool save-input
  var Bool file-ended
  
  ~~~ built-in types ~~~
  user TypeData type-char
  user TypeData type-bool
  user TypeData type-int
  user TypeData type-empty
  user TypeData type-func
  user TypeData type-ref
  user TypeData type-string
  user TypeData type-array
  user TypeData type-type
  user TypeData type-base
  user TypeData type-generic
  user TypeData type-module
  user TypeData type-file
  user TypeData type-sys
  
  func new()
    glob := self
    self.builtins.new()
    self.root.new()
    self.input-buffer := String{1024}()
    self.global-module.new(user _)
    self.init-operator-map()
    self.init-access-names()
    self.init-builtin-types()
  
  func init-access-names()
    self.access-names := Array{Access.length:String{16}}()
    self.access-names[Access.UNDEFINED].new(user "{undefined}")
    self.access-names[Access.VAR].new(user "var")
    self.access-names[Access.COPY].new(user "copy")
    self.access-names[Access.OWNER].new(user "owner")
    self.access-names[Access.USER].new(user "user")
    self.access-names[Access.STRONG].new(user "strong")
    self.access-names[Access.WEAK].new(user "weak")
    self.access-names[Access.S-VAR].new(user "s-var")
    self.access-names[Access.SHARED].new(user "shared")
  
  func init-operator-map()
    self.add-operator-copy(
        user "+", copy 0, copy 0, copy arithmetic-operator-factory)
    self.add-operator-copy(
        user "-", copy 0, copy 0, copy arithmetic-operator-factory)
    self.add-operator-copy(
        user "*", copy 0, copy 1, copy arithmetic-operator-factory)
    self.add-operator(
        user "div", user "/", copy 0, copy 1, copy arithmetic-operator-factory)
    self.add-operator(
        user "mod", user "%", copy 0, copy 1, copy arithmetic-operator-factory)
    self.add-operator(
        user "=", user "==", copy 1, copy 0, copy equalizer-operator-factory)
    self.add-operator(
        user "<>", user "!=", copy 1, copy 0, copy equalizer-operator-factory)
    self.add-operator-copy(
        user ">", copy 1, copy 0, copy relational-operator-factory)
    self.add-operator-copy(
        user "<", copy 1, copy 0, copy relational-operator-factory)
    self.add-operator-copy(
        user ">=", copy 1, copy 0, copy relational-operator-factory)
    self.add-operator-copy(
        user "<=", copy 1, copy 0, copy relational-operator-factory)
    self.add-operator(
        user "is", user "==", copy 1, copy 0, copy identity-operator-factory)
    self.add-operator(
        user "is-not", user "!=", copy 1, copy 0, copy identity-operator-factory)
    self.add-operator(
        user "not", user "!", copy 2, copy 0, copy non-binary-operator-factory)
    self.add-operator(
        user "or", user "||", copy 3, copy 0, copy logical-operator-factory)
    self.add-operator(
        user "and", user "&&", copy 3, copy 1, copy logical-operator-factory)
    self.add-operator(
        user ":=", user "=", copy 4, copy 0, copy assign-operator-factory)
    self.add-operator-copy(
        user "+=", copy 4, copy 1, copy arithmetic-assign-operator-factory)
    self.add-operator-copy(
        user "-=", copy 4, copy 2, copy arithmetic-assign-operator-factory)
    self.add-operator-copy(
        user "*=", copy 4, copy 3, copy arithmetic-assign-operator-factory)
  
  func add-operator(
      user String name,
      user String c-name,
      copy Int order,
      copy Int group-index,
      copy Func{(user SyntaxTreeCode code-node, user Operator operator)->(
      owner BinaryExpression expression)} factory)
    new Operator operator
    operator.init(
        user name, user c-name, copy order, copy group-index, copy factory)
    self.operator-map.add(user operator.name, user operator)
    self.operators.add(owner operator)
  
  func add-operator-copy(
      user String name,
      copy Int order,
      copy Int group-index,
      copy Func{(user SyntaxTreeCode code-node, user Operator operator)->(
      owner BinaryExpression expression)} factory)
    self.add-operator(
        user name, user name, copy order, copy group-index, copy factory)
  
  func init-builtin-types()
    self.add-builtin-type(user "Char", copy true)->(user self.type-char)
    self.add-builtin-type(user "Bool", copy true)->(user self.type-bool)
    assert self.type-char?
    self.add-builtin-type(user "Int", copy true)->(user self.type-int)
    assert self.type-int?
    self.add-builtin-type(user "Empty Symbol", copy false)->(
        user self.type-empty)
    assert self.type-int?
    self.add-builtin-type(user "Func", copy true)->(user self.type-func)
    self.add-builtin-type(user "Ref", copy true)->(user self.type-ref)
    self.add-builtin-type(user "String", copy false)->(user self.type-string)
    self.add-builtin-type(user "Array", copy false)->(user self.type-array)
    self.add-builtin-type(user "Type Name", copy false)->(user self.type-type)
    self.add-builtin-type(user "Base Symbol", copy false)->(user self.type-base)
    self.add-builtin-type(user "Generic Type", copy false)->(
        user self.type-generic)
    self.type-generic.is-dynamic := true
    self.add-builtin-type(user "Module Name", copy false)->(
        user self.type-module)
    self.add-builtin-type(user "File", copy false)->(user self.type-file)
    self.type-file.create-disallowed := true
    self.add-builtin-type(user "Sys", copy false)->(user self.type-sys)
    self.type-sys.create-disallowed := true
    
    user FunctionArguments arguments
    
    ; Int
    assert self.type-int?
    self.add-builtin-method(user self.type-int, user "str")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user self.type-string, user "str")
    
    ; Bool
    self.add-builtin-global-variable(user glob.type-bool, user "true")
    self.add-builtin-global-variable(user glob.type-bool, user "false")
    
    ; String
    self.add-builtin-field(
        user glob.type-string, user "length", user glob.type-int, user _)
    self.add-builtin-field(
        user glob.type-string, user "max-length", user glob.type-int, user _)
    
    self.add-builtin-method(user glob.type-string, user "new")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "other")
    
    self.add-builtin-method(user glob.type-string, user "clear")->(
        user arguments)
    
    self.add-builtin-method(user glob.type-string, user "equal")->(
        user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "pattern")
    self.add-builtin-output(
        user arguments, copy Access.VAR, user glob.type-bool, user "equal")
    
    self.add-builtin-method(user glob.type-string, user "get")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.COPY, user glob.type-int, user "index")
    self.add-builtin-output(
        user arguments, copy Access.VAR, user glob.type-char, user "ch")
    
    self.add-builtin-method(user glob.type-string, user "append")->(
        user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.COPY, user glob.type-char, user "ch")
    
    self.add-builtin-method(user glob.type-string, user "concat")->(
        user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "other")
    
    self.add-builtin-method(user glob.type-string, user "concat-int")->(
        user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.COPY, user glob.type-int, user "number")
    
    self.add-builtin-method(user glob.type-string, user "find")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "pattern")
    self.add-builtin-output(
        user arguments, copy Access.VAR, user glob.type-int, user "index")
    
    self.add-builtin-method(user glob.type-string, user "has")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.COPY, user glob.type-char, user "ch")
    self.add-builtin-output(
        user arguments, copy Access.VAR, user glob.type-bool, user "equal")
    
    ; Array
    self.add-builtin-field(
        user glob.type-array, user "length", user glob.type-int, user _)
    
    ; File
    self.add-builtin-global-function(user "file-open-read")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "name")
    self.add-builtin-output(
        user arguments, copy Access.OWNER, user glob.type-file, user "file")
    
    self.add-builtin-global-function(user "file-open-write")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "name")
    self.add-builtin-output(
        user arguments, copy Access.OWNER, user glob.type-file, user "file")
    
    self.add-builtin-global-function(user "file-close")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.OWNER, user glob.type-file, user "file")
    
    self.add-builtin-method(user glob.type-file, user "getc")->(user arguments)
    self.add-builtin-output(
        user arguments, copy Access.VAR, user glob.type-char, user "ch")
    self.add-builtin-output(
        user arguments, copy Access.VAR, user glob.type-bool, user "is-eof")
    
    self.add-builtin-method(user glob.type-file, user "putc")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.COPY, user glob.type-char, user "ch")
    
    self.add-builtin-method(user glob.type-file, user "write")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "text")
    
    ; Sys
    self.add-builtin-field(
        user glob.type-sys,
        user "argv",
        user glob.type-array,
        user glob.type-string)
        
    self.add-builtin-field(
        user glob.type-sys,
        user "stdout",
        user glob.type-file,
        user _)
        
    self.add-builtin-field(
        user glob.type-sys,
        user "stdin",
        user glob.type-file,
        user _)
        
    self.add-builtin-field(
        user glob.type-sys,
        user "stderr",
        user glob.type-file,
        user _)
    
    self.add-builtin-method(user glob.type-sys, user "print")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "text")
        
    self.add-builtin-method(user glob.type-sys, user "println")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "text")
    
    self.add-builtin-method(user glob.type-sys, user "getchar")->(user arguments)
    self.add-builtin-output(
        user arguments, copy Access.VAR, user glob.type-char, user "ch")
    self.add-builtin-output(
        user arguments, copy Access.VAR, user glob.type-bool, user "is-eof")
        
    self.add-builtin-method(user glob.type-sys, user "getline")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "line")
    
    self.add-builtin-method(user glob.type-sys, user "exit")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.COPY, user glob.type-int, user "status")
    
    self.add-builtin-method(user glob.type-sys, user "system")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "command")
    self.add-builtin-output(
        user arguments, copy Access.VAR, user glob.type-int, user "status")
    
    self.add-builtin-method(user glob.type-sys, user "getenv")->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "name")
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user glob.type-string, user "value")
    self.add-builtin-output(
        user arguments, copy Access.VAR, user glob.type-bool, user "exists")
    
    self.add-builtin-global-variable(user glob.type-sys, user "sys")
  
  func add-builtin-type(user String name, copy Bool is-primitive)->(
      user TypeData type-data)
    new TypeData new-type
    type-data := new-type
    string-new-copy(user name)->(owner new-type.name)
    new-type.is-primitive := is-primitive
    new-type.is-ordered := true
    self.global-module.type-map.add(user new-type.name, user new-type)
    self.builtins.types.add(owner new-type)
  
  func add-builtin-global-variable(
      user TypeData variable-type, user String name)
    self.add-builtin-variable(
        user name, user variable-type, user _, user _, user self.builtins)
    user SyntaxTreeVariable variable(user self.builtins.variables.last.item)
    self.global-module.variable-map.add(user variable.name, user variable)
  
  func add-builtin-field(
      user TypeData builtin-type,
      user String name,
      user TypeData field-type,
      user TypeData field-subtype)
    self.add-builtin-variable(
        user name,
        user field-type,
        user field-subtype,
        user builtin-type,
        user builtin-type)
  
  func add-builtin-variable(
      user String name,
      user TypeData variable-type,
      user TypeData variable-subtype,
      user TypeData parent-type,
      user SyntaxTreeBranch branch)
    new SyntaxTreeVariable variable(user _)
    string-new-copy(user name)->(owner variable.name)
    if variable-type.is-primitive
      variable.access := Access.VAR
    else
      variable.access := Access.OWNER
    variable-type.new-type-instance()->(owner variable.type-instance)
    if variable-subtype?
      variable.type-instance.add-subtype-copy(user variable-subtype)
    variable.parent-type := parent-type
    branch.variables.add(owner variable)
  
  func add-builtin-global-function(user String name)->(
      user FunctionArguments arguments)
    self.add-builtin-function(user name, user _, user glob.builtins)->(
        user arguments)
    user SyntaxTreeFunction function(user self.builtins.functions.last.item)
    self.global-module.function-map.add(user function.name, user function)
  
  func add-builtin-method(user TypeData builtin-type, user String name)->(
      user FunctionArguments arguments)
    self.add-builtin-function(
        user name, user builtin-type, user builtin-type)->(user arguments)
    self.add-builtin-parameter(
        user arguments, copy Access.USER, user builtin-type, user "self")
  
  func add-builtin-function(
      user String name,
      user TypeData parent-type,
      user SyntaxTreeNamespace namespace)->(
      user FunctionArguments arguments)
    new SyntaxTreeFunction function
    string-new-copy(user name)->(owner function.name)
    function.parent-type := parent-type
    arguments := function.arguments
    namespace.functions.add(owner function)
  
  func add-builtin-parameter(
      user FunctionArguments arguments,
      copy Int access,
      user TypeData parameter-type,
      user String name)
    self.add-builtin-argument(
        user arguments.parameters,
        copy false,
        copy access,
        user parameter-type,
        user name)
  
  func add-builtin-output(
      user FunctionArguments arguments,
      copy Int access,
      user TypeData output-type,
      user String name)
    self.add-builtin-argument(
        user arguments.outputs,
        copy true,
        copy access,
        user output-type,
        user name)
  
  func add-builtin-argument(
      user List{Argument} argument-list,
      copy Bool is-output,
      copy Int access,
      user TypeData argument-type,
      user String name)
    new DeclarationArgument argument
    argument.access := access
    argument.is-output := is-output
    argument.variable := SyntaxTreeVariable(user _)
    string-new-copy(user name)->(owner argument.variable.name)
    argument.variable.access := access
    argument-type.new-type-instance()->(
        owner argument.variable.type-instance)
    if not argument-type.is-primitive
      argument.variable.type-instance.conditional := true
    argument-list.add(owner argument)
  
  func find-type(user String name)->(user TypeData type-data)
    if self.current-module?
      if self.current-module.type-map.find(user name)->(user type-data)?
        return
    self.global-module.type-map.find(user name)->(user type-data)
  
  func find-variable(user String name)->(user SyntaxTreeVariable variable)
    if self.current-module.variable-map.find(user name)->(user variable)?
      return
    self.global-module.variable-map.find(user name)->(user variable)
  
  func find-function(user String name)->(user SyntaxTreeFunction function)
    if self.current-module.function-map.find(user name)->(user function)?
      return
    self.global-module.function-map.find(user name)->(user function)

user Global glob

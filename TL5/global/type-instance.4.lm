~~~ TL5 compiler - Type instance ~~~
module tl5-compiler

~~~ Specific usage of a type including the assigned subtypes and values ~~~
struct TypeInstance
  owner String name
  owner String module-name
  user TypeData type-data
  owner List{TypeInstance} parameters
  owner Expression length-owner
  user Expression length
  owner FunctionArguments arguments
  
  ~~~ Return a new deep-copy of self ~~~
  func copy-new()->(owner TypeInstance type-instance)
    if self?
      type-instance := TypeInstance()
      self.copy(user type-instance)
    else
      type-instance := _
        
  func copy(user TypeInstance other)
    other.type-data := self.type-data
    if other.name?
    string-new-copy(user self.name)->(owner other.name)
    if self.module-name?
      string-new-copy(user self.module-name)->(owner other.module-name)
    other.length := self.length
    if self.parameters?
      other.parameters := List{TypeInstance}()
      user ListNode{TypeInstance} node(user self.parameters.first)
      do
        while node?
        other.parameters.add(owner node.item.copy-new())
        node := node.next
    if self.arguments?
      self.arguments.copy-new()->(owner other.arguments)
  
  func parse(
      user String ends,
      user SyntaxTreeNode node,
      user SyntaxTreeCode code-node)->(
      var Char end)
    user String name
    read-until(user string-new-concat(user ends, user ".{"), copy false)->(
        user name, var end)
    if end = '.'
      string-new-copy(user name)->(owner self.module-name)
      read-until(user string-new-concat(user ends, user "{"), copy false)->(
          user name, var end)
    self.parse-name(user name, user node, user code-node)->(var end)
  
  func parse-name(
      user String name,
      user SyntaxTreeNode node,
      user SyntaxTreeCode code-node)->(
      var Char end)
    string-new-copy(user name)->(owner self.name)
    if end = '{'
      if self.name.equal(user "Func")
        read-c()->(var end)
        if end != '('
          node.syntax-error-c(
              user "expected \"(\" inside Function type, got", copy end)
        self.arguments := FunctionArguments()
        var DeclarationArgumentFactory argument-factory
        self.arguments.parse(
            user argument-factory, copy false, user code-node)->(var end)
      else-if code-node? and self.name.equal(user "String")
        parse-new-expression(user "}", user code-node)->(
            owner self.length-owner, var end)
        self.length := self.length-owner
      else
        var Bool has-sub-type(copy true)
        var Bool is-array(copy self.name.equal(user "Array"))
        if code-node? and is-array
          parse-new-expression(user ":}", user code-node)->(
              owner self.length-owner, var end)
          self.length := self.length-owner
          if end != ':' and end != '}'
            node.syntax-error-c(
                user "expected \":\" or \"} after array length\", got",
                copy end)
          has-sub-type := end = ':'
        if has-sub-type
          if not is-array
            code-node := _
          self.parameters := List{TypeInstance}()
          do
            new TypeInstance sub-type
            sub-type.parse(user ":}", user node, user code-node)->(var end)
            self.parameters.add(owner sub-type)
            while end = ':'
            if is-array
              node.syntax-error-msg(user "more than one subtype for array")
      if end != '}'
        node.syntax-error-c(user "expected \"}\" after sub-types, got",
            copy end)
      read-c()->(var end)
  
  func add-subtype-copy(user TypeData type-data)
    if not self.parameters?
      self.parameters := List{TypeInstance}()
    self.parameters.add(owner type-data.new-type-instance())
  
  func analyze(user SyntaxTreeNode node)
    self.analyze-part(user node, copy true, copy true, copy false)
  
  func link-types(user SyntaxTreeNode node)
    self.analyze-part(user node, copy true, copy false, copy true)
  
  func analyze-lengths(user SyntaxTreeNode node, copy Bool constant-length)
    self.analyze-part(user node, copy false, copy true, copy constant-length)
  
  func analyze-part(
      user SyntaxTreeNode node,
      copy Bool check-types,
      copy Bool check-length,
      copy Bool constant-length)
    if check-types
      if not self.type-data?
        node.find-type(user self.name, user self.module-name)->(
            user self.type-data)
      if self.arguments?
        self.arguments.link-types()
    if check-length
      if self.length?
        node.analyze-expression(user self.length, user glob.type-int)
        if constant-length and not self.length.constant
          node.syntax-error-msg(user "array length is not constant")
      if self.arguments?
        self.arguments.analyze()
    if self.parameters?
      user ListNode{TypeInstance} sub-type(user self.parameters.first)
      do
        while sub-type?
        sub-type.item.analyze-part(
            user node,
            copy check-types,
            copy check-length,
            copy constant-length)
        sub-type := sub-type.next
    if check-types
      self.check-parameters(user node)
  
  func check-parameters(user SyntaxTreeNode node)
    if self.type-data is glob.type-array
      if not self.parameters?
        node.syntax-error-msg(user "missing subtype for array")
      if self.parameters.first.item.type-data is glob.type-array
        node.syntax-error-msg(
            user "multidimensional array not supported yet...")
    else-if self.parameters?
      if not self.type-data.parameters?
        node.syntax-error(
            user "parameter given for type with no parameters",
            user self.type-data.name)
      user ListNode{TypeInstance} sub-type(user self.parameters.first)
      user ListNode{String} dec-node(user self.type-data.parameters.first)
      do
        while sub-type?
        if not dec-node?
          node.syntax-error(
              user "too many parameters given for type",
              user self.type-data.name)
        if sub-type.item.type-data.is-primitive
          node.syntax-error(
              user "unsupported primitive parameter type",
              user sub-type.item.type-data.name)
        if sub-type.item.type-data is glob.type-array
          node.syntax-error-msg(user "array as parameter type is unsupported")
        sub-type := sub-type.next
        dec-node := dec-node.next
      if dec-node?
        node.syntax-error(
            user "too few parameter given for type", user self.type-data.name)
    else-if self.type-data is glob.type-func and not self.arguments?
      node.syntax-error-msg(user "missing arguments in function type")
  
  func check-assign-from(copy Int access, user SyntaxTreeNode node)->(
      owner Expression value, user Expression assignee)
    assignee := value
    var Int bases
    value.result-type.check-assign-to(
        copy value.access, user self, copy access, user node)->(var bases)
    if bases > 0
      UpCastExpression.init-new(var _, copy bases)->(owner value)
  
  func check-assign-to(
      copy Int self-access,
      user TypeInstance target,
      copy Int target-access,
      user SyntaxTreeNode node)->(
      var Int bases)
    bases := 0
    if not self?
      node.syntax-error-msg(user "cannot assign void expression")
    if self.type-data is glob.type-empty and
        (not target.type-data.is-primitive or
        target.type-data is glob.type-func)
      return
    if target.type-data is glob.type-ref and not self.type-data.is-primitive
      return
    if target-access = Access.OWNER
      if self-access != Access.OWNER
        node.syntax-error(
            user "assigning into an owner a non-owner access",
            user glob.access-names[self-access])
      if self.type-data is-not target.type-data and
          self.type-data is-not glob.type-empty and
          not target.type-data.is-primitive and
          not target.type-data.is-dynamic
        node.m-syntax-error2(
            user "passing ownership of type",
            user self.type-data.name,
            user "into static type",
            user target.type-data.name)
    if self.type-data is glob.type-generic and
        target.type-data is glob.type-generic
      if not self.name.equal(user target.name)
        node.m-syntax-error2(
            user "cannot assign generic subtype",
            user self.name,
            user "into different generic subtype",
            user target.name)
    user TypeInstance self-type-instance(user self)
    owner TypeInstance base-type-instance
    do
      while not target.type-data.is-same(user self-type-instance.type-data)
      if not self-type-instance.type-data.base-type?
        node.m-syntax-error2(
            user "cannot assign",
            user self.type-data.name,
            user "into",
            user target.type-data.name)
      owner TypeInstance prev-base-type-instance(owner base-type-instance)
      self-type-instance.type-data.base-type.new-replace-params(
          user self-type-instance, copy 0)->(owner base-type-instance)
      self-type-instance := base-type-instance
      bases += 1
    
    if self.arguments?
      if self.arguments.check-same-as(
          user target.arguments, user _, copy 0)
        node.syntax-error-msg(user "too few outputs")
    
    self-type-instance.check-sub-equal(user target, user node)
  
  func check-equal(user TypeInstance other, user SyntaxTreeNode node)
    if self.type-data is-not other.type-data
      node.m-syntax-error2(
          user "non matching types",
          user self.type-data.name,
          user "and",
          user other.type-data.name)
    self.check-sub-equal(user other, user node)
  
  func check-sub-equal(user TypeInstance target, user SyntaxTreeNode node)
    if not target.parameters?
      return
    user ListNode{TypeInstance} target-sub-type(user target.parameters.first)
    if not self.parameters?
      node.m-syntax-error2(
          user "cannot assign type",
          user self.type-data.name,
          user "with no parameter into same type with parameter",
          user target-sub-type.item.type-data.name)
    
    user ListNode{TypeInstance} my-sub-type(user self.parameters.first)
    do
      while target-sub-type? and my-sub-type?
      if my-sub-type.item.type-data is-not target-sub-type.item.type-data
        node.m-syntax-error2(
            user "non matching subtypes",
            user my-sub-type.item.type-data.name,
            user "and",
            user target-sub-type.item.type-data.name)
      my-sub-type.item.check-sub-equal(user target-sub-type.item, user node)
      my-sub-type := my-sub-type.next
      target-sub-type := target-sub-type.next
    
  func check-sequence(user SyntaxTreeNode node)
    if (self.type-data is glob.type-array or
        self.type-data is glob.type-string) and not self.length?
      node.syntax-error-msg(user "missing length for sequence")
    if self.type-data is glob.type-array and
        self.parameters.first.item.type-data is glob.type-string and
        not self.parameters.first.item.length?
      node.syntax-error-msg(user "missing length for sequence")
  
  func new-replace-params(
      user TypeInstance instance-type, copy Int bases)->(
      owner TypeInstance type-instance)
    self.copy-new()->(owner type-instance)
    if type-instance?
      type-instance.replace-type-parameters(user instance-type, copy bases)
  
  func replace-type-parameters(
      user TypeInstance instance-type, copy Int bases)
    if not instance-type?
      return
    if bases > 0
      owner TypeInstance base-type
      instance-type.type-data.base-type.new-replace-params(
          user instance-type, copy bases - 1)->(owner base-type)
      self.replace-type-parameters(user base-type, copy bases - 1)
    if self.type-data is glob.type-generic and instance-type.parameters? and
        instance-type.type-data.parameters?
      user ListNode{String} dec-node(
          user instance-type.type-data.parameters.first)
      user ListNode{TypeInstance} inst-node(user instance-type.parameters.first)
      do
        while dec-node? and inst-node?
        if dec-node.item.equal(user self.name)
          inst-node.item.copy(user self)
          while false
        dec-node := dec-node.next
        inst-node := inst-node.next
    if self.parameters?
      user ListNode{TypeInstance} node(user self.parameters.first)
      do
        while node?
        node.item.replace-type-parameters(user instance-type, copy bases)
        node := node.next

~~~ TL5 compiler - Generic mappings ~~~
module tl5-compiler

~~~ A generic single link list ~~~
struct List{Generic}
  owner ListNode{Generic} first
  user ListNode{Generic} last
  
  func is-empty()->(var Bool is-empty)
    is-empty := not self.first?
  
  func add(owner Generic item)
    new ListNode{Generic} node
    node.item := item
    if self.last?
      self.last.next := node
      node.prev := self.last
    else
      self.first := node
    self.last := node
  
  func prepend(owner Generic item)
    new ListNode{Generic} node
    node.item := item
    if self.first?
      node.next := self.first
      self.first.prev := node
    self.first := node
    if not self.last?
      self.last := node
  
  func pop()->(owner Generic item)
    if self.first?
      item := self.first.item
      owner ListNode{Generic} first(owner self.first)
      self.first := first.next
      if self.first?
        self.first.prev := _
      else
        self.last := _
    else
      item := _
  
  func remove(user Generic ref)->(owner Generic item)
    user ListNode{Generic} prev
    user ListNode{Generic} node(user self.first)
    do
      while node?
      if node.item is ref
        item := node.item
        owner ListNode{Generic} next(owner node.next)
        if next?
          next.prev := prev
        else
          self.last := prev
        if prev?
          prev.next := next
        else
          self.first := next
        return
      node := node.next
    item := _


struct ListNode{Generic}
  owner ListNode{Generic} next
  user ListNode{Generic} prev
  owner Generic item

~~~ TL5 compiler - Generic mappings ~~~
module tl5-compiler

~~~ A generic single link list ~~~
struct List{Generic}
  owner ListNode{Generic} first
  user ListNode{Generic} last
  
  func is-empty()->(var Bool empty)
    empty := self.first is _
  
  ~~~ Add item to list end ~~~
  func add(owner Generic item)
    new ListNode{Generic} node(owner item, owner _, user self.last)
    if self.last?
      self.last.next := node
      self.last := self.last.next
    else
      self.first := node
      self.last := self.first
  
  ~~~ Add item to list start ~~~
  func prepend(owner Generic item)
    new ListNode{Generic} node(owner item, owner self.first, user _)
    self.first := node
    if self.last is _
      self.last := self.first
    if self.first.next?
      self.first.next.prev := self.first
  
  ~~~ Get and remove first item, fail if list is empty ~~~
  func pop()->(owner Generic item)
    if not self.first?
      item := _
      return
    item := self.first.item
    owner ListNode{Generic} first(owner self.first)
    self.first := first.next
    if self.first?
      self.first.prev := _
    else
      self.last := _
  
  func remove(user Generic ref)->(owner Generic item)
    user ListNode{Generic} node(user self.first)
    do
      while node?
      if node.item is ref
        item := node.item
        owner ListNode{Generic} next(owner node.next)
        if next?
          next.prev := node.prev
        else
          self.last := node.prev
        if node.prev?
          node.prev.next := next
        else
          self.first := next
        return
      node := node.next
    item := _


~~~ Single node in the list ~~~
struct ListNode{Generic}
  owner ListNode{Generic} next
  user ListNode{Generic} prev
  owner Generic item
  
  func new(
      owner Generic item,
      owner ListNode{Generic} next,
      user ListNode{Generic} prev)
    self.next := next
    self.prev := prev
    self.item := item

~~~ TL5 compiler - Generic mappings ~~~
module tl5-compiler

~~~ Maps from a string name to a generic object ~~~
struct NameMap{Generic}
  owner NameMapNode{Generic} first
  user NameMapNode{Generic} last
  
  ~~~ Add `name` -> `value` mapping ~~~
  func add(user String name, user Generic value)
    new NameMapNode{Generic} node(user name, user value)
    if self.last?
      self.last.next := node
      self.last := self.last.next
    else
      self.first := node
      self.last := self.first
  
  ~~~ Find a value mapped from `name`, return empty if not exists ~~~
  func find(user String name)->(user Generic value)
    user NameMapNode{Generic} node(user self.first)
    do
      while node?
      if node.name.equal(user name)
        value := node.value
        return
      node := node.next
    value := _
  
  func update-or-add(user String name, user Generic value)
    user NameMapNode{Generic} node(user self.first)
    do
      while node?
      if node.name.equal(user name)
        node.value := value
        return
      node := node.next
    self.add(user name, user value)
  
  ~~~ Add mapping only if value not exists ~~~
  func add-if-unique-value(user String name, user Generic value)
    user NameMapNode{Generic} node(user self.first)
    do
      while node?
      if node.value is value
        return
      node := node.next
    self.add(user name, user value)
  
  func iter()->(owner NameMapIterator{Generic} iter)
    iter := NameMapIterator{Generic}(user self)


struct NameMapNode{Generic}
  owner NameMapNode{Generic} next
  user String name
  user Generic value
  
  func new(user String name, user Generic value)
    self.name := name
    self.value := value


~~~ Iterate over a Map ~~~
struct NameMapIterator{Generic}
  user NameMapNode{Generic} node
  
  func new(user NameMap{Generic} map)
    self.node := map.first
  
  func has()->(var Bool has)
    has := self.node?
  
  func get()->(user Generic value)
    value := self.node.value
  
  func next()
    self.node := self.node.next

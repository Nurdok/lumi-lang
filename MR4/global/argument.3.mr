## MR4 compiler - Function arguments


## Basic function argument
class Argument(SyntaxTreeNode)
  var Int access
  var Bool is-output
  
  func dynamic m-copy-new():(owner DeclarationArgument new-argument)
    raise
  
  func inst parse(
      user String access-str,
      copy Bool is-output,
      user SyntaxTreeCode code-node):(
      copy Char end)
    self.is-output := is-output
    self.set-location()
    self.get-access(user access-str):(copy self.access)
    self.parse-value(user code-node):(copy end)
  
  func dynamic parse-value(user SyntaxTreeCode code-node):(copy Char end)
    raise
  
  func dynamic get-type-instance():(user TypeInstance type-instance)
    raise
  
  func inst m-check-same-as(user Argument other)
    if self.access != other.access
      self.m-syntax-error2(
          user "expected access",
          user glob.access-names[other.access],
          user ", got",
          user glob.access-names[self.access])
    self.m-check-same-type-as(user other.get-type-instance())
  
  func dynamic m-check-same-type-as(user TypeInstance type-instance)
    self.get-type-instance().m-check-equal(user type-instance, user self)
  
  func dynamic get-variable():(user SyntaxTreeVariable variable)
    raise
  
  func dynamic get-output():(user Expression output)
    raise
  
  func dynamic write-preactions()
    raise


class ArgumentFactory
  func dynamic m-new-argument():(owner Argument new-argument)
    raise


## All function parameters and outputs
class FunctionArguments(SyntaxTreeNode)
  owner List{Argument} parameters
  owner List{Argument} outputs
  
  func inst m-copy-new():(owner FunctionArguments new-arguments)
    new FunctionArguments in new-arguments
    new-arguments.init()
    self.m-copy-new-args(user self.parameters, user new-arguments.parameters)
    self.m-copy-new-args(user self.outputs, user new-arguments.outputs)
  
  func inst m-copy-new-args(
      user List{Argument} arguments, user List{Argument} new-arguments)
    user ListNode{Argument} node(arguments.first)
    do
      while ? node
      new-arguments.add(owner node.item.m-copy-new())
      node := node.next
  
  func inst init()
    self.set-location()
    new List{Argument} in self.parameters
    new List{Argument} in self.outputs
  
  func inst parse(
      user ArgumentFactory argument-factory, user SyntaxTreeCode code-node):(
      copy Char end)
    self.init()
    self.parse-args(
        user self.parameters, user argument-factory, user code-node):(copy end)
    if end = '-'
      self.read-expect(user ">(")
      self.parse-args(
          user self.outputs, user argument-factory, user code-node):(copy end)
  
  func inst add-self-parameter(user TypeData parent-type)
    new DeclarationArgument self-args
    self-args.access := ACCESS-VAR
    new SyntaxTreeVariable in self-args.variable
    string-new-copy(user "self"):(owner self-args.variable.name)
    parent-type.m-new-type-instance():(owner self-args.variable.type-instance)
    self.parameters.m-prepend(owner self-args)
  
  func inst parse-args(
      user List{Argument} arguments,
      user ArgumentFactory argument-factory,
      user SyntaxTreeCode code-node):(
      copy Char end)
    owner Argument argument
    user String access-str
    var Bool is-output(arguments = self.outputs)
    read-until(user " )", copy false):(user access-str, copy end)
    if end = '\n' and access-str.length = 0
      code-node.read-line-break-spaces()
      read-until(user " ", copy false):(user access-str, copy end)
    if end != ')' or access-str.length > 0
      do
        if access-str.length = 0
          self.m-syntax-error-c(user "expected access, got", copy end)
        if end != ' '
          self.m-syntax-error-c(
              user "expected space after access, got", copy end)
        argument-factory.m-new-argument():(owner argument)
        arguments.add(owner argument)
        argument.parse(user access-str, copy is-output, user code-node):(
            copy end)
        while end = ','
        read-c():(copy end)
        if end = '\n'
          code-node.read-line-break-spaces()
        else-if end != ' '
          self.m-syntax-error-c(
              user "expected space or new-line after \",\", got",
              copy end)
        read-until(user " ", copy false):(user access-str, copy end)
    read-c():(copy end)
  
  func dynamic m-link-types()
    self.m-link-children-types(user self.parameters)
    self.m-link-children-types(user self.outputs)
  
  func dynamic analyze()
    self.analyze-children(user self.parameters)
    self.analyze-children(user self.outputs)
  
  func inst get-result-type():(user TypeInstance result-type)
    if ? self.outputs.last
      self.outputs.last.item.get-type-instance():(user result-type)
    else
      result-type := _
  
  func inst get-output():(user Expression output)
    if ? self.outputs.last
      self.outputs.last.item.get-output():(user output)
    else
      output := _
  
  func inst m-find-variable(user String name):(
      user SyntaxTreeVariable variable)
    self.m-find-variable-args(user self.parameters, user name):(user variable)
    if not (? variable)
      self.m-find-variable-args(user self.outputs, user name):(user variable)
  
  func inst m-find-variable-args(
      user List{Argument} arguments, user String name):(
      user SyntaxTreeVariable variable)
    user ListNode{Argument} node(arguments.first)
    do
      while ? node
      while not
          node.item.get-variable().m-find-variable(user name):(user variable)
      node := node.next
  
  func inst m-check-same-as(
      user FunctionArguments other):(copy Bool output-ommited)
    user ListNode{Argument} my-node(self.parameters.first)
    user ListNode{Argument} other-node(other.parameters.first)
    do
      while ? my-node and ? other-node
      my-node.item.m-check-same-as(user other-node.item)
      my-node := my-node.next
      other-node := other-node.next
    if ? my-node
      self.m-syntax-error-msg(user "too many parameters")
    if ? other-node
      self.m-syntax-error-msg(user "too few parameters")
    
    my-node := self.outputs.first
    other-node := other.outputs.first
    do
      while ? my-node and ? other-node
      my-node.item.m-check-same-as(user other-node.item)
      my-node := my-node.next
      other-node := other-node.next
    if ? my-node
      self.m-syntax-error-msg(user "too many outputs")
    if ? other-node and ? other-node.next
      self.m-syntax-error-msg(user "too few outputs")
    output-ommited := ? other-node
  
  func inst write-preactions()
    self.write-args-preactions(user self.parameters)
    self.write-args-preactions(user self.outputs)
  
  func inst write-args-preactions(user List{Argument} arguments)
    user ListNode{Argument} node(arguments.first)
    do
      while ? node
      node.item.write-preactions()
      node := node.next
  
  func inst write(copy Bool is-decleration)
    # (`params...`, `outputs...`)
    write(user "(")
    if ? self.parameters.first
      self.write-args(user self.parameters)
    if ? self.outputs.first
      if ? self.parameters.first
        write(user ", ")
      self.write-args(user self.outputs)
    else-if not (? self.parameters.first) and is-decleration
      write(user "void")
    write(user ")")
  
  func inst write-args(user List{Argument} arguments)
    user ListNode{Argument} node(arguments.first)
    do
      node.item.write()
      node := node.next
      while ? node
      write(user ", ")

## MR4 compiler - Generic mappings

## A generic single link list
static List{Generic}
  owner ListNode{Generic} first
  user ListNode{Generic} last
  
  func inst m-is-empty():(copy Bool is-empty)
    is-empty := not (? self.first)
  
  func inst add(owner Generic item)
    new ListNode{Generic} node
    node.item := item
    if ? self.last
      self.last.next := node
    else
      self.first := node
    self.last := node
  
  func inst m-prepend(owner Generic item)
    new ListNode{Generic} node
    node.item := item
    node.next := self.first
    self.first := node
    if not (? self.last)
      self.last := node
  
  func inst m-pop():(owner Generic item)
    if ? self.first
      item := self.first.item
      owner ListNode{Generic} first(self.first)
      self.first := first.next
      delete first
      if not (? self.first)
        self.last := _
    else
      item := _


static ListNode{Generic}
  owner ListNode{Generic} next
  owner Generic item

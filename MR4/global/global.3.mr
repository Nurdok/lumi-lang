## MR4 compiler - Global compiler data

static Global
  ## stores all language operators
  owner SyntaxTreeRoot root
  
  ## stores all language operators
  owner NameMap{Operator} operator-map
  
  ## stores all types - language built-ins and user defined
  owner NameMap{TypeData} type-map
  
  ## the currently parsed input file object
  owner File input-file
  
  ## the currently written output file object
  owner File output-file
  
  ## holds the name of the input-file and the line number of the code currently
  ## been worked with
  user String input-file-name
  var Int line-number
  
  ## input reading state
  owner String input-buffer
  var Char input-end
  var Int input-spaces
  var Bool got-new-line
  var Bool save-input
  
  ## built-in types
  owner TypeData type-char
  owner TypeData type-bool
  owner TypeData type-int
  owner TypeData type-empty
  owner TypeData type-func
  owner TypeData type-string
  owner TypeData type-array
  owner TypeData type-type
  owner TypeData type-base
  owner TypeData type-file
  owner TypeData type-sys
  
  func inst init()
    new SyntaxTreeRoot in self.root
    new String{1024} in self.input-buffer
    self.init-operator-map()
    self.init-builtin-types()
  
  func inst init-operator-map()
    new NameMap{Operator} in self.operator-map
    self.add-operator-copy(user "+", copy 0, copy 0)
    self.add-operator-copy(user "-", copy 0, copy 0)
    self.add-operator-copy(user "*", copy 0, copy 1)
    self.add-operator(user "div", user "/", copy 0, copy 1)
    self.add-operator(user "mod", user "%", copy 0, copy 1)
    self.add-operator(user "=", user "==", copy 1, copy 0)
    self.add-operator-copy(user "!=", copy 1, copy 0)
    self.add-operator-copy(user ">", copy 1, copy 0)
    self.add-operator-copy(user "<", copy 1, copy 0)
    self.add-operator-copy(user ">=", copy 1, copy 0)
    self.add-operator-copy(user "<=", copy 1, copy 0)
    self.add-operator(user "not", user "!", copy 2, copy 0)
    self.add-operator(user "or", user "||", copy 3, copy 0)
    self.add-operator(user "and", user "&&", copy 3, copy 1)
    self.add-operator(user ":=", user "=", copy 4, copy 0)
    self.add-operator-copy(user "+=", copy 4, copy 1)
    self.add-operator-copy(user "-=", copy 4, copy 2)
  
  func inst add-operator(
      user String name,
      user String c-name,
      copy Int order,
      copy Int group-index)
    new Operator operator
    operator.init(user name, user c-name, copy order, copy group-index)
    self.operator-map.add(user operator.name, user operator)
  
  func inst add-operator-copy(
      user String name,
      copy Int order,
      copy Int group-index)
    self.add-operator(user name, user name, copy order, copy group-index)
  
  func inst init-builtin-types()
    new NameMap{TypeData} in self.type-map
    self.add-builtin-type(user "Char", copy true):(owner self.type-char)
    self.add-builtin-type(user "Bool", copy true):(owner self.type-bool)
    self.add-builtin-type(user "Int", copy true):(owner self.type-int)
    self.add-builtin-type(user "Empty Symbol", copy false):(
        owner self.type-empty)
    self.add-builtin-type(user "Func", copy true):(owner self.type-func)
    self.add-builtin-type(user "String", copy false):(owner self.type-string)
    self.add-builtin-type(user "Array", copy false):(owner self.type-array)
    self.add-builtin-type(user "Type", copy false):(owner self.type-type)
    self.add-builtin-type(user "Base Symbol", copy false):(owner self.type-base)
    self.add-builtin-type(user "File", copy false):(owner self.type-file)
    self.add-builtin-type(user "Sys", copy false):(owner self.type-sys)
  
  func inst add-builtin-type(user String name, copy Bool is-primitive):(
      owner TypeData type-data)
    new TypeData in type-data
    string-new-copy(user name):(owner type-data.name)
    type-data.is-primitive := is-primitive
    self.add-type(user type-data)
  
  func inst add-type(user TypeData type-data)
    type-data.init()
    self.type-map.add(user type-data.name, user type-data)

var Global glob

## MR4 compiler - Syntax tree Enum

## Enum node in the syntax tree 
class EnumData(SyntaxTreeNode)
  owner String name
  user ModuleMembers my-module
  owner List{String} values
  
  func inst parse-new():(copy Char end, owner EnumData new-node)
    new EnumData in new-node
    new-node.parse():(copy end)
  
  func inst parse():(copy Char end)
    self.set-location()
    self.my-module := glob.current-module
    read-new(user ""):(owner self.name, copy end)
    if not f-is-legal-name(user self.name, copy NAME-TYPE)
      self.m-syntax-error(user "illegal Enum name", user self.name)
    if ? glob.find-type(user self.name)
      self.m-syntax-error(user "Enum name overrides type", user self.name)
    if ? self.my-module.enum-map.find(user self.name)
      self.m-syntax-error(user "redefinition of Enum", user self.name)
    new List{String} in self.values
    do
      user String value
      var Int spaces
      read-until(user " .([{?", copy true):(user value, copy end, copy spaces)
      while spaces > 0
      if spaces != 2
        self.m-syntax-error-indentation(copy spaces, copy 2)
      if not f-is-legal-name(user value, copy NAME-CONSTANT)
        self.m-syntax-error(user "illegal constant name", user value)
      if end != '\n'
        self.m-syntax-error-c(
            user "expected new-line after Enum value, got", copy end)
      self.values.add(owner string-new-copy(user value))
    if not (? self.values.first)
      self.m-syntax-error-msg(user "Enum with no values")
    glob.save-input := true
    self.my-module.enum-map.add(user self.name, user self)
  
  func inst m-has-value(user String value):(copy Bool has-value)
    has-value := true
    if value.equal(user "length")
      return
    user ListNode{String} node(self.values.first)
    do
      while ? node
      if value.equal(user node.item)
        return
      node := node.next
    has-value := false
  
  func inst write-cname()
    self.my-module.write-prefix()
    write-cname(user self.name)
  
  func dynamic write()
    write(user "\nenum {\n  ")
    user ListNode{String} node(self.values.first)
    do
      while ? node
      self.write-cname()
      write(user "_")
      write-cname(user node.item)
      if node = self.values.first
        write(user " = 0")
      node := node.next
      write(user ",\n  ")
    self.write-cname()
    write(user "_length\n")
    write(user "};\n")

## MR4 compiler - Syntax tree testing nodes

## Assert statement in the syntax tree
class SyntaxTreeAssert(SyntaxTreeCode)
  owner Expression tested
  
  func inst parse-new(user SyntaxTreeBlock parent):(
      copy Char end, owner SyntaxTreeAssert new-node)
    new SyntaxTreeAssert in new-node
    new-node.parse(user parent):(copy end)
  
  func inst parse(user SyntaxTreeBlock parent):(copy Char end)
    self.parent := parent
    self.set-location()
    parse-new-expression(user "", user self):(owner self.tested, copy end)
  
  func dynamic analyze()
    self.analyze-expression(user self.tested, user glob.type-bool)
  
  func dynamic write()
    # TEST_ASSERT(`line`, `tested`)
    self.write-spaces()
    self.tested.write-preactions()
    write(user "TEST_ASSERT(")
    self.write-line-num()
    write(user ", ")
    self.tested.write()
    write(user ")\n")

## Assert-error statement in the syntax tree
class SyntaxTreeAssertError(SyntaxTreeCode)
  owner Expression tested
  
  func inst parse-new(user SyntaxTreeBlock parent):(
      copy Char end, owner SyntaxTreeAssertError new-node)
    new SyntaxTreeAssertError in new-node
    new-node.parse(user parent):(copy end)
  
  func inst parse(user SyntaxTreeBlock parent):(copy Char end)
    self.parent := parent
    self.set-location()
    parse-new-expression(user "", user self):(owner self.tested, copy end)
  
  func dynamic analyze()
    self.tested.analyze()
  
  func dynamic write()
    self.write-spaces()
    write(user "do {\n")
    self.parent.indentation-spaces += 2
    self.write-spaces()
    write(user "++MR_trace_ignore_count;\n")
    write(user "#undef RETURN_ERROR\n")
    write(user "#define RETURN_ERROR(value) break\n")
    self.write-spaces()
    self.tested.write-preactions()
    write(user "\n#undef RETURN_ERROR\n")
    write(user "#define RETURN_ERROR(value) MR_err = value; goto MR_cleanup\n")
    self.write-spaces()
    write(user "--MR_trace_ignore_count;\n")
    self.write-spaces()
    write(user "TEST_FAIL(")
    self.write-line-num()
    write(user ")\n")
    self.parent.indentation-spaces -= 2
    self.write-spaces()
    write(user "} while (false);\n")
    self.write-spaces()
    write(user "--MR_trace_ignore_count;\n")


## Test function in the syntax tree
class SyntaxTreeTestFunction(SyntaxTreeFunction)
  func inst parse-new():(copy Char end, owner SyntaxTreeTestFunction new-node)
    new SyntaxTreeTestFunction in new-node
    new-node.parse():(copy end)
  
  func inst parse():(copy Char end)
    base.parse(user _):(copy end)
    if (? self.arguments.parameters.first) or (? self.arguments.outputs.first)
      self.m-syntax-error-msg(user "test function cannot have arguments")
    glob.test-functions.add(user self.name, user self)


## Mock function in the syntax tree
class SyntaxTreeMockFunction(SyntaxTreeFunction)
  owner String mocked-name
  owner String type-name
  
  func inst parse-new():(copy Char end, owner SyntaxTreeMockFunction new-node)
    new SyntaxTreeMockFunction in new-node
    new-node.parse():(copy end)
  
  func inst parse():(copy Char end)
    base.parse(user _):(copy end)
    var Int index
    self.name.find(user "."):(copy index)
    if index < self.name.length
      string-new-copy(user self.name[0:index]):(owner self.type-name)
      string-new-copy(user self.name[index + 1:self.name.length - index - 1]):(
          owner self.mocked-name)
      delete self.name
    else
      self.mocked-name := self.name
    string-new-concat(user "Mock ", user self.mocked-name):(owner self.name)
  
  func dynamic check-name()
    # do not check
  
  func dynamic analyze()
    user SyntaxTreeFunction mocked-func
    if ? self.type-name
      self.find-type(user self.type-name):(user self.parent-type)
      self.parent-type.find-meth(user self.mocked-name):(user mocked-func)
      if not (? mocked-func)
        self.m-syntax-error2(
            user "mocking unknown method",
            user self.mocked-name,
            user "of type",
            user self.type-name)
      self.arguments.add-self-parameter(user self.parent-type)
    else
      glob.root.find-function(user self.mocked-name):(user mocked-func)
      if not (? mocked-func)
        self.m-syntax-error(
            user "mocking unknown function", user self.mocked-name)
    self.arguments.check-same-as(user mocked-func.arguments, user _, copy 0)
    mocked-func.mocker-function := self
    base.analyze()

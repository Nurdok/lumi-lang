## MR4 compiler tests - Syntax tree

func write-syntax-tree()
  var Array{3:String{256}} mock-argv
  mock-argv[2].copy(user "mock.3.mr")
  var SyntaxTreeRoot root
  glob.root.parse(user mock-argv)
  glob.root.analyze()
  glob.root.write()


func test-global-scope(user String input-text, user String expected-output)
  f-setup-test()
  set-mock-file-text(user input-text)
  mock-input-file-text.append(copy '\n')
  write-syntax-tree()
  if mock-output-file-text[0] != '\n'
    print(user mock-output-file-text)
  assert mock-output-file-text[0] = '\n'
  f-assert-string-slice(
      user expected-output,
      user mock-output-file-text,
      copy 1,
      copy mock-output-file-text.length - 2)
  assert mock-output-file-text[mock-output-file-text.length - 1] = '\n'


func test-global-scope-error(user String input-text, user String expected-error)
  f-setup-test()
  set-mock-file-text(user input-text)
  mock-print-active := true
  assert-error write-syntax-tree()
  mock-print-active := false
  user String expected-header("Code error in mock.3.mr[")
  f-assert-string-slice(
      user expected-header,
      user mock-print-text,
      copy 0,
      copy expected-header.length)
  f-assert-string-slice(
      user expected-error,
      user mock-print-text,
      copy expected-header.length + 3,
      copy mock-print-text.length - expected-header.length - 4)
  assert mock-print-text[mock-print-text.length - 1] = '\n'


test test-global()
  test-global-scope(user "user String str", user "String* str;")
  user String expected("Int x;")
  test-global-scope(user "\n  \n\nvar Int x", user expected)
  test-global-scope(user "# comment\n\nvar Int x", user expected)
  test-global-scope(user "## documemtation\n\nvar Int x", user expected)
  test-global-scope(
      user "{# multi \n line \n comment #}\n\nvar Int x", user expected)
  test-global-scope(
      user "{## multi \n line \n documemtation #}\n\nvar Int x", user expected)
  test-global-scope-error(user "error ", user "unknown keyword \"error\"")
  test-global-scope-error(
      user "{# comment #}?", user "expected new-line in line end, got \"?\"")
  test-global-scope-error(
      user "main(\n", user "expected new-line after \"main\", got \"(\"")
  test-global-scope-error(
      user "  struct Test",
      user "indentation too big, expected \"0\" got \"2\"")
  test-global-scope-error(
      user "var Int x",
      user "no new-line before file end")


test test-type()
  test-global-scope(
      user "struct Test\n  var Int x",
      user "typedef struct Test Test;\nstruct Test {\n  Int x;\n};")
  test-global-scope(
      user "struct Test\n  var Int x",
      user "typedef struct Test Test;\nstruct Test {\n  Int x;\n};")
  test-global-scope(
      user "struct Test1\n  var Int x\nstruct Test2\n  var Int x\n\n\nstruct Test3\n  var Int x",
      user "typedef struct Test1 Test1;\ntypedef struct Test2 Test2;\ntypedef struct Test3 Test3;\nstruct Test1 {\n  Int x;\n};\nstruct Test2 {\n  Int x;\n};\nstruct Test3 {\n  Int x;\n};")
  test-global-scope(
      user "struct Test2(Test1)\n  var Int y\nstruct Test1\n  var Int x",
      user "typedef struct Test1 Test1;\ntypedef struct Test2 Test2;\nstruct Test1 {\n  Int x;\n};\nstruct Test2 {\n  Test1 _base;\n  Int y;\n};")
  test-global-scope-error(
      user "struct(\n", user "expected space after \"struct\", got \"(\"")
  test-global-scope-error(
      user "class(\n", user "expected space after \"class\", got \"(\"")
  test-global-scope-error(
      user "struct Test\n  error ",
      user "unknown keyword \"error\"")
  test-global-scope-error(
      user "struct Test",
      user "expected block in a new line, got \"EOF\"")


test test-function()
  test-global-scope(
      user "func name()",
      user "Returncode name(void);\nReturncode name(void) {\n  return OK;\n}")
  test-global-scope(
      user "func name(var String self, user String text, copy Int num)",
      user "Returncode name(String* self, String* text, Int num);\nReturncode name(String* self, String* text, Int num) {\n  return OK;\n}")
  test-global-scope(
      user "func name()->(owner String text, copy Int num)",
      user "Returncode name(String** text, Int* num);\nReturncode name(String** text, Int* num) {\n  return OK;\n}")
  test-global-scope(
      user "func name(copy Char param)->(owner String out)",
      user "Returncode name(Char param, String** out);\nReturncode name(Char param, String** out) {\n  return OK;\n}")
  test-global-scope(
      user "func name(user Array{Int} array)",
      user "Returncode name(Array* array);\nReturncode name(Array* array) {\n  return OK;\n}")
  test-global-scope(
      user "func name(user Array{Array{Array{Int}}} array)",
      user "Returncode name(Array* array);\nReturncode name(Array* array) {\n  return OK;\n}")
  test-global-scope(
      user "func name()\n  var Int x",
      user "Returncode name(void);\nReturncode name(void) {\n  Int x = 0;\n  return OK;\n}")
  test-global-scope(
      user "main\n  var Int x",
      user "USER_MAIN_HEADER {\n  Int x = 0;\n  return OK;\n}\nMAIN_FUNC")
  test-global-scope-error(
      user "func(\n", user "expected space after \"func\", got \"(\"")
  test-global-scope-error(
      user "func name\n",
      user "expected \"(\" after function name, got \"new-line\"")
  test-global-scope-error(
      user "func name( )\n",
      user "expected access, got \" \"")
  test-global-scope-error(
      user "func name(user)\n",
      user "expected space after access, got \")\"")
  test-global-scope-error(
      user "func name(var String\n",
      user "expected space after type, got \"new-line\"")
  test-global-scope-error(
      user "func name(error Int x)\n",
      user "illegal access \"error\"")
  test-global-scope-error(
      user "func name(var String str,user Int x)\n",
      user "expected space or new-line after \",\", got \"u\"")
  test-global-scope-error(
      user "func name()-()\n",
      user "expected \">(\" got \"()\"")
  test-global-scope-error(
      user "func name()",
      user "expected block in a new line, got \"EOF\"")
  test-global-scope-error(
      user "func name()\n    var Int x",
      user "indentation too big, expected \"2\" got \"4\"")


test test-members()
  test-global-scope(
      user "struct Test\n  var Int x\n  user String str",
      user "typedef struct Test Test;\nstruct Test {\n  Int x;\n  String* str;\n};")
  test-global-scope(
      user "struct Test\n  var Int x\n  func name()",
      user "typedef struct Test Test;\nstruct Test {\n  Int x;\n};\nReturncode Test_name(Test* self);\nReturncode Test_name(Test* self) {\n  return OK;\n}")
  test-global-scope(
      user "struct Test\n  var Int x\n  func name()\n    var Int x",
      user "typedef struct Test Test;\nstruct Test {\n  Int x;\n};\nReturncode Test_name(Test* self);\nReturncode Test_name(Test* self) {\n  Int x = 0;\n  return OK;\n}")
  user String expected("typedef struct Test Test;\nstruct Test {\n  Int x;\n};")
  test-global-scope(user "struct Test\n  # comment\n  var Int x", user expected)
  test-global-scope(
      user "struct Test\n  ## documemtation\n  var Int x", user expected)
  test-global-scope(
      user "struct Test\n  {# multi \n line \n comment #}\n  var Int x",
      user expected)
  test-global-scope(
      user "struct Test\n  {## multi \n line \n documemtation #}\n  var Int x",
      user expected)


test test-return()
  test-global-scope(
      user "func name()\n  return",
      user "Returncode name(void);\nReturncode name(void) {\n  return OK;\n}")
  test-global-scope(
      user "func name()\n  raise",
      user "Returncode name(void);\nReturncode name(void) {\n  RAISE(1)\n}")


test test-code-variables()
  test-code(user "var Int x", user "Int x = 0;")
  test-code(user "user String s", user "String* s = NULL;")
  test-code(user "owner Array{Int} a", user "Array* a = NULL;")
  test-code(user "user Test t", user "Test* t = NULL;")
  test-code(user "var Test t", user "Test t_Var = {0};\n  Test* t = &t_Var;")
  test-code(
      user "var String{12} s",
      user "char s_Values[12];\n  String s_Var = {12, 0, NULL};\n  String* s = &s_Var;\n  s_Var.values = s_Values;")
  test-code(
      user "var Array{12:Int} a",
      user "Int a_Values[12];\n  Array a_Var = {12, NULL};\n  Array* a = &a_Var;\n  a_Var.values = a_Values;")
  test-code(
      user "var Array{12:Test} a",
      user "Test a_Values[12];\n  Array a_Var = {12, NULL};\n  Array* a = &a_Var;\n  a_Var.values = a_Values;")
  test-code(
      user "var Array{12:String{7}} sa",
      user "char sa_Chars[12 * 7];\n  String sa_Values[12];\n  Array sa_Var = {12, NULL};\n  Array* sa = &sa_Var;\n  sa_Var.values = sa_Values;\n  MR_set_var_string_array(12, 7, sa, sa_Chars);")
  test-code(
      user "new Test t", user "Test* t = NULL;\n  t = calloc(1, sizeof(Test));")
  test-code(
      user "new String{arr[0]} s",
      user "String* s = NULL;\n  if ((0) < 0 || (0) >= (arr)->length) RAISE(3)\n  s = MR_new_string((((Int*)((arr)->values))[0]));")
  test-code(
      user "new Array{arr[0]:Int} a",
      user "Array* a = NULL;\n  if ((0) < 0 || (0) >= (arr)->length) RAISE(3)\n  a = MR_new_array((((Int*)((arr)->values))[0]), sizeof(Int));")
  test-code(
      user "new Array{arr[0]:Test} a",
      user "Array* a = NULL;\n  if ((0) < 0 || (0) >= (arr)->length) RAISE(3)\n  a = MR_new_array((((Int*)((arr)->values))[0]), sizeof(Test));")
  var String{1024} expected
  expected.copy(user "Array* sa = NULL;\n")
  expected.concat(user "  if ((0) < 0 || (0) >= (arr)->length) RAISE(3)\n")
  expected.concat(user "  if ((1) < 0 || (1) >= (arr)->length) RAISE(3)\n")
  expected.concat(user "  sa = MR_new_array((((Int*)((arr)->values))[0]), ")
  expected.concat(user "sizeof(String) + ((((Int*)((arr)->values))[1])));\n")
  expected.concat(user "  MR_set_new_string_array(")
  expected.concat(user "(((Int*)((arr)->values))[0]), ")
  expected.concat(user "(((Int*)((arr)->values))[1]), sa);")
  test-code(user "new Array{arr[0]:String{arr[1]}} sa", user expected)
  test-code(
      user "var Int x(arr[0])",
      user "Int x = 0;\n  if ((0) < 0 || (0) >= (arr)->length) RAISE(3)\n  x = (((Int*)((arr)->values))[0]);")
  test-code(user "user String s(str)", user "String* s = NULL;\n  s = str;")
  expected.copy(user "char s_Values[12];\n")
  expected.concat(user "  String s_Var = {12, 0, NULL};\n")
  expected.concat(user "  String* s = &s_Var;\n")
  expected.concat(user "  String aux_String_0_Var = {0};\n")
  expected.concat(user "  String* aux_String_0 = &aux_String_0_Var;\n")
  expected.concat(user "  s_Var.values = s_Values;\n")
  expected.concat(user "  aux_String_0->max_length = 12;\n")
  expected.concat(user "  aux_String_0->length = 11;\n")
  expected.concat(user "  aux_String_0->values = \"some string\";\n")
  expected.concat(user "  CHECK(3, String_copy(s, aux_String_0) )")
  test-code(user "var String{12} s(\"some string\")", user expected)
  test-code(
      user "new String{i} s(str)",
      user "String* s = NULL;\n  s = MR_new_string(i);\n  CHECK(3, String_copy(s, str) )")
  test-code-error(
      user "var Int", user "expected space after type, got \"new-line\"")
  test-global-scope-error(
      user "struct Test\n  var Int x(1)",
      user "type members cannot be initialized")
  test-global-scope-error(
      user "var Int x(1)", user "global variables cannot be initialized")
  test-global-scope-error(
      user "struct Test\n  var Test t\n",
      user "non-primitives cannot be declared \"var\" here yet...")
  test-code-error(user "var String s", user "missing length for sequence")
  test-code-error(
      user "var Array{4:String} sa", user "missing length for sequence")
  test-code-error(user "user Array a", user "missing subtype for array")
  test-code-error(user "var Array{23} a", user "missing subtype for array")
  test-code-error(
      user "var Array{1:Array{2:Int}} a",
      user "multidimensional array not supported yet...")
  test-code-error(user "var Array{1", user "expected \":\", got \"new-line\"")
  test-code-error(user "var String{12", user "expected \"}\", got \"new-line\"")
  test-code-error(
      user "var Array{error:Int} a", user "unknown symbol \"error\"")
  test-code-error(
      user "var Array{\"12\":Int} a",
      user "got \"String\" expression, expected \"Int\"")
  test-code-error(
      user "new Int x", user "cannot use \"new\" with primitive type \"Int\"")
  test-code-error(
      user "var Int x(1",
      user "expected \")\" after initialization, got \"new-line\"")
  test-code-error(
      user "var File f(1)",
      user "cannot initialize non-primitive type \"File\"")
  test-code-error(
      user "var Char x(1)", user "cannot assign \"Int\" into \"Char\"")


test test-simple-code()
  user String expected("Int x = 0;")
  test-code(user "# comment\n\n  var Int x", user expected)
  test-code(user "## documemtation\n\n  var Int x", user expected)
  test-code(user "{# multi \n line \n comment #}\n\n  var Int x", user expected)
  test-code(
      user "{## multi \n line \n documemtation #}\n\n  var Int x",
      user expected)


test test-if-else()
  test-code(user "if i > 3\n    i -= 2", user "if (i > 3) {\n    i -= 2;\n  }")
  test-code(
      user "if i > 3\n    i -= 2\n  else\n    i += 1",
      user "if (i > 3) {\n    i -= 2;\n  }\n  else {\n    i += 1;\n  }")
  var String{1024} expected
  expected.copy(user "if (i > 3) {\n")
  expected.concat(user "    i -= 3;\n")
  expected.concat(user "  }\n")
  expected.concat(user "  else {\n")
  expected.concat(user "    if (i > 2) {\n")
  expected.concat(user "      i -= 2;\n")
  expected.concat(user "    }\n")
  expected.concat(user "    else {\n")
  expected.concat(user "      if (i > 1) {\n")
  expected.concat(user "        i -= 1;\n")
  expected.concat(user "      }\n")
  expected.concat(user "      else {\n")
  expected.concat(user "        i += 1;\n")
  expected.concat(user "      }\n")
  expected.concat(user "    }\n")
  expected.concat(user "  }")
  test-code(
      user "if i > 3\n    i -= 3\n  else-if i > 2\n    i -= 2\n  else-if i > 1\n    i -= 1\n  else\n    i += 1",
      user expected)


test test-do-loop()
  test-code(user "do\n    var Int x", user "while (true) {\n    Int x = 0;\n  }")
  test-code(user "\n  \n    \n\n  var Int x", user "Int x = 0;")
  test-code(
      user "do\n    while i > 3",
      user "while (true) {\n    if (!(i > 3)) break;\n  }")
  test-code(user "do\n    continue", user "while (true) {\n    continue;\n  }")
  test-code-error(user "do(", user "expected new-line after \"do\", got \"(\"")


test test-for-loop()
  test-code(
      user "for n in 5\n    i += n",
      user "{int n; for(n=0; n<5; ++n) {\n    i += n;\n  }}")
  test-code(
      user "for n in i:i + 2\n    i += n",
      user "{int n; for(n=i; n<i + 2; ++n) {\n    i += n;\n  }}")
  test-code-error(user "for(", user "expected space after \"for\", got \"(\"")
  test-code-error(
      user "for n", user "expected space after index name, got \"new-line\"")
  test-code-error(
      user "for n error", user "expected \"in \" got \"err\"")

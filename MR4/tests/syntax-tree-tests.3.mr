## MR4 compiler tests - Syntax tree

func write-syntax-tree()
  var Array{3:String{256}} mock-argv
  mock-argv[2].copy(user "mock.3.mr")
  var SyntaxTreeRoot root
  glob.root.parse(user mock-argv)
  glob.root.analyze()
  glob.root.write()


func test-global-scope(user String input-text, user String expected-output)
  f-setup-test()
  set-mock-file-text(user input-text)
  mock-input-file-text.append(copy '\n')
  write-syntax-tree()
  if mock-output-file-text[0] != '\n'
    print(user mock-output-file-text)
  assert mock-output-file-text[0] = '\n'
  assert mock-output-file-text[mock-output-file-text.length - 1] = '\n'
  f-assert-string-slice(
      user expected-output,
      user mock-output-file-text,
      copy 1,
      copy mock-output-file-text.length - 2,
      copy true)


func test-global-scope-error(user String input-text, user String expected-error)
  f-setup-test()
  set-mock-file-text(user input-text)
  mock-print-active := true
  assert-error write-syntax-tree()
  mock-print-active := false
  user String expected-header("Code error in mock.3.mr[")
  f-assert-string-slice(
      user expected-header,
      user mock-print-text,
      copy 0,
      copy expected-header.length,
      copy false)
  assert mock-print-text[mock-print-text.length - 1] = '\n'
  f-assert-string-slice(
      user expected-error,
      user mock-print-text,
      copy expected-header.length + 3,
      copy mock-print-text.length - expected-header.length - 4,
      copy true)


test test-illegal-usage()
  var Array{2:String{4}} mock-argv
  var SyntaxTreeRoot root
  mock-print-active := true
  assert-error glob.root.parse(user mock-argv)
  mock-print-active := false
  f-assert-string-slice(
      user "usage: mr-4compiler OUTPUT-C-FILE-NAME INPUT-MR3-FILES...",
      user mock-print-text,
      copy 0,
      copy mock-print-text.length,
      copy false)


test test-general()
  test-new-file(user "syntax-tree-tests", user "test-general")


test test-struct()
  test-from-file(user "test-struct")


test test-class()
  test-from-file(user "test-class")


test test-function()
  test-from-file(user "test-function")


test test-members()
  test-from-file(user "test-members")


test test-return()
  test-from-file(user "test-return")


test test-code-variables()
  test-from-file(user "test-code-variables")


test test-initialize()
  test-from-file(user "test-initialize")


test test-comment()
  test-from-file(user "test-comment")


test test-if-else()
  test-from-file(user "test-if-else")


test test-do-loop()
  test-from-file(user "test-do-loop")


test test-for-loop()
  test-from-file(user "test-for-loop")


test test-testing()
  test-from-file(user "test-testing")


test test-native()
  test-from-file(user "test-native")


test test-parameter-type()
  test-from-file(user "test-parameter-type")


test test-parameter-inheritance()
  test-from-file(user "test-parameter-inheritance")


test test-error-handling()
  test-from-file(user "test-error-handling")


test test-for-each()
  test-from-file(user "test-for-each")


test test-complex-fields()
  test-from-file(user "test-complex-fields")

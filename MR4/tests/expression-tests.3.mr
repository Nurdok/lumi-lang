## MR4 compiler tests - Expression

func test-code(user String input-text, user String expected-output)
  f-setup-test()
  set-mock-file-text(
      user "func mock(copy Int i, copy Char c, copy Bool b, user String str, user Array{Int} arr)\n  ")
  mock-input-file-text.concat(user input-text)
  mock-input-file-text.append(copy '\n')
  write-syntax-tree()
  user String expected-header("\nReturncode mock(Int i, Char c, Bool b, String* str, Array* arr);\nReturncode mock(Int i, Char c, Bool b, String* str, Array* arr) {\n  ")
  user String expected-footer("\n  return OK;\n}\n")
  f-assert-string-slice(
      user expected-header,
      user mock-output-file-text,
      copy 0,
      copy expected-header.length)
  f-assert-string-slice(
      user expected-output,
      user mock-output-file-text,
      copy expected-header.length,
      copy mock-output-file-text.length - expected-header.length -
      expected-footer.length)
  f-assert-string-slice(
      user expected-footer,
      user mock-output-file-text,
      copy mock-output-file-text.length - expected-footer.length,
      copy expected-footer.length)


func test-code-error(user String input-text, user String expected-error)
  f-setup-test()
  set-mock-file-text(user "func mock()\n  ")
  mock-input-file-text.concat(user input-text)
  mock-input-file-text.append(copy '\n')
  mock-print-active := true
  assert-error write-syntax-tree()
  mock-print-active := false
  user String expected-header("Code error in mock.3.mr[")
  f-assert-string-slice(
      user expected-header,
      user mock-print-text,
      copy 0,
      copy expected-header.length)
  f-assert-string-slice(
      user expected-error,
      user mock-print-text,
      copy expected-header.length + 3,
      copy mock-print-text.length - expected-header.length - 4)
  assert mock-print-text[mock-print-text.length - 1] = '\n'


test test-int-expression()
  test-code(user "i := 0", user "i = 0;")
  test-code(user "i := 9630", user "i = 9630;")
  test-code(user "i := -9630", user "i = -9630;")
  test-code(user "i := 07520", user "i = 07520;")
  test-code(user "i := 0b1011", user "i = 0b1011;")
  test-code(user "i := 0xfda940", user "i = 0xfda940;")
  test-code(user "i := 0xFDA940", user "i = 0xFDA940;")
  test-code-error(user "2a", user "illegal number \"2a\"")
  test-code-error(user "0a", user "illegal number \"0a\"")
  test-code-error(user "038", user "illegal octal number \"038\"")
  test-code-error(user "0b021", user "illegal binary number \"0b021\"")
  test-code-error(user "0xadg", user "illegal hexadecimal number \"0xadg\"")


test test-char-expression()
  test-code(user "c := 'a'", user "c = 'a';")
  test-code(user "c := '\\''", user "c = '\\'';")
  test-code(user "c := '\\n'", user "c = '\\n';")
  test-code(user "c := '\\x0f'", user "c = '\\x0f';")
  test-code(user "c := '\\xA9'", user "c = '\\xA9';")
  test-code(user "c := '\\270'", user "c = '\\270';")
  test-code-error(user "'''", user "illegal character constant \"'''\"")
  test-code-error(
      user "'\\'", user "illegal character constant \"'\\'\"")
  test-code-error(user "'aa'", user "illegal character constant \"'aa'\"")
  test-code-error(
      user "'\\c'", user "illegal character constant \"'\\c'\"")
  test-code-error(
      user "'aaaa'", user "illegal character constant \"'aaaa'\"")
  test-code-error(
      user "'\\x6fg'", user "illegal character constant \"'\\x6fg'\"")
  test-code-error(
      user "'\\058'", user "illegal character constant \"'\\058'\"")
  test-code-error(user "''", user "illegal character constant \"''\"")
  test-code-error(
      user "'aaa'", user "illegal character constant \"'aaa'\"")
  test-code-error(
      user "'aaaaa'", user "illegal character constant \"'aaaaa'\"")
  test-code-error(
      user "'aa", user "illegal character constant \"'aa\"")


test test-string-expression()
  test-code(
      user "str := \"some string\"",
      user "String aux_String_0;\n  str = aux_String_0;")
  test-code-error(user "\"aaa", user "illegal string constant \"\"aaa\"")


test test-empty-expression()
  test-code(user "str := _", user "str = NULL;")


# test test-base-expression()
  # test-code(user "base", user "Base")


# test test-type-expression()
  # test-code(user "TypeName", user "TypeName")


# test test-member-expression()
  # test-code(user "str.length", user "str->length;")
  # test-code(user "str.length.str", user "str->length->str;")


test test-slice-expression()
  test-code(
      user "i := arr[13]",
      user "if ((13) < 0 || (13) >= (arr)->length) RAISE(1)\n  i = (((Int*)((arr)->values))[13]);")
  test-code(
      user "arr := arr[2:6]",
      user "Array{Int} aux_Array_0;\n  aux_Array_0.length = 6;\n  aux_Array_0.values = (arr)->values + (2);\n  if ((2) < 0 || (6) < 0 || (2) + (6) > (arr)->length) RAISE(1)\n  arr = aux_Array_0;")


# test test-call-expression()
  # test-code(user "function()", user "function()")
  # test-code(
      # user "function(copy 3, user arg, var _)",
      # user "function(3, arg, NULL)")
  # test-code(
      # user "function()->(owner arg, copy num)",
      # user "function(&(arg), &(num))")
  # test-code(
      # user "function(copy 0)->(owner arg)",
      # user "function(0, &(arg))")
  # test-code(
      # user "function(copy calc(copy 3))",
      # user "function(calc(3))")
  # test-code(
      # user "function(\n    copy 2,\n    copy 3)->(\n    copy x,\n    copy y)",
      # user "function(2, 3, &(x), &(y))")
  # test-code-error(
      # user "function( copy 1)", user "expected access, got \" \"")
  # test-code-error(
      # user "function(user)", user "expected space after access, got \")\"")
  # test-code-error(
      # user "function(copy 4,copy 3)",
      # user "expected space or new-line after \",\", got \"c\"")
  # test-code-error(
      # user "function(copy 2", user "expected \",\" or \")\", got \"EOF\"")
  # test-code-error(
      # user "function(error 4)", user "illegal access \"error\"")


test test-block-expression()
  test-code(user "i := (123)", user "i = (123);")


test test-unary-expression()
  test-code(user "i := - i", user "i = - i;")
  test-code(user "i := -\n    i", user "i = - i;")
  test-code(user "i := - - i", user "i = - (- i);")
  test-code-error(user "[45]", user "unexpected \"[\"")


test test-binary-expression()
  test-code(user "i := 23 + 54", user "i = 23 + 54;")
  test-code(user "i := 100 * 2 - 37", user "i = (100 * 2) - 37;")
  test-code(user "i := 12 *\n    13", user "i = 12 * 13;")
  test-code(user "b := 3 < 5 and 23 < 37", user "b = (3 < 5) && (23 < 37);")
  test-code-error(user "345 @ 2", user "unknown operator \"@\"")
  test-code-error(user "80 +(", user "unexpected \"(\"")


test test-question-expression()
  test-code(user "b := str?", user "b = str != NULL;")


# test test-complex-operand()
  # test-code(
      # user "base.func().array[3].seq[4][70]()()[23]",
      # user "Base.func().array[3].seq[4][70]()()[23]")


# test test-complex-expression()
  # test-code(
      # user "4 + (array[5] - 23) > 2 + func(copy 2 + base.meth())->(owner item).val or (var.arr[1]? and num < 5)",
      # user "((4 + (array[5] - 23)) > (2 + func(2 + Base.meth(), &(item)).val)) || ((var.arr[1] != NULL) && (num < 5))")

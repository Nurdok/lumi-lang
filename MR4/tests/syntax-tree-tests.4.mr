## @@ test-general
## @ g t0
user String str
## @ g t1

  

var Int x
## @ g t2
# comment

var Int x
## @ g t3
## documemtation

var Int x
## @ g t4
{# multi 
 line 
 comment #}

var Int x
## @ g t5
{## multi 
 line 
 documemtation #}

var Int x
## @ eg t6
error 
## @ ec t7
1 + 2
## @ ec t8
return
  i := 3
## @ ec t9
raise
  i := 3
## @ eg t10
{# comment #}?
## @ eg t11
main(

## @ eg t12
  struct Test
## @ eg t13
func f()
  x :=
    y
## @ eg t14
var Int x
## @ eg t15
var Int name
var Int name

## @ eg t16
func name()
var Int name
## @@ test-struct
## @ g t0
struct Test
  var Int x
## @ g t1
struct Test
  var Int x
## @ g t2
struct Test1
  var Int x
struct Test2
  var Int x


struct Test3
  var Int x
## @ g t3
struct Test2(Test1)
  var Int y
struct Test1
  var Int x
## @ eg te0
struct(

## @ eg te1
struct error

## @ eg te2
struct ERrror

## @ eg te3
struct Error-name

## @ eg te4
struct E

## @ eg te5
struct Int

## @ eg te6
struct Test
struct Test

## @ eg te7
struct Test(Base

## @ eg te8
struct Test
  error 
## @ eg te9
struct Test
## @ eg te10
struct Error

## @@ test-class
## @ g t0
class Base
  var Int x
  func inst stat()
  func dynamic dyn0()
  func dynamic dyn1()
class Mid(Base)
  var Int y
  func dynamic dyn0()
  func dynamic dyn2()
class Top(Mid)
  var Int z
  func dynamic dyn0()
    base()
  func dynamic dyn3()
    base.dyn0()
## @ eg t1
class(

## @ eg t2
class Error
  var Int x

## @@ test-function
## @ g t0
func name()
## @ g t1
func name(var String self, user String text, copy Int num)
## @ g t2
func name()->(owner String text, var Int num)
## @ g t3
func name(copy Char param)->(owner String out)
## @ g t4
func name(user Array{Int} array)
## @ g t5
func name(copy Func{(copy Int x)->(var Int y)} fun)->(var Func{()} joy)
## @ g t6
func name()
  var Int x
## @ g t7
func name(var String self, copy Int px, user String pu, owner String po)->(
    var String oself, var Int ox, user String ou, owner String oo)
  var Int x
  user String u
  owner String o
  var String{12} v
  new String{12} n
  o := String{12}()
  u := "constant string"
  pu := po[2:6]
## @ g tm0
main
  var Int x
## @ eg te0
func(

## @ eg te1
func name

## @ eg te2
func Error()

## @ eg te3
func error_name()

## @ eg te4
func name()
func name()

## @ eg te5
var Int name
func name()

## @ eg te6
func name( )

## @ eg te7
func name(user)

## @ eg te8
func name(var String

## @ eg te9
func name(error Int x)

## @ eg te10
func name(var String str,user Int x)

## @ eg te11
func name()-()

## @ eg te12
func name()
## @ eg te13
func name()
    var Int x
## @ eg te14
func name(user Int x)

## @ eg te15
func name()->(copy Int x)

## @ eg te16
func name(copy String s)

## @ eg te17
func name(user Array error)

## @ eg te18
func name(copy Func error)

## @ eg te19
func name(user Array{Array{Int}} error)

## @@ test-members
## @ g t0
struct Test
  var Int x
  user String str
## @ g t1
struct Test
  var Int x
  func name()
## @ g t2
struct Test
  var Int x
  func name()
    var Int x
## @ g t3
struct Test
  # comment
  var Int x
## @ g t4
struct Test
  ## documemtation
  var Int x
## @ g t5
struct Test
  {# multi 
 line 
 comment #}
  var Int x
## @ g t6
struct Test
  {## multi 
 line 
 documemtation #}
  var Int x
## @ g t7
var Int name
func fun()
struct Test1
  var Int name
  func fun()
struct Test2
  var Int fun
  func name()

## @ eg t8
struct Test
  var Int name
  var Int name

## @ eg t9
struct Test
  func name()
  var Int name

## @ eg t10
struct Test
  func name()
  func name()

## @ eg t11
struct Test
  var Int name
  func name()

## @@ test-return
## @ g t0
func name()
  return
## @ g t1
func name()
  raise
## @ eg te0
func name()
  return()
## @ eg te1
func name()
  raise()
## @@ test-code-variables
## @ c t0
var Int x
## @ c t1
user String s
## @ c t2
owner Array{Int} a
## @ c t3
user Test tt
## @ c t4
var String{12} s
## @ c t5
var Array{12:Int} a
## @ c t6
var Array{12:Test} a
## @ c t7
var Array{12:String{7}} sa
## @ c t8
new String{12} s
  so := s
## @ ec te0
var Int
## @ ec te1
var Int Error
## @ ec te2
var Int errorName
## @ ec te3
var Int name
  var Int name

## @ ec te4
var Int name
  do
    var Int x
    do
      var Int name

## @ eg te5
var Int name
func mock()
  var Int name
## @ eg te6
func name()
func mock()
  var Int name
## @ eg te7
struct Test
  var Int x(1)
## @ eg te8
var Int x(1)
## @ eg te9
struct Test
  var Test t

## @ ec te10
new
## @@ test-initialize
## @ c t0
t := Test(copy i)
## @ c t1
str := String{arr[0]}()
## @ c t2
arr := Array{arr[0]:Int}()
## @ c t3
owner Array{Test} a(owner Array{arr[0]:Test}())
## @ c t4
owner Array{String} sa(owner Array{arr[0]:String{arr[1]}}())
## @ c t5
var Int x(copy arr[0])
## @ c t6
user String s(user str)
## @ c t7
var String{12} s(user "some string")
## @ c t8
new String{i} s(user str)
## @ c t9
user Test tt(user tc)
## @ c t10
var Test tt(copy 3)
## @ c t11
new Test tt(copy 3)
## @ c t12
t := Test(copy 3)
## @ c t13
user Tb tt(user tb)
## @ ec te0
Int()
## @ ec te1
var String s
## @ ec te2
var Array{4:String} sa
## @ ec te3
new String s
## @ ec te4
String()
## @ ec te5
user Array a
## @ ec te6
new Array a
## @ ec te7
Array()
## @ ec te8
var Array{23} a
## @ ec te9
var Array{1:Array{2:Int}} a
## @ ec te10
var Array{1
## @ ec te11
var String{12
## @ ec te12
var Array{error:Int} a
## @ ec te13
var Array{"12":Int} a
## @ ec te14
user Int x
## @ ec te15
new Int x
## @ ec te16
var File f(copy 1)
## @ ec te17
var Bool x(var 1)
## @ ec te18
var Int x(var 1, var 2)
## @ eg te19
struct Test
  var Int x
func mock()
  Test(copy 1)

## @ ec te20
var Int x(user 3)
## @ ec te21
owner String s(user so)
## @ ec te22
owner String s(owner str)
## @@ test-comment
## @ c t0
# comment

  var Int x
## @ c t1
## documemtation

  var Int x
## @ c t2
{# multi 
 line 
 comment #}

  var Int x
## @ c t3
{## multi 
 line 
 documemtation #}

  var Int x
## @@ test-if-else
## @ c t0
if t.num > 3
    i -= 2
## @ c t1
if i > 3
    i -= 2
  else
    i += 1
## @ c t2
if i > 3
    i -= 3
  else-if t.num > 2
    i -= 2
  else-if t.num > 1
    i -= 1
  else
    i += 1
## @ c t3
if b
    return
  i := 3
## @ ec t4
if 3
## @ ec t5
if b
    error
## @ ec t6
if b
    i := 0
  else
    error
## @ ec t7
if b
    i := 0
  else-if b
    error
## @ ec t8
if b
    return
    i := 3
## @ ec t9
if()
## @ ec t10
else
## @ ec t11
if false
    # ...
  else 
## @ ec t12
else-if
## @ ec t13
if false
    # ...
  else-if()
## @@ test-do-loop
## @ c t0
do
    var Int x
## @ c t1

  
    

  var Int x
## @ c t2
do
    while t.num > 3
## @ c t3
do
    continue
## @ ec t4
do(
## @ ec t5
while true
## @ ec t6
continue
## @ ec t7
do
    while 2
## @ ec t8
do
    error
## @ ec t9
do
    var Int error
  do
    var Int error
## @@ test-for-loop
## @ c t0
for n in 5
    i += n
## @ c t1
for n in t.num:t.num + 2
    i += n
## @ ec t2
for(
## @ ec t3
for n
## @ ec t4
for n error
## @ ec t5
for n in str
## @ ec t6
for n in str:8
## @ ec t7
for n in 5
    error
## @@ test-testing
## @ c t0
assert t.num = 2
## @ c t1
assert-error t.num
## @ c t2
assert-error fun0()
## @ g t3
func fun()
  fun()
mock fun()
  raise
## @ g t4
mock fun()
func fun()
  fun()

## @ g t5
mock Test.meth(copy Int x)
struct Test
  var Int x
  func meth(copy Int x)
    self.meth(copy x)
## @ g t6
test fun0()
test fun1()

## @ g t7
test fun0()
test fun1()
main

## @ ec te0
assert 3
## @ ec te1
assert error
## @ ec te2
assert-error error
## @ eg te3
test fun(copy Int x)

## @ eg te4
test fun()->(copy Int x)

## @ eg te5
mock error()

## @ eg te6
mock Error.fun()

## @ eg te7
struct Test
  var Int x
mock Test.error()

## @ eg te8
mock fun(owner String s)
func fun(user String s)

## @ eg te9
mock fun(user Int s)
func fun(user String s)

## @ eg te10
mock fun(user Array{Char} a)
func fun(user Array{Int} a)

## @ ec te11
assert
## @ ec te12
assert-error
## @

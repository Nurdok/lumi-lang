## @@ test-general
## @ g t0
user String str
## @ g t1


  

var Int x
## @ g t2
# comment

var Int x
## @ g t3
## documemtation

var Int x
## @ g t4
~# multi 
 line 
 comment #~

var Int x
## @ g t5
~## multi 
 line 
 documemtation #~

var Int x
## @ eg t6
error 
## @ ec t7
1 + 2
## @ ec t8
return
  i := 3
## @ ec t9
raise
  i := 3
## @ eg t10
~# comment #~?
## @ eg t11
main(

## @ eg t12
  struct Test
## @ eg t13
func f()
  x :=
    y
## @ eg t14
var Int x
## @ eg t15
var Int name
var Int name

## @ eg t16
func name()
var Int name
## @@ test-struct
## @ g t0
struct Test
  var Int x
## @ g t1
struct Test
  var Int x
## @ g t2
struct Test1
  var Int x
struct Test2
  var Int x


struct Test3
  var Int x
## @ g t3
struct Test2(Test1)
  var Int y
struct Test1
  var Int x
## @ eg te0
struct(

## @ eg te1
struct error

## @ eg te2
struct ERrror

## @ eg te3
struct Error-name

## @ eg te4
struct E

## @ eg te5
struct Int

## @ eg te6
struct Test
struct Test

## @ eg te7
struct Test(Base

## @ eg te8
struct Test
  error 
## @ eg te9
struct Test
## @ eg te10
struct Error

## @ eg te11
struct Error
  new 

## @ eg te12
struct Error
  new()
  new()

## @ eg te13
struct Error
  var Int x
  new()->(var Int x)

## @@ test-class
## @ g t0
class Base
  var Int x
  owner Base b
  func inst stat()
  func dynamic dyn0()
  func dynamic dyn1()
class Mid(Base)
  var Int y
  owner Mid m
  func dynamic dyn0()
  func dynamic dyn2()
class Top(Mid)
  var Int z
  owner Top t
  func dynamic dyn0()
    base()
  func dynamic dyn3()
    base.dyn0()
## @ eg te0
class(

## @ eg te1
class Error
  var Int x

## @ eg te2
class Error
  func error f()

## @ eg te3
struct Base
  var Int x
  func meth()
class Error(Base)
  func dynamic meth()

## @ eg te4
class Base
  var Int x
  func dynamic meth()
class Error(Base)
  func inst meth()

## @@ test-function
## @ g t0
func name()
## @ g t1
func name(var String self, user String text, copy Int num)
## @ g t2
func name()->(owner String text, var Int num)
## @ g t3
func name(copy Char param)->(owner String out)
## @ g t4
func name(user Array{Int} array)
## @ g t5
func name(copy Func{(copy Int x)->(var Int y)} fun)->(var Func{()} joy)
## @ g t6
func name()
  var Int x
## @ g t7
func name(var String self, copy Int px, user String pu, owner String po)->(
    var String oself, var Int ox, user String ou, owner String oo)
  var Int x
  user String u
  owner String o
  var String{12} v
  new String{12} n
  o := String{12}()
  u := "constant string"
  pu := po[2:6]
## @ g t8
struct Struct
  owner Struct s
  owner Array{Struct} as
class Class
  owner Class c
  owner Array{Class} ac
  func dynamic meth()
func name(
    owner Struct ps,
    owner Class pc,
    owner Array{Struct} pas,
    owner Array{Class} pac)
  owner Struct s
  owner Class c
  owner Array{Struct} as
  owner Array{Class} ac
  owner Array{Int} ai
  owner Array{File} af
## @ g tm0
main
  var Int x
## @ eg te0
func(

## @ eg te1
func name

## @ eg te2
func Error()

## @ eg te3
func error_name()

## @ eg te4
func name()
func name()

## @ eg te5
var Int name
func name()

## @ eg te6
func name( )

## @ eg te7
func name(user)

## @ eg te8
func name(var String

## @ eg te9
func name(error Int x)

## @ eg te10
func name(var String str,user Int x)

## @ eg te11
func name()-()

## @ eg te12
func name()
## @ eg te13
func name()
    var Int x
## @ eg te14
func name(user Int x)

## @ eg te15
func name()->(copy Int x)

## @ eg te16
func name(copy String s)

## @ eg te17
func name(user Array error)

## @ eg te18
func name(copy Func error)

## @ eg te19
func name(user Array{Array{Int}} error)

## @ eg te20
func name(
  copy Int x)

## @@ test-members
## @ g t0
struct Test
  var Int x
  user String str
## @ g t1
struct Test
  var Int x
  func name()
## @ g t2
struct Test
  var Int x
  func name()
    var Int x
## @ g t3
struct Test
  # comment
  var Int x
## @ g t4
struct Test
  ## documemtation
  var Int x
## @ g t5
struct Test
  ~# multi 
 line 
 comment #~
  var Int x
## @ g t6
struct Test
  ~## multi 
 line 
 documemtation #~
  var Int x
## @ g t7
var Int name
func fun()
struct Test1
  var Int name
  func fun()
struct Test2
  var Int fun
  func name()

## @ eg t8
struct Test
  var Int name
  var Int name

## @ eg t9
struct Test
  func name()
  var Int name

## @ eg t10
struct Test
  func name()
  func name()

## @ eg t11
struct Test
  var Int name
  func name()

## @@ test-return
## @ g t0
func name()
  return
## @ g t1
func name()
  raise
## @ eg te0
func name()
  return()
## @ eg te1
func name()
  raise()
## @@ test-code-variables
## @ c t0
var Int x
## @ c t1
user String s
## @ c t2
owner Array{Int} a
## @ c t3
user Test tt
## @ c t4
var String{12} s
## @ c t5
var Array{12:Int} a
## @ c t6
var Array{12:Test} a
## @ c t7
var Array{12:String{7}} sa
## @ c t8
new String{12} s
  so := s
## @ c t9
var Array{12:Tc} a
## @ ec te0
var Int
## @ ec te1
var Int Error
## @ ec te2
var Int errorName
## @ ec te3
var Int name
  var Int name

## @ ec te4
var Int name
  do
    var Int x
    do
      var Int name

## @ eg te5
var Int name
func mock()
  var Int name
## @ eg te6
func name()
func mock()
  var Int name
## @ eg te7
struct Test
  var Int x(1)
## @ eg te8
var Int x(1)
## @ eg te9
struct Test
  var Test t

## @ ec te10
new
## @@ test-initialize
## @ c t0
t := Test(copy i)
## @ c t1
str := String{arr[0]}()
## @ c t2
arr := Array{arr[0]:Int}()
## @ c t3
owner Array{Test} a(owner Array{arr[0]:Test}())
## @ c t4
owner Array{String} sa(owner Array{arr[0]:String{arr[1]}}())
## @ c t5
var Int x(copy arr[0])
## @ c t6
user String s(user str)
## @ c t7
var String{12} s(user "some string")
## @ c t8
new String{i} s(user str)
## @ c t9
user Test tt(user tc)
## @ c t10
var Test tt(copy 3)
## @ c t11
new Test tt(copy 3)
## @ c t12
t := Test(copy 3)
## @ c t13
user Tb tt(user tb)
## @ ec te0
Int()
## @ ec te1
var String s
## @ ec te2
var Array{4:String} sa
## @ ec te3
new String s
## @ ec te4
String()
## @ ec te5
user Array a
## @ ec te6
new Array a
## @ ec te7
Array()
## @ ec te8
var Array{23} a
## @ ec te9
var Array{1:Array{2:Int}} a
## @ ec te10
var Array{1
## @ ec te11
var String{12
## @ ec te12
var Array{error:Int} a
## @ ec te13
var Array{"12":Int} a
## @ ec te14
user Int x
## @ ec te15
new Int x
## @ ec te16
var File f(copy 1)
## @ ec te17
var Bool x(var 1)
## @ ec te18
var Int x(var 1, var 2)
## @ eg te19
struct Test
  var Int x
func mock()
  Test(copy 1)

## @ ec te20
var Int x(user 3)
## @ ec te21
owner String s(user so)
## @ ec te22
owner String s(owner str)
## @ ec te23
var Array{1:Int:Int} a
## @@ test-comment
## @ c t0
# comment

  var Int x
## @ c t1
## documemtation

  var Int x
## @ c t2
~# multi 
 line 
 comment #~

  var Int x
## @ c t3
~## multi 
 line 
 documemtation #~

  var Int x
## @@ test-if-else
## @ c t0
if t.num > 3
    i -= 2
## @ c t1
if i > 3
    i -= 2
  else
    i += 1
## @ c t2
if i > 3
    i -= 3
  else-if t.num > 2
    i -= 2
  else-if t.num > 1
    i -= 1
  else
    i += 1
## @ c t3
if b
    return
  i := 3
## @ ec te0
if 3
## @ ec te1
if b
    error
## @ ec te2
if b
    i := 0
  else
    error
## @ ec te3
if b
    i := 0
  else-if b
    error
## @ ec te4
if b
    return
    i := 3
## @ ec te5
if()
## @ ec te6
else
## @ ec te7
if false
    # ...
  else 
## @ ec te8
else-if
## @ ec te9
if false
    # ...
  else-if()
## @ eg te10
func error()
  if b
## @@ test-do-loop
## @ c t0
do
    var Int x
## @ c t1

  
    

  var Int x
## @ c t2
do
    while t.num > 3
## @ c t3
do
    continue
## @ ec te0
do(
## @ ec te1
while true
## @ ec te2
continue
## @ ec te3
do
    while 2
## @ ec te4
do
    error
## @ ec te5
do
    var Int error
  do
    var Int error
## @ ec te6
do
    while i := 3
## @@ test-for-loop
## @ c t0
for n in 5
    i += n
## @ c t1
for n in t.num:t.num + 2
    i += n
## @ c t2
for ch in str
    c := ch
## @ c t3
for n in arr
    i += n
## @ c t4
for s in sarr
    str := s
## @ c t5
var Int n
  for n in 5
    i += n
## @ c t6
for n in 5
    i += n
  for n in 7
    i += n
## @ ec te0
for(
## @ ec te1
for n
## @ ec te2
for n error
## @ ec te3
for n in fun0()
## @ ec te4
for n in str:8
## @ ec te5
for n in 5
    error
## @ ec te6
for n in arr
    i += n
  for n in sarr

## @@ test-testing
## @ c t0
assert t.num = 2
## @ c t1
assert-error t.num
## @ c t2
assert-error fun0()
## @ g t3
func fun()
  fun()
mock fun()
  raise
## @ g t4
mock fun()
func fun()
  fun()

## @ g t5
mock Test.meth(copy Int x)
struct Test
  var Int x
  func meth(copy Int x)
    self.meth(copy x)
## @ g t6
test fun0()
test fun1()

## @ g t7
test fun0()
test fun1()
main

## @ ec te0
assert 3
## @ ec te1
assert error
## @ ec te2
assert-error error
## @ eg te3
test fun(copy Int x)

## @ eg te4
test fun()->(copy Int x)

## @ eg te5
mock error()

## @ eg te6
mock Error.fun()

## @ eg te7
struct Test
  var Int x
mock Test.error()

## @ eg te8
mock fun(owner String s)
func fun(user String s)

## @ eg te9
mock fun(user Int s)
func fun(user String s)

## @ eg te10
mock fun(user Array{Char} a)
func fun(user Array{Int} a)

## @ ec te11
assert
## @ ec te12
assert-error
## @ eg te13
mock()
## @@ test-native
## @ g tf0
native func external()
func call()
  external()
## @ g tf1
class Test
  var Int x
  func dynamic meth()
native func external(copy Int i, user String s, user Test ta)->(var Int io)
func call()
  var Int i
  user String s
  user Test ta
  external(copy 5, user s, user ta)->(var i)
## @ g tv0
native var Int x
## @ g tt0
native type Native
native func external(copy Native n)->(var Native no)
## @ eg te0
native()
## @ eg te1
native error
## @ eg te2
native error 
## @ eg tef1
native func error(owner String s)

## @ eg tef2
native func error()->(user String s)

## @ eg tef3
native func error()->(owner String s)

## @ eg tev3
native var String s

## @@ test-parameter-type
## @ g t0
struct Test{Generic}
  owner Generic item
  user Array{Generic} arr
  func set(owner Generic item, user Array{Generic} arr)
    owner Generic x(owner item)
    self.item := x
    self.arr := arr
    new Test{Generic} t
    t.item := self.item
    self.item := t.item
## @ g t1
struct Test{Generic}
  owner Generic item
  func get()->(user Generic item)
    item := self.item
## @ g t2
struct Test{First:Second:Third}
  user First first
  user Second second
  user Third third
  func set(user First first, user Second second, user Third third)
    self.first := first
    self.second := second
    self.third := third
func use(user String first, user Array{Int} second, user File third)
  var Test{String:Array{Int}:File} t
  t.first := first
  t.second := second
  t.third := third
  t.set(user first, user second, user third)
## @ g t3
struct Base
  var Int x
struct Test{Generic}(Base)
## @ c t4
d.item := str
## @ c t5
str := d.item
## @ c t6
d.arr := sarr
## @ c t7
str := d.arr[4]
## @ c t8
var Array{5:Data{String}} ad
  str := ad[2].item
## @ c t9
var Array{5:Data{String}} ad
  str := ad[2].arr[3]
## @ c t10
var Data{Array{String}} da
  str := da.item[1]
## @ c t11
var Data{Data{Data{String}}} dr
  str := dr.item.item.item
## @ c t12
d.set(owner so, user sarr)
## @ c t13
d.get()->(user str)
## @ c t14
var Data dg
## @ c t15
user Data dg(user d)
## @ c t16
Data{String}.set(var d, owner so, user sarr)
## @ g t17
struct Test{Generic}
  user Test{Generic} next
  func meth()
    self.next := self
## @ c t18
var Data{Tb} dt
  dt.item := tc
  ta := dt.item
  owner Tc otc
  dt.set(owner otc, user _)
  dt.get()->(user ta)
## @ eg teg0
struct Test{First:Second:Third
## @ eg teg1
struct Test{Generic}
  var Generic error

## @ eg teg2
struct Test{Generic}
  user Generic item
  func meth(copy Generic error)

## @ eg teg3
struct Test{Generic}
  user Generic item
  func meth(user String s)
    self.item := s

## @ eg teg4
struct Test{Generic}
  user Generic item
  func meth(user String s)
    s := self.item

## @ eg teg5
struct Test{Generic}
  user Generic item
  func meth()
    var Generic error

## @ eg teg6
struct Test{First:Second}
  user First first
  user Second second
  func meth()
    self.first := self.second

## @ eg teg7
struct Test{error}
  var Int x

## @ eg teg8
struct Test{Generic}
  user Array{Generic} arr
  func meth()
    user Generic x
    x := self.arr[2]

## @ eg teg9
struct Test{Generic}
  user Array{Generic} arr
  func meth()
    var Array{12:Generic} arr

## @ eg teg10
struct Test{Generic}
  user Array{Generic} arr
  func meth()
    self.arr := Array{12:Generic}()

## @ ec tec0
var Data{Int} error
## @ ec tec1
var Data{String:String} error
## @ ec tec2
var Data{Error} error
## @ ec tec3
var Char{String} error
## @ ec tec4
var Data dg
  str := dg.item
## @ ec tec5
var Data dg
  d := dg
## @ ec tec6
t := d.item
## @ eg tec7
struct Test{First:Second:Third}
  user First first
  user Second second
  user Third third
func meth(user Test{String:String} t)
  user Test{String:String:String} error(user t)

## @@ test-parameter-inheritance
## @ g t0
struct Base{Generic}
  user Generic item
struct Test(Base{String})
  func set(user String s)
    self.item := s
    Test.set(var Test(), user s)
func use(user String s)
  var Test t
  t.item := s
## @ g t1
struct Base{Generic}
  user Generic item
struct Test{Param}(Base{Param})
  func set(user Param i, user String s)
    self.item := i
    Test{String}.set(var Test{String}(), user s, user s)
func use(user String s)
  var Test{String} t
  t.item := s
## @ g t2
struct Base{Pbase}
  user Pbase item
  func set(user Pbase i)
struct Mid{Pmid}(Base{Pmid})
  func set(user Pmid i)
struct Top(Mid{String})
  func set(user String s)
    base(user s)
    self.item := s
struct Test(Top)
  func set(user String s)
    base(user s)
    self.item := s
    Top.set(var Top(), user s)
    Test.set(var Test(), user s)
    Mid{String}.set(var Top(), user s)
func use(user String s)
  var Test t
  t.item := s
## @ g t3
struct Base{Generic}
  user Generic item
struct Test{Generic}(Base{Generic})
  func set(user Generic i, user String s)
    self.item := i
    Test{String}.set(var Test{String}(), user s, user s)
func use(user String s)
  var Test{String} t
  t.item := s
## @ g t4
struct Base{First:Second}
  user First first
  user Second second
struct Mid{Param:Third}(Base{Param:Array{Int}})
  user Third third
  func set(user Param first, user Array{Int} second, user Third third)
    self.first := first
    self.second := second
    self.third := third
struct Top{Generic}(Mid{Generic:File})
  func set(user Generic first, user Array{Int} second, user File third)
    self.first := first
    self.second := second
    self.third := third
struct Test(Top{String})
  func set(user String first, user Array{Int} second, user File third)
    self.first := first
    self.second := second
    self.third := third
func use(user String first, user Array{Int} second, user File third)
  var Test t
  t.first := first
  t.second := second
  t.third := third
## @ g t5
struct First{FirstGeneric}
  user FirstGeneric item
struct Second{SecondGeneric}
  user SecondGeneric item
struct Test{Generic}(First{Second{Generic}})
  func set(user Generic g, user Second{Generic} sg)
    self.item := sg
    self.item.item := g
func use(user String s, user Second{String} ss)
  var Test{String} t
  t.item := ss
  t.item.item := s
## @ eg te0
struct Base{Generic}
  user Generic item
struct Test{Param}(Base{Param})
  user Generic error

## @ eg te1
struct Base{Generic}
  user Generic item
struct Test(Base{String})
  func set(user File error)
    self.item := error

## @ eg te2
struct Base{Generic}
  user Generic item
struct Test{Param}(Base{Param})
  func set(user String error)
    self.item := error

## @ eg te3
struct Base{Pbase}
  user Pbase item
struct Mid{Pmid}(Base{Pmid})
struct Top(Mid{String})
struct Test(Top)
  func set(user File error)
    self.item := error

## @@ test-error-handling
## @ c t0
try
    t.num := 1
    fun0()
  catch
    i := t.num
    fun4(copy 2)
## @ c t1
try
    t.num := 1
    fun0()
## @ c t2
try
    t.num := 1
    try
      fun0()
    catch
      fun4(copy 2)
  catch
    try
      i := arr[3]
    catch
      i := t.num
## @ ec te0
try()
## @ ec te1
catch
## @ ec te2
try
  catch()
## @ ec te3
try
## @ ec te4
try
    i := 1
  catch
## @ ec te5
try
    i := 1
  i := 2
  catch
    i := 3

## @@ test-for-each
## @ g t0
struct TestIterator
  var Int counter
  new(copy Int count)
  func has()->(var Bool has-data)
  func get()->(var Int num)
  func next()
func f-mock()->(var Int i)
  for n in TestIterator(copy 6)
    i := n
## @ g t1
struct TestIterator
  user String value
  func has()->(var Bool has-data)
  func get()->(user String text)
  func next()
func f-mock(user TestIterator iter)->(user String s)
  for t in iter
    s := t
## @ g t2
struct TestIterator{Generic}
  user Generic item
  func has()->(var Bool has-data)
  func get()->(user Generic item)
  func next()
func f-mock(user TestIterator{String} iter)->(user String s)
  for t in iter
    s := t
## @ eg te0
struct TestIterator
  var Int num
  func get()->(var Int num)
  func next()
func f-mock()
  for n in TestIterator()

## @ eg te1
struct TestIterator
  var Int num
  func has(copy Int x)->(var Bool has-data)
  func get()->(var Int num)
  func next()
func f-mock()
  for n in TestIterator()

## @ eg te2
struct TestIterator
  var Int num
  func has()
  func get()->(var Int num)
  func next()
func f-mock()
  for n in TestIterator()

## @ eg te3
struct TestIterator
  var Int num
  func has()->(var Bool has-data, var Int x)
  func get()->(var Int num)
  func next()
func f-mock()
  for n in TestIterator()

## @ eg te4
struct TestIterator
  var Int num
  func has()->(var Int x)
  func get()->(var Int num)
  func next()
func f-mock()
  for n in TestIterator()

## @ eg te5
struct TestIterator
  var Int num
  func has()->(var Bool has-data)
  func next()
func f-mock()
  for n in TestIterator()

## @ eg te6
struct TestIterator
  var Int num
  func has()->(var Bool has-data)
  func get(user Int x)->(var Int num)
  func next()
func f-mock()
  for n in TestIterator()

## @ eg te7
struct TestIterator
  var Int num
  func has()->(var Bool has-data)
  func get()
  func next()
func f-mock()
  for n in TestIterator()

## @ eg te8
struct TestIterator
  var Int num
  func has()->(var Bool has-data)
  func get()->(var Int num, var Int x)
  func next()
func f-mock()
  for n in TestIterator()

## @ eg te9
struct TestIterator
  var Int num
  func has()->(var Bool has-data)
  func get()->(owner String s)
  func next()
func f-mock()
  for n in TestIterator()

## @ eg te10
struct TestIterator
  var Int num
  func has()->(var Bool has-data)
  func get()->(var Int num)
func f-mock()
  for n in TestIterator()

## @ eg te11
struct TestIterator
  var Int num
  func has()->(var Bool has-data)
  func get()->(var Int num)
  func next(user Int x)
func f-mock()
  for n in TestIterator()

## @ eg te12
struct TestIterator
  var Int num
  func has()->(var Bool has-data)
  func get()->(var Int num)
  func next()->(var Int x)
func f-mock()
  for n in TestIterator()

## @

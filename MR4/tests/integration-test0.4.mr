{## MR4 compiler integration main test file

This file should be stand-alone.

Testing multiline documentation
confused by # or } or }# or # } ?
#}

{# Test
multiline
comment
#}

## Test Single line documentation
# Test Single line comment

# Test global variables
var Int global-int
# var Int CONSTANT-INT(23)
user String global-string
# user String CONSTANT-STRING("a constant string")


# Test functions
func test-simple-function()
  # sys.print(user "I am test func")


func test-const-expression()->(
    copy Int i, copy Char c, user String s, user TestStruct t)
  i := 0 + 9630 + -9630 + 07520 + -07520 + 0xfda940 + -0xfda940 + 0xFDA940 +
      -0xFDA940
  c := 'a' + '\'' + '\n' + '\x0f' + '\xA9' + '\270'
  s := "some string"
  t := _


func test-member-expression(user TestStruct t)->(user TestStruct to, copy Int i)
  t.num := to.num + t.ts.num + t.ts.ts.num
  to.num := t.num
  t.ts.ts.num := 4
  t.fun := f-test-void
  t.fun()


func test-slice-expression(
    user String s,
    user Array{Int} arri,
    user Array{String} arrs,
    user Array{TestStruct} arrt,
    user Array{Func{()}} arrf)->(
    copy Char c, copy Int i, user TestStruct t, copy Func{()} f)
  c := s[2] + s[4:7][2] + arrs[3][2] + arrs[4:2][4][1:3][0]
  i := arri[i + 3 - arri[2]] + arrt[4].num + arrt[2:4][1].num +
      arri[2:4][1:2][1]
  arri := arri[2 - i + arri[2:4][1]:5 * (i - 1)]
  s := arrs[4]
  arrs := arrs[2:7]
  t := arrt[4]
  arrt := arrt[2:7]
  f := _
  f := arrf[4]
  f()
  arrf[4]()
  arrf := arrf[2:7]


func test-container-expression(copy Int x, copy Int y, user String s)->(
    copy Int i, copy Bool b)
  i := - x + - - - y
  b := not ((not (x * 3) - 5 > 6 * y = 234 and not 5 - x < y) or not
      (x = -2 - (-4 * y) and -6 > y >= 12 = x)) and (- (2 + x) > y or s? or
      not s?)


func test-variable(copy Int i, user String text, user Array{Int} arr)
  var Int x
  user String s
  owner Array{Int} a
  user TestStruct t
  var TestStruct tv
  var String{12} sv
  var Func{(copy Int xi, user String si)->(copy Int xo, user String so)} f
  var Array{12:Int} ia
  var Array{12:TestStruct} ta
  var Array{12:String{7}} sa
  var Array{12:Func{()}} fa
  new TestStruct tn
  new String{arr[0]} sn
  new Array{arr[0]:Int} ian
  new Array{arr[0]:TestStruct} tan
  new Array{arr[0]:String{arr[1]}} san
  new Array{arr[0]:Func{()}} sfn
  var Int ix(arr[0])
  user String is(text)
  var String{12} isv("some string")
  new String{i} isn(text)
  var Func{(copy Int x)->(owner String s)} fi(f-test-int2str)
  assert x = 0
  assert s?
  assert a?
  assert t?
  assert f?
  assert tv?
  assert sv?
  assert ia?
  assert ta?
  assert sa?
  assert fa?
  assert tn?
  assert sn?
  assert ian?
  assert tan?
  assert san?
  assert sfn?
  assert ix = 0
  assert is?
  assert fi?
  assert isv?
  assert isn?


func test-complex-function(
    copy Int num, user String text)->(copy Int out-num, user String out-text)
  {# Test
  multiline
  comment #}

  # Test Single line comment

  ## Test Single line documentation
  # Test Single line comment
  out-num := num
  out-text := text


# Test types
struct TestStruct
  ## dosumentation test
  var Int num
  
  {## Test
  multiline
  documentation #}
  user String text
  
  # comment test
  
  user TestStruct ts
  var Func{()} fun
  
  func set(copy Int x, user String s)
    self.num := x
    self.text := s
  
  {# Test
  multiline
  comment #}
  
  func get()->(copy Int x, user String s)
    x := self.num
    s := self.text


func f-test-void()
  return
func f-test-params(copy Int x, user String s, owner String o)
  raise
func f-test-outs()->(owner String s, copy Int x)
func f-test-int2str(copy Int x)->(owner String s)
func f-test-int(copy Int x)
func f-test-int2int(copy Int x)->(copy Int r)
func f-test-many(
    copy Int x,
    copy Int y)->(
    copy Int n,
    copy Int m)


func test-call-expression()
  owner String s
  var Int x
  f-test-void()
  f-test-params(copy 3, user "text", owner _)
  f-test-outs()->(owner s, copy x)
  f-test-int2str(copy 4)->(owner s)
  f-test-int(copy 5)
  f-test-int2int(copy 6)->(copy x)
  f-test-many(
      copy 7,
      copy 8)->(
      copy x,
      copy x)
  var Int tmp
  f-test-int(copy f-test-int2int(copy 9)->(copy tmp))
  x := f-test-int2int(copy 10) + f-test-many(copy 11, copy 12)->(copy x)
  s := f-test-int2str(copy 13)


func test-code-flow(user Array{Int} arr)->(copy Int res)
  if arr[4] > 6
    res := 6
  else-if arr?
    res := 6
  else-if arr[4] != arr[4]
    res := 6
  else-if 0 = arr[0]
    res := 6
  else
    res := 0
  do
    arr[6] := 6
    var Int x(arr[2])
    while x > 3
    var Int y(x - 1)
    do
      arr[4] := arr[8]
      if y > arr[4]
        continue
      var Int z(0)
      if z <= arr[4]
        while z > 0
  for n in arr[2]:2 - (3 * arr[2])
    arr[0] := arr[2]
    var Int x(arr[0])
    if x > 4
      arr[1] := x


func test-builtins(
    copy Int i, copy Char c, copy Bool b, user String s, user Array{Int} a)
  i.str(user s)
  b := true or false
  c := EOF
  i := a.length
  i := s.length
  s.clear()
  s.equal(user s)->(copy b)
  s.get(copy i)->(copy c)
  s.append(copy c)
  s.copy(user s)
  s.concat(user s)
  s.concat-int(copy i)
  s.find(user s)->(copy i)
  s.has(copy c)->(copy b)
  owner File f
  file-open-read(user s)->(owner f)
  file-open-write(user s)->(owner f)
  f.getc()->(copy c)
  f.putc(copy c)
  f.write(user s)
  f.close()
  s := sys.argv[1]
  sys.print(user s)
  sys.println(user s)
  sys.getenv(user s, user s)->(copy b)
  sys.system(user s)->(copy i)
  sys.exit(copy i)


main
  test-simple-function()
  test-call-expression()

{## MR4 compiler integration test file #1

This file should onlw work together with test file #2.
#}


class TopType(MiddleType)
  var Int num-top
  user BaseType top-base-ref
  user MiddleType top-mid-ref
  
  new()
    base()
    self.num-top := 3
  
  
  func dynamic meth2()
    sys.println(user "TopType.meth2")
    base()
    MiddleType.meth2(var self)
    BaseType.meth2(var self)
  
  func dynamic meth3(copy Int n, user String s)
    sys.println(user "TopType.meth3")
    base.meth3(copy n, user s)
  
  func dynamic meth5(copy Int n, user String s)
    sys.println(user "TopType.meth5")
    base(copy n, user s)
    MiddleType.meth1(var _, copy n, user s)
    BaseType.meth1(var _, copy n, user s)
  
  func dynamic meth6()
    sys.println(user "TopType.meth6")
    self.num-mid := self.num-base
    self.top-base-ref := self.top-mid-ref
    self.top-base-ref := self
    user MiddleType mt(var self)
    user BaseType bt(var mt)
    test-mid-out()->(user bt)


class BaseType
  var Int num-base
  user MiddleType base-mid-ref
  user TopType base-top-ref
  
  new()
    self.num-base := 1
  
  func dynamic meth0()
    sys.println(user "BaseType.meth0")
  
  func dynamic meth1(copy Int n, user String s)
    sys.println(user "BaseType.meth1")
  
  func dynamic meth2()
    sys.println(user "BaseType.meth2")
  
  func dynamic meth3(copy Int n, user String s)
    sys.println(user "BaseType.meth3")


func test-mid-out()->(user MiddleType mt)
  new MiddleType new-mt
  mt := new-mt


mock TestStruct.get()->(copy Int x, user String s)
  x := 12
  s := ""


mock f-test-int2str(copy Int x)->(owner String s)
  raise


test test-func()
  var TestStruct t(copy 0, user _)
  var Int x
  t.get()->(copy x)
  assert x = 12
  assert-error f-test-int2str(copy 3)


test test-another()
  var Int x
  assert x = 0

## MR4 compiler - Syntax tree code nodes

## Expression node in the syntax tree
class SyntaxTreeExpression(SyntaxTreeCode)
  owner Expression expression
  
  func inst parse-new(user SyntaxTreeBlock parent):(
      copy Char end, owner SyntaxTreeExpression new-node)
    new SyntaxTreeExpression in new-node
    new-node.parse(user parent):(copy end)
  
  func inst parse(user SyntaxTreeBlock parent):(copy Char end)
    self.parent := parent
    self.set-location()
    parse-new-expression(user "", user self):(owner self.expression, copy end)
    self.expression.is-statement := true
  
  func dynamic analyze()
    self.expression.analyze()
    if ? self.expression.result-type
      self.m-syntax-error-msg(user "statememnt has no effect")
  
  func dynamic write()
    self.write-spaces()
    self.expression.write-preactions()
    self.expression.write()


## Return statement in the syntax tree
class SyntaxTreeReturn(SyntaxTreeCode)
  
  func inst parse-new(user SyntaxTreeBlock parent):(
      copy Char end, owner SyntaxTreeReturn new-node)
    new SyntaxTreeReturn in new-node
    new-node.set-location()
    new-node.parent := parent
  
  func dynamic m-is-end-point():(copy Bool is-end)
    is-end := true
  
  func dynamic write()
    self.write-spaces()
    write(user "goto MR_cleanup;\n")


## Raise statement in the syntax tree
class SyntaxTreeRaise(SyntaxTreeCode)
  
  func inst parse-new(user SyntaxTreeBlock parent):(
      copy Char end, owner SyntaxTreeRaise new-node)
    new SyntaxTreeRaise in new-node
    new-node.set-location()
    new-node.parent := parent
  
  func dynamic m-is-end-point():(copy Bool is-end)
    is-end := true
  
  func dynamic write()
    self.write-spaces()
    self.write-raise()


## While statement in the syntax tree
class SyntaxTreeWhile(SyntaxTreeCode)
  owner Expression condition
  
  func inst parse-new(user SyntaxTreeBlock parent):(
      copy Char end, owner SyntaxTreeWhile new-node)
    new SyntaxTreeWhile in new-node
    new-node.parse(user parent):(copy end)
  
  func inst parse(user SyntaxTreeBlock parent):(copy Char end)
    self.parent := parent
    self.set-location()
    if not parent.is-in-loop
      self.m-syntax-error-msg(user "\"while\" used not inside loop")
    parse-new-expression(user "", user self):(owner self.condition, copy end)
  
  func dynamic analyze()
    self.analyze-expression(user self.condition, user glob.type-bool)
  
  func dynamic write()
    # if (!(`condition`) break;
    self.write-spaces()
    self.condition.write-preactions()
    write(user "if (!(")
    self.condition.write()
    write(user ")) break;\n")


## Continue statement in the syntax tree
class SyntaxTreeContinue(SyntaxTreeCode)
  
  func inst parse-new(user SyntaxTreeBlock parent):(
      copy Char end, owner SyntaxTreeContinue new-node)
    new SyntaxTreeContinue in new-node
    new-node.parse(user parent)
  
  func inst parse(user SyntaxTreeBlock parent)
    self.set-location()
    self.parent := parent
    if not parent.is-in-loop
      self.m-syntax-error-msg(user "\"continue\" used not inside loop")
  
  func dynamic write()
    self.write-spaces()
    write(user "continue;\n")

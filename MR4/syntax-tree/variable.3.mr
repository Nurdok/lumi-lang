## MR4 compiler - Syntax tree variable

## Variable node in the syntax tree
class SyntaxTreeVariable(SyntaxTreeCode)
  owner String name
  var Int access
  owner TypeInstance type-instance
  user TypeData parent-type
  
  func inst parse-new(copy Int access, user TypeData parent-type):(
      copy Char end,
      owner SyntaxTreeVariableInit new-init-node,
      owner SyntaxTreeVariable new-node)
    new SyntaxTreeVariable in new-node
    new-node.parse(copy access, user parent-type):(
        owner new-init-node, copy end)
  
  func inst parse(copy Int access, user TypeData parent-type):(
      owner SyntaxTreeVariableInit new-init-node, copy Char end)
    self.parent-type := parent-type
    self.access := access
    new TypeInstance in self.type-instance
    self.type-instance.parse(user " "):(copy end)
    if end != ' '
      f-syntax-error-c(user "expected space after type, got", copy end)
    read-new(user "("):(owner self.name, copy end)
    if end = '('
      SyntaxTreeVariableInit.parse-new(var _, user self):(
          copy end, owner new-init-node)
  
  func dynamic write()
    # `type`* `name`;
    self.type-instance.write()
    if self.access != ACCESS-VAR
      write(user "*")
    write(user " ")
    write-cname(user self.name)
    write(user ";")


## Variable initialization node in the syntax tree
class SyntaxTreeVariableInit(SyntaxTreeCode)
  user SyntaxTreeVariable variable
  owner Expression value
  
  func inst parse-new(user SyntaxTreeVariable variable):(
      copy Char end, owner SyntaxTreeVariableInit new-node)
    new SyntaxTreeVariableInit in new-node
    new-node.parse(user variable):(copy end)
  
  func inst parse(user SyntaxTreeVariable variable):(copy Char end)
    self.variable := variable
    parse-new-expression(user ")"):(owner self.value, copy end)
    if end != ')'
      f-syntax-error-c(
          user "expected \")\" after initialization, got",
          copy end)
    read-c():(copy end)
  
  func dynamic write()
    # `name` = `value`;
    write-cname(user self.variable.name)
    write(user " = ")
    self.value.write()
    write(user ";")

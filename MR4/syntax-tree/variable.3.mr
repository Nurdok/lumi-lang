## MR4 compiler - Syntax tree variable

## Variable node in the syntax tree
class SyntaxTreeVariable(SyntaxTreeCode)
  owner String name
  var Int access
  owner TypeInstance type-instance
  user TypeData parent-type
  
  func inst parse-new(
      copy Int access,
      user TypeData parent-type,
      user SyntaxTreeBlock parent-block):(
      copy Char end,
      owner SyntaxTreeVariable new-node)
    new SyntaxTreeVariable in new-node
    new-node.parse(copy access, user parent-type, user parent-block):(copy end)
  
  func inst parse(
      copy Int access,
      user TypeData parent-type,
      user SyntaxTreeBlock parent-block):(
      copy Char end)
    self.set-location()
    self.parent := parent-block
    self.parent-type := parent-type
    self.access := access
    new TypeInstance in self.type-instance
    self.type-instance.parse(user " ", user self):(copy end)
    if end != ' '
      self.m-syntax-error-c(user "expected space after type, got", copy end)
    read-new(user "("):(owner self.name, copy end)
    if end = '('
      if ? self.parent-type
        self.m-syntax-error-msg(user "type members cannot be initialized")
      if not (? self.parent)
        self.m-syntax-error-msg(user "global variables cannot be initialized")
      self.parent.code-nodes.add(
          owner SyntaxTreeVariableInit.parse-new(var _, user self):(copy end))
  
  func inst m-find-variable(user String name):(
      user SyntaxTreeVariable variable, copy Bool found)
    self.name.equal(user name):(copy found)
    if found
      variable := self
  
  func dynamic analyze()
    self.type-instance.analyze(user self)
    if not self.type-instance.type-data.is-primitive and
        self.access = ACCESS-VAR and not (? self.parent)
      self.m-syntax-error-msg(
          user "non-primitives cannot be declared \"var\" here yet...")
  
  func dynamic write()
    # `type` `name`;
    # `type`* `name`;
    # `type` `name`_Var;
    # `type`* `name` = &`name`_Var;
    write-cname(user self.type-instance.type-data.name)
    if self.access != ACCESS-VAR
      write(user "*")
    write(user " ")
    write-cname(user self.name)
    if not self.type-instance.type-data.is-primitive and
        self.access = ACCESS-VAR
      write(user "_Var;\n")
      self.parent.write-spaces()
      write-cname(user self.type-instance.type-data.name)
      write(user "* ")
      write-cname(user self.name)
      write(user " = &")
      write-cname(user self.name)
      write(user "_Var")
    write(user ";")


## Initialize dynamically allocated variable node in the syntax tree
class SyntaxTreeInitNew(SyntaxTreeCode)
  user SyntaxTreeVariable variable
  
  func inst parse-new(user SyntaxTreeBlock parent-block):(
      copy Char end, owner SyntaxTreeVariable new-var-node)
    new SyntaxTreeInitNew node-init-new
    node-init-new.init(user parent-block)
    SyntaxTreeVariable.parse-new(
        var _, copy ACCESS-OWNER, user _, user parent-block):(
        copy end, owner new-var-node)
    node-init-new.variable := new-var-node
  
  func inst init(user SyntaxTreeBlock parent-block)
    self.parent := parent-block
    self.set-location()
    self.parent.code-nodes.add(owner self)
  
  func dynamic write()
    # `name` = `...`
    write-cname(user self.variable.name)
    write(user " = ")
    if self.variable.type-instance.type-data = glob.type-array
      # TODO array...
    else-if ? self.variable.type-instance.sub-type
      self.m-syntax-error2(
          user "unexpected subtype",
          user self.variable.type-instance.sub-type.name,
          user "for type",
          user self.variable.type-instance.type-data.name)
    else-if self.variable.type-instance.type-data = glob.type-string
      # TODO string...
    else
      # malloc(`type`);
      write(user " = malloc(")
      write-cname(user self.variable.type-instance.type-data.name)
      write(user ");")


## Variable initialization node in the syntax tree
class SyntaxTreeVariableInit(SyntaxTreeCode)
  user SyntaxTreeVariable variable
  owner Expression value
  
  func inst parse-new(user SyntaxTreeVariable variable):(
      copy Char end, owner SyntaxTreeVariableInit new-node)
    new SyntaxTreeVariableInit in new-node
    new-node.parse(user variable):(copy end)
  
  func inst parse(user SyntaxTreeVariable variable):(copy Char end)
    self.variable := variable
    parse-new-expression(user ")", user self):(owner self.value, copy end)
    if end != ')'
      self.m-syntax-error-c(
          user "expected \")\" after initialization, got",
          copy end)
    read-c():(copy end)
  
  func dynamic analyze()
    self.value.analyze()
    self.value.result-type.m-check-assign-to(
        user self.variable.type-instance, user self)
  
  func dynamic write()
    # `name` = `value`;
    write-cname(user self.variable.name)
    write(user " = ")
    self.value.write()
    write(user ";")

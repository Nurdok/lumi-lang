## MR4 compiler - Syntax tree root

## The syntax tree root
class SyntaxTreeRoot(SyntaxTreeNamespace)
  owner List{TypeData} types
  user String output-file-name
  owner SyntaxTreeMainFunction main-function
  
  func inst parse(user Array{String} argv)
    if argv.length < 3
      sys.print(
          user "usage: mr-4compiler OUTPUT-C-FILE-NAME INPUT-MR3-FILES...")
      raise
    
    self.init()
    self.output-file-name := argv[1]
    new List{TypeData} in self.types
    for n in 2:argv.length
      glob.input-file-name := argv[n]
      glob.line-number := 1
      file-open(user glob.input-file-name, copy true):(owner glob.input-file)
      
      self.parse-children(user _, user _)
      
      if glob.input-buffer.length > 0 or glob.input-spaces > 0
        self.set-location()
        self.m-syntax-error-msg(user "no new-line before file end")
      
      file-close(owner glob.input-file)
    
    self.input-file-name := argv[2]
    self.line-number := 0
  
  func dynamic parse-child(user String keyword):(copy Char end)
    if self.parse-if-function(user keyword, user _):(copy end)
      return
    
    if keyword.equal(user "struct")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"struct\", got", copy end)
      self.types.add(owner TypeData.parse-new(var _, copy false):(
          copy end))
      
    else-if keyword.equal(user "class")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"class\", got", copy end)
      self.types.add(owner TypeData.parse-new(var _, copy true):(
          copy end))
      
    else-if keyword.equal(user "main")
      if end != '\n'
        self.m-syntax-error-c(
            user "expected new-line after \"main\", got", copy end)
      SyntaxTreeMainFunction.parse-new(var _):(
          copy end, owner self.main-function)
      
    else-if keyword.equal(user "native")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"native\", got", copy end)
      self.functions.add(owner SyntaxTreeNativeFunction.parse-new(var _):(
          copy end))
      
    else-if keyword.equal(user "test")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"test\", got", copy end)
      self.functions.add(owner SyntaxTreeTestFunction.parse-new(var _):(
          copy end))
      
    else-if keyword.equal(user "mock")
      if end != ' '
        self.m-syntax-error-c(
            user "expected space after \"mock\", got", copy end)
      self.functions.add(owner SyntaxTreeMockFunction.parse-new(var _):(
          copy end))
      
    else
      self.m-syntax-error(user "unknown keyword", user keyword)
  
  func dynamic m-link-types()
    raise
  
  func dynamic analyze()
    self.m-order-types()
    base.m-link-types()
    self.m-link-children-types(user self.types)
    if ? self.main-function
      self.main-function.m-link-types()
    base.analyze()
    self.analyze-children(user self.types)
    if ? self.main-function
      self.main-function.analyze()
  
  func inst m-order-types()
    new List{TypeData} ordered-list
    do
      owner TypeData type-data
      self.types.m-pop():(owner type-data)
      while ? type-data
      type-data.m-order-bases(user ordered-list)
    delete self.types
    self.types := ordered-list
  
  (## write C file in this order:
  1. type declarations
  2. type structs (ordered by depth)
  3. function declarations
  4. global variables
  5. function bodies
  #)
  func dynamic write()
    file-open(user self.output-file-name, copy false):(owner glob.output-file)
    
    write-global(user "#include \"mr.4.h\"\n")
    
    write-global(user "\n\n/* types declaration */\n")
    var TypeDeclarationWriter type-declaration-writer
    self.write-for-type(user type-declaration-writer)
    
    # will write type structs
    write-global(user "\n\n/* types struct */\n")
    self.write-children(user self.types)
    
    write-global(user "\n\n/* types methods declaration */\n")
    var TypeMethodsDeclarationWriter type-methods-declaration-writer
    self.write-for-type(user type-methods-declaration-writer)
    
    write-global(user "\n\n/* types global variables */\n")
    var TypeGlobalWriter type-global-writer
    self.write-for-type(user type-global-writer)
    
    # will write global variables
    write-global(user "\n\n/* global variables */\n")
    self.write-children(user self.variables)
    
    write-global(user "\n\n/* global functions declaration */\n")
    self.write-functions-declaration()
    
    write-global(user "\n\n/* types methods body */\n")
    var TypeMethodsBodyWriter type-methods-body-writer
    self.write-for-type(user type-methods-body-writer)
    
    # will write global functions bodies
    write-global(user "\n\n/* global functions body */\n")
    self.write-children(user self.functions)
    
    if ? self.main-function
      write-global(user "\n\n/* main function */\n")
      self.main-function.write()
    
    file-close(owner glob.output-file)
  
  func inst write-for-type(user TypeWriter type-writer)
    user ListNode{TypeData} child(self.types.first)
    do
      while ? child
      type-writer.write(user child.item)
      child := child.next


## proxy write function to be mocked on unit-tests
func write-global(user String text)
  write(user text)

## MR4 compiler - Constant expressions

## Return whether `text` is a number of base with given `top-digit`
func f-is-number(user String text, copy Char top-digit):(copy Bool is-number)
  is-number := true
  for n in text.length
    var Char ch(text[n])
    if ch < '0' or ch > top-digit
      is-number := false
      return

## Return whether `text` is a binary number
func f-is-binary(user String text):(copy Bool is-octal)
  f-is-number(user text, copy '1'):(copy is-octal)

## Return whether `text` is an octal number
func f-is-octal(user String text):(copy Bool is-octal)
  f-is-number(user text, copy '7'):(copy is-octal)

## Return whether `text` is a decimal number
func f-is-decimal(user String text):(copy Bool is-octal)
  f-is-number(user text, copy '9'):(copy is-octal)

## Return whether `text` is a hexadecimal number
func f-is-hex(user String text):(copy Bool is-hex)
  is-hex := true
  for n in text.length
    var Char ch(text[n])
    if (ch < '0' or ch > '9') and (ch < 'a' or ch > 'f') and
        (ch < 'A' or ch > 'F')
      is-hex := false
      return


## A basic expression that has a single textual value
class TextExpression(Expression)
  owner String text
  
  func dynamic write()
    write(user self.text)


## Constant integer expression
class IntExpression(TextExpression)
  func inst parse-new(owner String text):(owner Expression expression)
    new IntExpression int-expression
    int-expression.parse(owner text)
    expression := int-expression
  
  ## parsing `123` or `-123` or `0b0012` or `0x3d4f`
  func inst parse(owner String text)
    self.set-location()
    user String number(text)
    if number[0] = '-'
      number := number[1:number.length - 1]
    if number[0] = '0' and number.length > 1
      var Char second(number[1])
      if second >= '0' and second <= '7'
        if not f-is-octal(user number)
          self.m-syntax-error(user "illegal octal number", user text)
      else
        number := number[2:number.length - 2]
        if second = 'b' or second = 'B'
          if not f-is-binary(user number)
            self.m-syntax-error(user "illegal binary number", user text)
          self.m-syntax-error(
              user "binary numbers not supported yet...", user text)
        else-if second = 'x' or second = 'X'
          if not f-is-hex(user number)
            self.m-syntax-error(user "illegal hexadecimal number", user text)
        else
          self.m-syntax-error(user "illegal number", user text)
    else-if not f-is-decimal(user number)
      self.m-syntax-error(user "illegal number", user text)
    self.set-simple-type(user glob.type-int)
    self.text := text


## Constant character expression
class CharExpression(TextExpression)
  func inst parse-new(owner String text):(owner Expression expression)
    new CharExpression char-expression
    char-expression.parse(owner text)
    expression := char-expression
  
  ## parsing `'a'` or `'\n'` or `'\xf5'` or `'\270'`
  func inst parse(owner String text)
    self.set-location()
    var Char ch
    if text.length = 3
      ch := text[1]
      if ch = '\'' or ch = '\\'
        self.m-syntax-error(user "illegal character constant", user text)
    else-if text.length = 4
      if text[1] != '\\'
        self.m-syntax-error(user "illegal character constant", user text)
      if not "'\"?\\abfnrtv".has(copy text[2])
        self.m-syntax-error(user "illegal character constant", user text)
    else-if text.length = 6
      if text[1] != '\\'
        self.m-syntax-error(user "illegal character constant", user text)
      ch := text[2]
      if ch = 'x'
        if not f-is-hex(user text[3:2])
          self.m-syntax-error(user "illegal character constant", user text)
      else
        if not f-is-octal(user text[2:3])
          self.m-syntax-error(user "illegal character constant", user text)
    else
      self.m-syntax-error(user "illegal character constant", user text)
    if text[text.length - 1] != '\''
      self.m-syntax-error(user "illegal character constant", user text)
    self.set-simple-type(user glob.type-char)
    self.text := text


## Constant string expression
class StringExpression(TextExpression)
  owner Expression symbol
  
  func inst parse-new(owner String text, user SyntaxTreeCode code-node):(
      owner Expression expression)
    new StringExpression string-expression
    string-expression.parse(owner text, user code-node)
    expression := string-expression
  
  ## parsing `"some string"`
  func inst parse(owner String text, user SyntaxTreeCode code-node)
    self.code-node := code-node
    self.set-location()
    if text[text.length - 1] != '\"'
      self.m-syntax-error(user "illegal string constant", user text)
    self.set-simple-type(user glob.type-string)
    self.text := text
  
  func dynamic analyze()
    self.add-aux-variable(copy ACCESS-AUX):(owner self.symbol)
  
  func dynamic write-preactions()
    # `symbol`.max_length = `string-length + 1`;
    # `symbol`.length = `string-length`;
    # `symbol`.values = "`text`";
    var Int real-length(1)
    for index in 1:self.text.length - 1
      if self.text[index] = '\\'
        index += 1
      real-length := real-length + 1
    self.symbol.write()
    write(user "->max_length = ")
    write-int(copy real-length)
    write(user ";\n")
    self.code-node.write-spaces()
    self.symbol.write()
    write(user "->length = ")
    write-int(copy real-length - 1)
    write(user ";\n")
    self.code-node.write-spaces()
    self.symbol.write()
    write(user "->values = ")
    write(user self.text)
    write(user ";\n")
    self.code-node.write-spaces()
  
  func dynamic write()
    self.symbol.write()


## Constant empty expression `_`
class EmptyExpression(Expression)
  func inst parse-new(owner String text):(owner Expression expression)
    new EmptyExpression in expression
    expression.set-location()
    expression.set-simple-type(user glob.type-empty)
    delete text
  
  func dynamic write()
    write(user "NULL")

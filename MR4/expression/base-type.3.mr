## MR4 compiler - Base and Type expressions

## The `base` method expression
class BaseMethExpression(Expression)
  var Bool is-call
  user SyntaxTreeFunction function
  user TypeData parent-type
  
  func inst parse-new(
      owner String text, user SyntaxTreeCode code-node, copy Char end):(
      owner Expression expression)
    delete text
    new BaseMethExpression base-expression
    base-expression.init(user code-node, copy end = '(')
    expression := base-expression
  
  func inst init(user SyntaxTreeCode code-node, copy Bool is-call)
    self.code-node := code-node
    self.is-call := is-call
    self.access := ACCESS-VAR
    self.set-location()
  
  func dynamic analyze()
    user SyntaxTreeFunction function
    self.code-node.get-function():(user function)
    self.parent-type := function.parent-type
    if not (? self.parent-type)
      self.m-syntax-error-msg(user "\"base\" used not in method")
    if not (? self.parent-type.base-type)
      self.m-syntax-error(
          user "no base type for type", user function.parent-type.name)
    if self.is-call
      self.parent-type.base-type.find-meth(user function.name):(
          user self.function)
      if not (? self.function)
        self.m-syntax-error(
            user "no base method for method", user function.name)
      self.set-simple-type(user glob.type-func)
      self.result-type.arguments := self.function.arguments
    else
      self.set-simple-type(user glob.type-base)
      self.result-type.add-subtype-copy(user self.parent-type)
  
  func dynamic analyze-call(user FunctionArguments arguments):(
      copy Bool is-function-object)
    is-function-object := false
    new CallArgument self-param
    self-param.access := self.function.arguments.parameters.first.item.access
    new BaseMethExpression in self-param.value
    self.parent-type.m-new-type-instance():(owner self-param.value.result-type)
    arguments.parameters.prepend(owner self-param)
  
  func dynamic write()
    if self.is-call
      self.function.write-cname()
    else
      write(user "self")


## Up-cast expression
class UpCastExpression(Expression)
  owner Expression expression
  var Int bases
  
  func inst init-new(copy Int bases):(owner Expression expression)
    new UpCastExpression up-cast
    up-cast.init(copy bases, owner expression)
    expression := up-cast
  
  func inst init(copy Int bases, owner Expression expression)
    self.expression := expression
    self.expression.top := false
    self.bases := bases
    self.expression.result-type.copy-new():(owner self.result-type)
    self.access := self.expression.access
  
  func dynamic write-preactions()
    self.expression.write-preactions()
  
  func dynamic write()
    # &(`expression`->_base[._base]...)
    self.write-pre()
    self.expression.write()
    self.write-post()
  
  func dynamic write-dynamic()
    self.write-pre()
    self.expression.write-dynamic()
    self.write-post()
  
  func dynamic write-refman()
    self.expression.top := true
    self.expression.write-refman()
    self.expression.top := false
  
  func inst write-pre()
    write(user "&(")
  
  func inst write-post()
    write(user "->_base")
    for n in 1:self.bases
      write(user "._base")
    write(user ")")


## Type name expression
class TypeExpression(Expression)
  func inst parse-new(owner String text, user SyntaxTreeCode code-node):(
      owner Expression expression, copy Char end)
    new TypeInstance type-instance
    type-instance.parse-name(user text, user code-node, user code-node):(
        copy end)
    if end = '('
      new InitExpression expression-init
      expression-init.parse(owner type-instance, user code-node):(copy end)
      expression := expression-init
    else
      new TypeExpression type-expression
      type-expression.parse(owner type-instance)
      expression := type-expression
  
  func inst parse(owner TypeInstance type-instance)
    self.set-location()
    self.set-simple-type(user glob.type-type)
    new List{TypeInstance} in self.result-type.sub-types
    self.result-type.sub-types.add(owner type-instance)
    self.access := ACCESS-VAR
  
  func dynamic analyze()
    self.result-type.sub-types.first.item.analyze(user self)

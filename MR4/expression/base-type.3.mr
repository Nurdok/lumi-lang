## MR4 compiler - Base and Type expressions

## The `base` method expression
class BaseMethExpression(Expression)
  var Bool is-call
  user SyntaxTreeFunction function
  user TypeData parent-type
  var Int bases
  
  func inst parse-new(
      owner String text, user SyntaxTreeCode code-node, copy Char end):(
      owner Expression expression)
    delete text
    new BaseMethExpression base-expression
    base-expression.init(user code-node, copy end = '(')
    expression := base-expression
  
  func inst init(user SyntaxTreeCode code-node, copy Bool is-call)
    self.code-node := code-node
    self.is-call := is-call
    self.access := ACCESS-VAR
    self.set-location()
  
  func dynamic analyze()
    user SyntaxTreeFunction function
    self.code-node.get-function():(user function)
    self.parent-type := function.parent-type
    if not (? self.parent-type)
      self.m-syntax-error-msg(user "\"base\" used not in method")
    if not (? self.parent-type.base-type)
      self.m-syntax-error(
          user "no base type for type", user function.parent-type.name)
    if self.is-call
      self.parent-type.base-type.type-data.find-meth(user function.name):(
          user self.function, copy self.bases)
      if not (? self.function)
        self.m-syntax-error(
            user "no base method for method", user function.name)
      self.set-simple-type(user glob.type-func)
      self.result-type.arguments := self.function.arguments
    else
      self.set-simple-type(user glob.type-base)
      self.result-type.add-subtype-copy(user self.parent-type)
  
  func dynamic analyze-call(user FunctionArguments arguments):(
      user TypeInstance instance-type,
      copy Int bases,
      copy Bool is-function-object)
    is-function-object := false
    instance-type := self.parent-type.base-type
    bases := self.bases
    new CallArgument self-param
    self-param.set-location()
    self-param.access := self.function.arguments.parameters.first.item.access
    new BaseMethExpression in self-param.value
    self.parent-type.m-self-type-instance():(owner self-param.value.result-type)
    arguments.parameters.prepend(owner self-param)
  
  func dynamic write()
    if self.is-call
      self.function.write-cname()
    else
      write(user "self")


## Up-cast expression
class UpCastExpression(Expression)
  owner Expression expression
  var Int bases
  
  func inst init-new(copy Int bases):(owner Expression expression)
    new UpCastExpression up-cast
    up-cast.init(copy bases, owner expression)
    expression := up-cast
  
  func inst init(copy Int bases, owner Expression expression)
    self.expression := expression
    self.expression.top := false
    self.bases := bases
    self.expression.result-type.copy-new():(owner self.result-type)
    self.access := self.expression.access
  
  func dynamic write-preactions()
    self.expression.write-preactions()
  
  func dynamic write()
    # &(`expression`->_base[._base]...)
    self.write-pre()
    self.expression.write()
    self.write-post()
  
  func dynamic write-dynamic()
    self.write-pre()
    self.expression.write-dynamic()
    self.write-post()
  
  func dynamic write-refman()
    self.expression.top := true
    self.expression.write-refman()
    self.expression.top := false
  
  func inst write-pre()
    write(user "&(")
  
  func inst write-post()
    write(user "->_base")
    for n in 1:self.bases
      write(user "._base")
    write(user ")")


class ModuleTypeExpression(Expression)
  owner Expression module-expression
  
  func inst analyze-module()
    self.module-expression.analyze()
    if not (? self.module-expression.result-type)
      self.code-node.m-syntax-error-msg(
          user "expected module, got empty expression")
    if self.module-expression.result-type.type-data != glob.type-module
      self.code-node.m-syntax-error(
          user "expected module, got",
          user self.module-expression.result-type.type-data.name)
  
  func inst analyze-type-instance(user TypeInstance type-instance)
    if ? self.module-expression
      self.analyze-module()
      string-new-copy(user self.module-expression.result-type.name):(
          owner type-instance.module-name)
    type-instance.analyze(user self)


## Type name expression
class TypeExpression(ModuleTypeExpression)
  func inst parse-new(
      owner String text, user String ends, user SyntaxTreeCode code-node):(
      owner Expression expression, copy Char end)
    owner String value
    var Char next-end
    if end = '.'
      self.read-new-value(user ends):(owner value, copy next-end)
      if value.length > 0
        if value.equal(user "length") or (value[0] >= 'A' and value[0] <= 'Z')
          new EnumExpression enum-expression
          enum-expression.parse(
              owner text, owner value, owner expression, user code-node)
          end := next-end
          expression := enum-expression
          return
      glob.save-input := true
    new TypeInstance type-instance
    type-instance.parse-name(user text, user code-node, user code-node):(
        copy end)
    if end = '('
      new InitExpression expression-init
      expression-init.parse(
          owner type-instance, owner expression, user code-node):(copy end)
      expression := expression-init
    else
      new TypeExpression type-expression
      type-expression.parse(
          owner type-instance, owner expression, user code-node)
      expression := type-expression
  
  func inst parse(
      owner TypeInstance type-instance,
      owner Expression module-expression,
      user SyntaxTreeCode code-node)
    self.set-location()
    self.code-node := code-node
    self.set-simple-type(user glob.type-type)
    self.module-expression := module-expression
    new List{TypeInstance} in self.result-type.parameters
    self.result-type.parameters.add(owner type-instance)
    self.access := ACCESS-VAR
  
  func dynamic analyze()
    self.analyze-type-instance(user self.result-type.parameters.first.item)


## Enum name expression
class EnumExpression(ModuleTypeExpression)
  owner String name
  owner String value
  user EnumData enum-data
  
  func inst parse(
      owner String name,
      owner String value,
      owner Expression module-expression,
      user SyntaxTreeCode code-node)
    self.set-location()
    self.code-node := code-node
    self.name := name
    self.value := value
    self.set-simple-type(user glob.type-int)
    self.access := ACCESS-VAR
    self.constant := true
    self.module-expression := module-expression
  
  func dynamic analyze()
    if ? self.module-expression
      self.analyze-module()
      user String module-name(self.module-expression.result-type.name)
      if not (? self.code-node.find-module(user module-name).enum-map.find(
          user self.name):(user self.enum-data))
        self.m-syntax-error2(
            user "unknown Enum",
            user self.name,
            user "in module",
            user module-name)
    else-if not (? glob.current-module.enum-map.find(user self.name):(
        user self.enum-data))
      self.m-syntax-error(user "unknown Enum", user self.name)
    if not self.enum-data.m-has-value(user self.value)
      self.m-syntax-error2(
          user "Enum", user self.name, user "has no value", user self.value)
  
  func dynamic write()
    self.enum-data.write-cname()
    write(user "_")
    write-cname(user self.value)

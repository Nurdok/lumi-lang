## MR4 compiler - Container expressions

## An expression surrounded by brackets
class BlockExpression(Expression)
  owner Expression expression
  
  func inst parse-new():(owner Expression expression, copy Char end)
    new BlockExpression block-expression
    block-expression.parse():(copy end)
    expression := block-expression
  
  ## parsing `(expression)`
  func inst parse():(copy Char end)
    parse-new-expression(user ")"):(owner self.expression)
    read-c():(copy end)
  
  func dynamic write()
    write(user "(")
    self.expression.write()
    write(user ")")


## A basic expression with an operator
class OperatorExpression(Expression)
  user Operator operator
  
  func inst parse-sub-expression(user Operator operator, user String ends):(
      owner Expression expression, copy Char end)
    self.operator := operator
    if end = '\n'
      read-line-break-spaces()
    owner String new-ends
    string-new-concat(user " ", user ends):(owner new-ends)
    parse-new-expression(user new-ends):(owner expression, copy end)
    delete new-ends
  
  func inst write-operator-and-expresssion(user Expression expression)
    write(user self.operator.c-name)
    write(user " ")
    expression.write()


## An expression with an unary operator
class UnaryExpression(OperatorExpression)
  owner Expression expression
  
  func inst parse-new(user String ends, user Operator operator):(
      owner Expression expression, copy Char end)
    new UnaryExpression unary-expression
    unary-expression.parse(user operator, user ends):(copy end)
    expression := unary-expression
  
  ## parsing `operator expression` or `operator\n    expression`
  func inst parse(user Operator operator, user String ends):(copy Char end)
    self.parse-sub-expression(user operator, user ends):(
        owner self.expression, copy end)
  
  func dynamic write()
    self.write-operator-and-expresssion(user self.expression)


## An expression with a binary operator
class BinaryExpression(OperatorExpression)
  owner Expression left-expression
  user Operator operator
  owner Expression right-expression
  
  func inst parse-new(user String ends, user Operator operator):(
      owner Expression expression, copy Char end)
    new BinaryExpression binary-expression
    binary-expression.parse(owner expression, user operator, user ends):(
        copy end)
    expression := binary-expression
  
  ## parsing `left-expression operator right-expression`
  ## or `left-expression operator\n    right-expression`
  func inst parse(
      owner Expression left-expression,
      user Operator operator,
      user String ends):(
      copy Char end)
    self.left-expression := left-expression
    self.parse-sub-expression(user operator, user ends):(
        owner self.right-expression, copy end)
  
  func dynamic write()
    self.left-expression.write()
    write(user " ")
    self.write-operator-and-expresssion(user self.right-expression)


## An expression with the "?" operator
class QuestionExpression(Expression)
  owner Expression tested
  
  func inst parse-new():(owner Expression expression, copy Char end)
    new QuestionExpression question-expression
    question-expression.parse(owner expression):(copy end)
    expression := question-expression
  
  ## parsing `tested?`
  func inst parse(owner Expression tested):(copy Char end)
    self.tested := tested
    read-c():(copy end)
  
  func dynamic write()
    self.tested.write()
    write(user " != NULL")

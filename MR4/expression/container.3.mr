## MR4 compiler - Container expressions

## An expression surrounded by brackets
class BlockExpression(Expression)
  owner Expression expression
  
  func inst parse-new(user SyntaxTreeCode code-node):(
      owner Expression expression, copy Char end)
    new BlockExpression block-expression
    block-expression.parse(user code-node):(copy end)
    expression := block-expression
  
  ## parsing `(expression)`
  func inst parse(user SyntaxTreeCode code-node):(copy Char end)
    parse-new-expression(user ")", user code-node):(owner self.expression)
    read-c():(copy end)
  
  func dynamic write()
    write(user "(")
    self.expression.write()
    write(user ")")


static Operator
  owner String name
  owner String c-name
  var Int order
  var Int group-index
  
  func inst init(
      user String name,
      user String c-name,
      copy Int order,
      copy Int group-index)
    string-new-copy(user name):(owner self.name)
    string-new-copy(user c-name):(owner self.c-name)
    self.order := order
    self.group-index := group-index


## An expression with an unary operator
class UnaryExpression(Expression)
  user Operator operator
  owner Expression right-expression
  
  func inst parse-new(
      user String ends, user Operator operator, user SyntaxTreeCode code-node):(
      owner Expression expression, copy Char end, user Operator next-operator)
    new UnaryExpression unary-expression
    unary-expression.parse(user operator, user ends, user code-node):(
        copy end, user next-operator)
    expression := unary-expression
  
  func inst parse(
      user Operator operator,
      user String ends,
      user SyntaxTreeCode code-node):(
      copy Char end, user Operator next-operator)
    self.operator := operator
    if end = '\n'
      read-line-break-spaces()
    else-if end != ' '
      f-syntax-error-c(user "unexpected", copy end)
    Expression.parse-new(var _, user ends, user code-node, user operator):(
        owner self.right-expression, copy end, user next-operator)
  
  func dynamic write()
    self.write-start()
    self.write-end()
  
  func inst write-start()
    if not self.top
      write(user "(")
  
  func inst write-end()
    write(user self.operator.c-name)
    write(user " ")
    self.right-expression.write()
    if not self.top
      write(user ")")


## An expression with a binary operator
class BinaryExpression(UnaryExpression)
  owner Expression left-expression
  
  func inst parse-new(
      user String ends, user Operator operator, user SyntaxTreeCode code-node):(
      owner Expression expression, copy Char end, user Operator next-operator)
    new BinaryExpression binary-expression
    binary-expression.left-expression := expression
    binary-expression.parse(user operator, user ends, user code-node):(
        copy end, user next-operator)
    expression := binary-expression
  
  func dynamic write()
    self.write-start()
    self.left-expression.write()
    write(user " ")
    self.write-end()


## An expression with the "?" operator
class QuestionExpression(Expression)
  owner Expression tested
  
  func inst parse-new():(owner Expression expression, copy Char end)
    new QuestionExpression question-expression
    question-expression.parse(owner expression):(copy end)
    expression := question-expression
  
  ## parsing `tested?`
  func inst parse(owner Expression tested):(copy Char end)
    self.tested := tested
    read-c():(copy end)
  
  func dynamic write()
    if not self.top
      write(user "(")
    self.tested.write()
    write(user " != NULL")
    if not self.top
      write(user ")")

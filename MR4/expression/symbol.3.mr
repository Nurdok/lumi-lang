## MR4 compiler - Symbol expression

## A single symbol expression (variable or global-function)
class SymbolExpression(Expression)
  owner String name
  user SyntaxTreeVariable variable
  user SyntaxTreeFunction function
  
  func inst parse-new(owner String text, user SyntaxTreeCode code-node):(
      owner Expression expression)
    new SymbolExpression symbol-expression
    symbol-expression.parse(owner text, user code-node)
    expression := symbol-expression
  
  ## parsing `symbol`
  func inst parse(owner String text, user SyntaxTreeCode code-node)
    self.code-node := code-node
    self.name := text
    self.set-location()
  
  func dynamic analyze()
    self.code-node.m-find-variable(user self.name):(user self.variable)
    if ? self.variable
      self.variable.type-instance.m-copy-new():(owner self.result-type)
      self.assignable := true
    else
      glob.root.m-find-function(user self.name):(user self.function)
      if not (? self.function)
        self.m-syntax-error(user "unknown symbol", user self.name)
      self.set-simple-type(user glob.type-func)
      self.function.arguments.m-copy-new():(owner self.result-type.arguments)
  
  func dynamic analyze-call(user FunctionArguments arguments):(
      copy Bool is-function-object)
    is-function-object := ? self.variable
  
  func dynamic write()
    if ? self.function
      if ? self.function.mocker-function
        self.function.mocker-function.write-cname()
      else
        self.function.write-cname()
      return
    if ? self.variable and self.variable.is-output
      if not self.top
        write(user "(")
      write(user "*")
    write-cname(user self.name)
    if ? self.variable and self.variable.is-output and not self.top
      write(user ")")


## An instance member expression
class MemberExpression(SymbolExpression)
  owner Expression instance
  user Expression dynamic-call-self-instance
  var Int bases
  var Bool is-dynamic-call
  
  func inst parse-new(user String ends, user SyntaxTreeCode code-node):(
      owner Expression expression, copy Char end)
    new MemberExpression member-expression
    member-expression.parse(owner expression, user ends, user code-node):(
        copy end)
    expression := member-expression
  
  ## parsing `instance.symbol`
  func inst parse(
      owner Expression instance,
      user String ends,
      user SyntaxTreeCode code-node):(
      copy Char end)
    self.code-node := code-node
    self.instance := instance
    self.set-location()
    self.read-new-value(user ends):(owner self.name, copy end)
  
  func dynamic analyze()
    self.instance.analyze()
    self.assignable := self.instance.assignable
    if not (? self.instance.result-type) or
        not (? self.instance.result-type.type-data)
      self.m-syntax-error(user "void expression has no member", user self.name)
    user TypeData type-data(self.instance.result-type.type-data)
    if type-data = glob.type-type
      type-data := self.instance.result-type.sub-type.type-data
    else-if type-data = glob.type-base
      type-data := self.instance.result-type.sub-type.type-data.base-type
    
    type-data.m-find-field(user self.name):(user self.variable, copy self.bases)
    if ? self.variable
      self.variable.type-instance.m-copy-new():(owner self.result-type)
      self.assignable := true
    else
      type-data.m-find-meth(user self.name):(
          user self.function, copy self.bases)
      if not (? self.function)
        self.m-syntax-error2(
            user "type",
            user type-data.name,
            user "has no member",
            user self.name)
      if self.function.is-dynamic and
          self.instance.result-type.type-data != glob.type-type and
          self.instance.result-type.type-data != glob.type-base
        self.bases := self.function.dynamic-base-count
        self.function := self.function.dynamic-base-method
        self.is-dynamic-call := true
      self.set-simple-type(user glob.type-func)
      self.function.arguments.m-copy-new():(owner self.result-type.arguments)
    if self.instance.result-type.type-data = glob.type-base
      if not (? self.function)
        self.m-syntax-error(
            user "calling \"base\" with non-method", user self.name)
      owner TypeInstance base-result-type(self.instance.result-type)
      self.instance.result-type := base-result-type.sub-type
      delete base-result-type
  
  func dynamic analyze-call(user FunctionArguments arguments):(
      copy Bool is-function-object)
    if base.analyze-call(user arguments):(copy is-function-object)
      return
    if self.instance.result-type.type-data = glob.type-type
      delete self.instance
    else
      new CallArgument self-param
      self-param.access := self.function.arguments.parameters.first.item.access
      self-param.value := self.instance
      self-param.value.top := true
      arguments.parameters.m-prepend(owner self-param)
      if self.is-dynamic-call
        self.dynamic-call-self-instance := self.instance
    self.instance := _
  
  func dynamic write-preactions()
    if not (? self.dynamic-call-self-instance or
        (? self.instance and not (? self.function) and
        self.instance.result-type.type-data != glob.type-type))
      return
    if ? self.instance
      self.instance.write-preactions()
    # if (`instance` == NULL) RAISE(`line-num`)
    write(user "if (")
    if ? self.instance
      self.instance.write()
    else-if ? self.dynamic-call-self-instance
      self.dynamic-call-self-instance.write-dynamic()
    write(user " == NULL) ")
    self.write-raise()
    self.code-node.write-spaces()
  
  func dynamic write()
    if ? self.dynamic-call-self-instance
      self.dynamic-call-self-instance.write-dynamic()
      self.write-bases()
      write-cname(user self.function.name)
      return
    if ? self.instance and not (? self.function) and
        self.instance.result-type.type-data != glob.type-type
      self.instance.write()
      self.write-bases()
    base.write()
  
  func inst write-bases()
    write(user "->")
    for n in self.bases
      write(user "_base.")


## The `base` method expression
class BaseMethExpression(Expression)
  func inst parse-new(owner String text, user SyntaxTreeCode code-node):(
      owner Expression expression)
    new BaseMethExpression in expression
    expression.code-node := code-node
    expression.set-location()
    delete text
  
  func dynamic analyze()
    user TypeData parent-type
    self.code-node.m-get-parent-type():(user parent-type)
    if not (? parent-type)
      self.m-syntax-error-msg(user "\"base\" used not in method")
    if not (? parent-type.base-type)
      self.m-syntax-error(user "no base type for type", user parent-type.name)
    self.set-simple-type(user glob.type-base)
    parent-type.m-new-type-instance():(owner self.result-type.sub-type)
  
  func dynamic write()
    write(user "self")


## An instance member expression
class UpCastExpression(Expression)
  owner Expression expression
  var Int bases
  
  func inst init-new(copy Int bases):(owner Expression expression)
    new UpCastExpression up-cast
    up-cast.init(copy bases, owner expression)
    expression := up-cast
  
  func inst init(copy Int bases, owner Expression expression)
    self.expression := expression
    self.bases := bases
    self.expression.result-type.m-copy-new():(owner self.result-type)
  
  func dynamic write-preactions()
    self.expression.write-preactions()
  
  func dynamic write()
    # &(`expression`->_base[._base]...)
    self.write-pre()
    self.expression.write()
    self.write-post()
  
  func dynamic write-dynamic()
    self.write-pre()
    self.expression.write-dynamic()
    self.write-post()
  
  func inst write-pre()
    write(user "&(")
  
  func inst write-post()
    write(user "->_base")
    for n in 1:self.bases
      write(user "._base")
    write(user ")")


## Type name expression
class TypeExpression(Expression)
  func inst parse-new(owner String text, user SyntaxTreeCode code-node):(
      owner Expression expression, copy Char end)
    new TypeInstance type-instance
    type-instance.parse-name(user text, user code-node, user code-node):(
        copy end)
    if end = '('
      new NewExpression new-expression
      new-expression.parse(owner type-instance, user code-node):(copy end)
      expression := new-expression
    else
      new TypeExpression type-expression
      type-expression.parse(owner type-instance)
      expression := type-expression
  
  func inst parse(owner TypeInstance type-instance)
    self.set-location()
    self.set-simple-type(user glob.type-type)
    self.result-type.sub-type := type-instance
  
  func dynamic analyze()
    self.result-type.sub-type.analyze(user self)
  
  func dynamic write()
    write-cname(user self.result-type.sub-type.type-data.name)


## Dynamic allocation expression
class NewExpression(Expression)
  user Expression symbol
  
  func inst parse(
      owner TypeInstance result-type, user SyntaxTreeCode code-node):(
      copy Char end)
    self.read-expect(user ")")
    read-c():(copy end)
    self.init(owner result-type, user code-node)
  
  func inst init(owner TypeInstance result-type, user SyntaxTreeCode code-node)
    self.code-node := code-node
    self.result-type := result-type
    self.set-location()
  
  func dynamic analyze()
    self.result-type.analyze(user self)
    if self.result-type.type-data.is-primitive
      self.m-syntax-error(
          user "dynamic allocation of primitive type",
          user self.result-type.type-data.name)
    self.result-type.m-check-sequence(user self)
    if not (? self.symbol)
      self.add-aux-variable(copy ACCESS-NEW, user self.result-type):(
          owner self.symbol)
  
  func inst write-allocation()
    # `symbol` = `...`
    # if (`symbol` == NULL) raise(`line-num`)
    if self.result-type.type-data = glob.type-array or
        self.result-type.type-data = glob.type-string
      if not (? self.result-type.length)
        raise
      self.result-type.length.write-preactions()
    if self.result-type.type-data = glob.type-array and
        self.result-type.sub-type.type-data = glob.type-string
      if not (? self.result-type.sub-type.length)
        raise
      self.result-type.sub-type.length.write-preactions()
    self.symbol.write()
    write(user " = ")
    
    if self.result-type.type-data = glob.type-array
      if self.result-type.sub-type.type-data = glob.type-string
        # MR_new_string_array(length, string-length);
        write(user "MR_new_string_array(")
        self.result-type.length.write()
        write(user ", ")
        self.result-type.sub-type.length.write()
        
      else
        # MR_new_array(length, sizeof(SubType));
        write(user "MR_new_array(")
        self.result-type.length.write()
        write(user ", sizeof(")
        write-cname(user self.result-type.sub-type.type-data.name)
        write(user ")")
        
    else-if self.result-type.type-data = glob.type-string
      # MR_new_string(length);
      write(user "MR_new_string(")
      self.result-type.length.write()
      
    else
      # calloc(1, sizeof(`type`));
      write(user "calloc(1, sizeof(")
      write-cname(user self.result-type.type-data.name)
      write(user ")")
    
    write(user ");\n")
    self.code-node.write-spaces()
    write(user "if (")
    self.symbol.write()
    write(user " == NULL) ")
    self.write-raise()
  
  func dynamic write-preactions()
    self.write-allocation()
    self.code-node.write-spaces()
  
  func dynamic write()
    if self.is-statement
      self.write-allocation()
    else
      self.symbol.write()

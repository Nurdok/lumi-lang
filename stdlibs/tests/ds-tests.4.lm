~~~ Tests for generic lists ~~~
module list-test

test append-test()
    var ds.List{String} list
    list.append(owner String{8}(user "first"))
    list.append(owner String{8}(user "second"))
    list.append(owner String{8}(user "third"))
    var ds.ListIterator{String} iter(user list)
    assert iter.has()
    assert iter.get().equal(user "first")
    iter.next()
    assert iter.has()
    assert iter.get().equal(user "second")
    iter.next()
    assert iter.has()
    assert iter.get().equal(user "third")
    iter.next()
    assert not iter.has()


test prepend-test()
    var ds.List{String} list
    list.prepend(owner String{8}(user "third"))
    list.prepend(owner String{8}(user "second"))
    list.prepend(owner String{8}(user "first"))
    var ds.ListIterator{String} iter(user list)
    assert iter.has()
    assert iter.get().equal(user "first")
    iter.next()
    assert iter.has()
    assert iter.get().equal(user "second")
    iter.next()
    assert iter.has()
    assert iter.get().equal(user "third")
    iter.next()
    assert not iter.has()


test mixed-test()
    var ds.List{String} list
    list.prepend(owner String{8}(user "first"))
    list.append(owner String{8}(user "second"))
    list.prepend(owner String{8}(user "third"))
    var ds.ListIterator{String} iter(user list)
    assert iter.has()
    assert iter.get().equal(user "third")
    iter.next()
    assert iter.has()
    assert iter.get().equal(user "first")
    iter.next()
    assert iter.has()
    assert iter.get().equal(user "second")
    iter.next()
    assert not iter.has()


test pop-test()
    var ds.List{String} list
    list.append(owner String{8}(user "first"))
    list.append(owner String{8}(user "second"))
    list.append(owner String{8}(user "third"))
    assert list.pop().equal(user "first")
    assert list.pop().equal(user "second")
    assert list.pop().equal(user "third")
    assert-error list.pop(), "list empty"


test is-empty-test()
    var ds.List{String} list
    assert list.is-empty()
    list.append(owner String{8}(user "first"))
    assert not list.is-empty()
    list.pop()
    assert list.is-empty()


test generic-iter-test()
    var ds.List{String} list
    list.append(owner String{8}(user "first"))
    list.append(owner String{8}(user "second"))
    list.append(owner String{8}(user "third"))
    var ds.ListIterator{String} list-iter(user list)
    user ds.Iterator{String} iter(user list-iter)
    assert iter.has()
    assert iter.get().equal(user "first")
    iter.next()
    assert iter.has()
    assert iter.get().equal(user "second")
    iter.next()
    assert iter.has()
    assert iter.get().equal(user "third")
    iter.next()
    assert not iter.has()


test empty-iter-test()
    var ds.ListIterator{String} iter(user _)
    assert not iter.has()
    assert-error iter.get()
    iter.next()
    assert not iter.has()


test abstract-methods()
    assert-error ds.Iterator.has(user _), "unimplemented dynamic method 'has'"
    assert-error ds.Iterator.get(user _), "unimplemented dynamic method 'get'"
    assert-error ds.Iterator.next(user _), "unimplemented dynamic method 'next'"
